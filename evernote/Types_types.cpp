/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Types_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace evernote { namespace edam {

int _kPrivilegeLevelValues[] = {
  PrivilegeLevel::NORMAL,
  PrivilegeLevel::PREMIUM,
  PrivilegeLevel::VIP,
  PrivilegeLevel::MANAGER,
  PrivilegeLevel::SUPPORT,
  PrivilegeLevel::ADMIN
};
const char* _kPrivilegeLevelNames[] = {
  "NORMAL",
  "PREMIUM",
  "VIP",
  "MANAGER",
  "SUPPORT",
  "ADMIN"
};
const std::map<int, const char*> _PrivilegeLevel_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kPrivilegeLevelValues, _kPrivilegeLevelNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kServiceLevelValues[] = {
  ServiceLevel::BASIC,
  ServiceLevel::PLUS,
  ServiceLevel::PREMIUM
};
const char* _kServiceLevelNames[] = {
  "BASIC",
  "PLUS",
  "PREMIUM"
};
const std::map<int, const char*> _ServiceLevel_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kServiceLevelValues, _kServiceLevelNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kQueryFormatValues[] = {
  QueryFormat::USER,
  QueryFormat::SEXP
};
const char* _kQueryFormatNames[] = {
  "USER",
  "SEXP"
};
const std::map<int, const char*> _QueryFormat_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kQueryFormatValues, _kQueryFormatNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kNoteSortOrderValues[] = {
  NoteSortOrder::CREATED,
  NoteSortOrder::UPDATED,
  NoteSortOrder::RELEVANCE,
  NoteSortOrder::UPDATE_SEQUENCE_NUMBER,
  NoteSortOrder::TITLE
};
const char* _kNoteSortOrderNames[] = {
  "CREATED",
  "UPDATED",
  "RELEVANCE",
  "UPDATE_SEQUENCE_NUMBER",
  "TITLE"
};
const std::map<int, const char*> _NoteSortOrder_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kNoteSortOrderValues, _kNoteSortOrderNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPremiumOrderStatusValues[] = {
  PremiumOrderStatus::NONE,
  PremiumOrderStatus::PENDING,
  PremiumOrderStatus::ACTIVE,
  PremiumOrderStatus::FAILED,
  PremiumOrderStatus::CANCELLATION_PENDING,
  PremiumOrderStatus::CANCELED
};
const char* _kPremiumOrderStatusNames[] = {
  "NONE",
  "PENDING",
  "ACTIVE",
  "FAILED",
  "CANCELLATION_PENDING",
  "CANCELED"
};
const std::map<int, const char*> _PremiumOrderStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kPremiumOrderStatusValues, _kPremiumOrderStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSharedNotebookPrivilegeLevelValues[] = {
  SharedNotebookPrivilegeLevel::READ_NOTEBOOK,
  SharedNotebookPrivilegeLevel::MODIFY_NOTEBOOK_PLUS_ACTIVITY,
  SharedNotebookPrivilegeLevel::READ_NOTEBOOK_PLUS_ACTIVITY,
  SharedNotebookPrivilegeLevel::GROUP,
  SharedNotebookPrivilegeLevel::FULL_ACCESS,
  SharedNotebookPrivilegeLevel::BUSINESS_FULL_ACCESS
};
const char* _kSharedNotebookPrivilegeLevelNames[] = {
  "READ_NOTEBOOK",
  "MODIFY_NOTEBOOK_PLUS_ACTIVITY",
  "READ_NOTEBOOK_PLUS_ACTIVITY",
  "GROUP",
  "FULL_ACCESS",
  "BUSINESS_FULL_ACCESS"
};
const std::map<int, const char*> _SharedNotebookPrivilegeLevel_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kSharedNotebookPrivilegeLevelValues, _kSharedNotebookPrivilegeLevelNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSharedNotePrivilegeLevelValues[] = {
  SharedNotePrivilegeLevel::READ_NOTE,
  SharedNotePrivilegeLevel::MODIFY_NOTE,
  SharedNotePrivilegeLevel::FULL_ACCESS
};
const char* _kSharedNotePrivilegeLevelNames[] = {
  "READ_NOTE",
  "MODIFY_NOTE",
  "FULL_ACCESS"
};
const std::map<int, const char*> _SharedNotePrivilegeLevel_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSharedNotePrivilegeLevelValues, _kSharedNotePrivilegeLevelNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSponsoredGroupRoleValues[] = {
  SponsoredGroupRole::GROUP_MEMBER,
  SponsoredGroupRole::GROUP_ADMIN,
  SponsoredGroupRole::GROUP_OWNER
};
const char* _kSponsoredGroupRoleNames[] = {
  "GROUP_MEMBER",
  "GROUP_ADMIN",
  "GROUP_OWNER"
};
const std::map<int, const char*> _SponsoredGroupRole_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSponsoredGroupRoleValues, _kSponsoredGroupRoleNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kBusinessUserRoleValues[] = {
  BusinessUserRole::ADMIN,
  BusinessUserRole::NORMAL
};
const char* _kBusinessUserRoleNames[] = {
  "ADMIN",
  "NORMAL"
};
const std::map<int, const char*> _BusinessUserRole_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kBusinessUserRoleValues, _kBusinessUserRoleNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSharedNotebookInstanceRestrictionsValues[] = {
  SharedNotebookInstanceRestrictions::ASSIGNED,
  SharedNotebookInstanceRestrictions::NO_SHARED_NOTEBOOKS
};
const char* _kSharedNotebookInstanceRestrictionsNames[] = {
  "ASSIGNED",
  "NO_SHARED_NOTEBOOKS"
};
const std::map<int, const char*> _SharedNotebookInstanceRestrictions_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSharedNotebookInstanceRestrictionsValues, _kSharedNotebookInstanceRestrictionsNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kReminderEmailConfigValues[] = {
  ReminderEmailConfig::DO_NOT_SEND,
  ReminderEmailConfig::SEND_DAILY_EMAIL
};
const char* _kReminderEmailConfigNames[] = {
  "DO_NOT_SEND",
  "SEND_DAILY_EMAIL"
};
const std::map<int, const char*> _ReminderEmailConfig_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kReminderEmailConfigValues, _kReminderEmailConfigNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kBusinessInvitationStatusValues[] = {
  BusinessInvitationStatus::APPROVED,
  BusinessInvitationStatus::REQUESTED,
  BusinessInvitationStatus::REDEEMED
};
const char* _kBusinessInvitationStatusNames[] = {
  "APPROVED",
  "REQUESTED",
  "REDEEMED"
};
const std::map<int, const char*> _BusinessInvitationStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kBusinessInvitationStatusValues, _kBusinessInvitationStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kContactTypeValues[] = {
  ContactType::EVERNOTE,
  ContactType::SMS,
  ContactType::FACEBOOK,
  ContactType::EMAIL,
  ContactType::TWITTER,
  ContactType::LINKEDIN
};
const char* _kContactTypeNames[] = {
  "EVERNOTE",
  "SMS",
  "FACEBOOK",
  "EMAIL",
  "TWITTER",
  "LINKEDIN"
};
const std::map<int, const char*> _ContactType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kContactTypeValues, _kContactTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRelatedContentTypeValues[] = {
  RelatedContentType::NEWS_ARTICLE,
  RelatedContentType::PROFILE_PERSON,
  RelatedContentType::PROFILE_ORGANIZATION,
  RelatedContentType::REFERENCE_MATERIAL
};
const char* _kRelatedContentTypeNames[] = {
  "NEWS_ARTICLE",
  "PROFILE_PERSON",
  "PROFILE_ORGANIZATION",
  "REFERENCE_MATERIAL"
};
const std::map<int, const char*> _RelatedContentType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kRelatedContentTypeValues, _kRelatedContentTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRelatedContentAccessValues[] = {
  RelatedContentAccess::NOT_ACCESSIBLE,
  RelatedContentAccess::DIRECT_LINK_ACCESS_OK,
  RelatedContentAccess::DIRECT_LINK_LOGIN_REQUIRED,
  RelatedContentAccess::DIRECT_LINK_EMBEDDED_VIEW
};
const char* _kRelatedContentAccessNames[] = {
  "NOT_ACCESSIBLE",
  "DIRECT_LINK_ACCESS_OK",
  "DIRECT_LINK_LOGIN_REQUIRED",
  "DIRECT_LINK_EMBEDDED_VIEW"
};
const std::map<int, const char*> _RelatedContentAccess_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kRelatedContentAccessValues, _kRelatedContentAccessNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kUserIdentityTypeValues[] = {
  UserIdentityType::EVERNOTE_USERID,
  UserIdentityType::EMAIL,
  UserIdentityType::IDENTITYID
};
const char* _kUserIdentityTypeNames[] = {
  "EVERNOTE_USERID",
  "EMAIL",
  "IDENTITYID"
};
const std::map<int, const char*> _UserIdentityType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kUserIdentityTypeValues, _kUserIdentityTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Data::~Data() throw() {
}


void Data::__set_bodyHash(const std::string& val) {
  this->bodyHash = val;
__isset.bodyHash = true;
}

void Data::__set_size(const int32_t val) {
  this->size = val;
__isset.size = true;
}

void Data::__set_body(const std::string& val) {
  this->body = val;
__isset.body = true;
}

uint32_t Data::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bodyHash);
          this->__isset.bodyHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->body);
          this->__isset.body = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Data::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Data");

  if (this->__isset.bodyHash) {
    xfer += oprot->writeFieldBegin("bodyHash", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeBinary(this->bodyHash);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.size) {
    xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->size);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.body) {
    xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeBinary(this->body);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Data &a, Data &b) {
  using ::std::swap;
  swap(a.bodyHash, b.bodyHash);
  swap(a.size, b.size);
  swap(a.body, b.body);
  swap(a.__isset, b.__isset);
}

Data::Data(const Data& other0) {
  bodyHash = other0.bodyHash;
  size = other0.size;
  body = other0.body;
  __isset = other0.__isset;
}
Data& Data::operator=(const Data& other1) {
  bodyHash = other1.bodyHash;
  size = other1.size;
  body = other1.body;
  __isset = other1.__isset;
  return *this;
}
void Data::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Data(";
  out << "bodyHash="; (__isset.bodyHash ? (out << to_string(bodyHash)) : (out << "<null>"));
  out << ", " << "size="; (__isset.size ? (out << to_string(size)) : (out << "<null>"));
  out << ", " << "body="; (__isset.body ? (out << to_string(body)) : (out << "<null>"));
  out << ")";
}


UserAttributes::~UserAttributes() throw() {
}


void UserAttributes::__set_defaultLocationName(const std::string& val) {
  this->defaultLocationName = val;
__isset.defaultLocationName = true;
}

void UserAttributes::__set_defaultLatitude(const double val) {
  this->defaultLatitude = val;
__isset.defaultLatitude = true;
}

void UserAttributes::__set_defaultLongitude(const double val) {
  this->defaultLongitude = val;
__isset.defaultLongitude = true;
}

void UserAttributes::__set_preactivation(const bool val) {
  this->preactivation = val;
__isset.preactivation = true;
}

void UserAttributes::__set_viewedPromotions(const std::vector<std::string> & val) {
  this->viewedPromotions = val;
__isset.viewedPromotions = true;
}

void UserAttributes::__set_incomingEmailAddress(const std::string& val) {
  this->incomingEmailAddress = val;
__isset.incomingEmailAddress = true;
}

void UserAttributes::__set_recentMailedAddresses(const std::vector<std::string> & val) {
  this->recentMailedAddresses = val;
__isset.recentMailedAddresses = true;
}

void UserAttributes::__set_comments(const std::string& val) {
  this->comments = val;
__isset.comments = true;
}

void UserAttributes::__set_dateAgreedToTermsOfService(const Timestamp val) {
  this->dateAgreedToTermsOfService = val;
__isset.dateAgreedToTermsOfService = true;
}

void UserAttributes::__set_maxReferrals(const int32_t val) {
  this->maxReferrals = val;
__isset.maxReferrals = true;
}

void UserAttributes::__set_referralCount(const int32_t val) {
  this->referralCount = val;
__isset.referralCount = true;
}

void UserAttributes::__set_refererCode(const std::string& val) {
  this->refererCode = val;
__isset.refererCode = true;
}

void UserAttributes::__set_sentEmailDate(const Timestamp val) {
  this->sentEmailDate = val;
__isset.sentEmailDate = true;
}

void UserAttributes::__set_sentEmailCount(const int32_t val) {
  this->sentEmailCount = val;
__isset.sentEmailCount = true;
}

void UserAttributes::__set_dailyEmailLimit(const int32_t val) {
  this->dailyEmailLimit = val;
__isset.dailyEmailLimit = true;
}

void UserAttributes::__set_emailOptOutDate(const Timestamp val) {
  this->emailOptOutDate = val;
__isset.emailOptOutDate = true;
}

void UserAttributes::__set_partnerEmailOptInDate(const Timestamp val) {
  this->partnerEmailOptInDate = val;
__isset.partnerEmailOptInDate = true;
}

void UserAttributes::__set_preferredLanguage(const std::string& val) {
  this->preferredLanguage = val;
__isset.preferredLanguage = true;
}

void UserAttributes::__set_preferredCountry(const std::string& val) {
  this->preferredCountry = val;
__isset.preferredCountry = true;
}

void UserAttributes::__set_clipFullPage(const bool val) {
  this->clipFullPage = val;
__isset.clipFullPage = true;
}

void UserAttributes::__set_twitterUserName(const std::string& val) {
  this->twitterUserName = val;
__isset.twitterUserName = true;
}

void UserAttributes::__set_twitterId(const std::string& val) {
  this->twitterId = val;
__isset.twitterId = true;
}

void UserAttributes::__set_groupName(const std::string& val) {
  this->groupName = val;
__isset.groupName = true;
}

void UserAttributes::__set_recognitionLanguage(const std::string& val) {
  this->recognitionLanguage = val;
__isset.recognitionLanguage = true;
}

void UserAttributes::__set_referralProof(const std::string& val) {
  this->referralProof = val;
__isset.referralProof = true;
}

void UserAttributes::__set_educationalDiscount(const bool val) {
  this->educationalDiscount = val;
__isset.educationalDiscount = true;
}

void UserAttributes::__set_businessAddress(const std::string& val) {
  this->businessAddress = val;
__isset.businessAddress = true;
}

void UserAttributes::__set_hideSponsorBilling(const bool val) {
  this->hideSponsorBilling = val;
__isset.hideSponsorBilling = true;
}

void UserAttributes::__set_useEmailAutoFiling(const bool val) {
  this->useEmailAutoFiling = val;
__isset.useEmailAutoFiling = true;
}

void UserAttributes::__set_reminderEmailConfig(const ReminderEmailConfig::type val) {
  this->reminderEmailConfig = val;
__isset.reminderEmailConfig = true;
}

void UserAttributes::__set_emailAddressLastConfirmed(const Timestamp val) {
  this->emailAddressLastConfirmed = val;
__isset.emailAddressLastConfirmed = true;
}

void UserAttributes::__set_passwordUpdated(const Timestamp val) {
  this->passwordUpdated = val;
__isset.passwordUpdated = true;
}

void UserAttributes::__set_salesforcePushEnabled(const bool val) {
  this->salesforcePushEnabled = val;
__isset.salesforcePushEnabled = true;
}

void UserAttributes::__set_shouldLogClientEvent(const bool val) {
  this->shouldLogClientEvent = val;
__isset.shouldLogClientEvent = true;
}

uint32_t UserAttributes::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->defaultLocationName);
          this->__isset.defaultLocationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->defaultLatitude);
          this->__isset.defaultLatitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->defaultLongitude);
          this->__isset.defaultLongitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->preactivation);
          this->__isset.preactivation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->viewedPromotions.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->viewedPromotions.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += iprot->readString(this->viewedPromotions[_i6]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.viewedPromotions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->incomingEmailAddress);
          this->__isset.incomingEmailAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->recentMailedAddresses.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->recentMailedAddresses.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += iprot->readString(this->recentMailedAddresses[_i11]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.recentMailedAddresses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comments);
          this->__isset.comments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dateAgreedToTermsOfService);
          this->__isset.dateAgreedToTermsOfService = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxReferrals);
          this->__isset.maxReferrals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->referralCount);
          this->__isset.referralCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->refererCode);
          this->__isset.refererCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sentEmailDate);
          this->__isset.sentEmailDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sentEmailCount);
          this->__isset.sentEmailCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dailyEmailLimit);
          this->__isset.dailyEmailLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->emailOptOutDate);
          this->__isset.emailOptOutDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->partnerEmailOptInDate);
          this->__isset.partnerEmailOptInDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->preferredLanguage);
          this->__isset.preferredLanguage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->preferredCountry);
          this->__isset.preferredCountry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->clipFullPage);
          this->__isset.clipFullPage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->twitterUserName);
          this->__isset.twitterUserName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->twitterId);
          this->__isset.twitterId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->groupName);
          this->__isset.groupName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->recognitionLanguage);
          this->__isset.recognitionLanguage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->referralProof);
          this->__isset.referralProof = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->educationalDiscount);
          this->__isset.educationalDiscount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->businessAddress);
          this->__isset.businessAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hideSponsorBilling);
          this->__isset.hideSponsorBilling = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->useEmailAutoFiling);
          this->__isset.useEmailAutoFiling = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast12;
          xfer += iprot->readI32(ecast12);
          this->reminderEmailConfig = (ReminderEmailConfig::type)ecast12;
          this->__isset.reminderEmailConfig = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->emailAddressLastConfirmed);
          this->__isset.emailAddressLastConfirmed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->passwordUpdated);
          this->__isset.passwordUpdated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->salesforcePushEnabled);
          this->__isset.salesforcePushEnabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->shouldLogClientEvent);
          this->__isset.shouldLogClientEvent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserAttributes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserAttributes");

  if (this->__isset.defaultLocationName) {
    xfer += oprot->writeFieldBegin("defaultLocationName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->defaultLocationName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.defaultLatitude) {
    xfer += oprot->writeFieldBegin("defaultLatitude", ::apache::thrift::protocol::T_DOUBLE, 2);
    xfer += oprot->writeDouble(this->defaultLatitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.defaultLongitude) {
    xfer += oprot->writeFieldBegin("defaultLongitude", ::apache::thrift::protocol::T_DOUBLE, 3);
    xfer += oprot->writeDouble(this->defaultLongitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.preactivation) {
    xfer += oprot->writeFieldBegin("preactivation", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->preactivation);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.viewedPromotions) {
    xfer += oprot->writeFieldBegin("viewedPromotions", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->viewedPromotions.size()));
      std::vector<std::string> ::const_iterator _iter13;
      for (_iter13 = this->viewedPromotions.begin(); _iter13 != this->viewedPromotions.end(); ++_iter13)
      {
        xfer += oprot->writeString((*_iter13));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.incomingEmailAddress) {
    xfer += oprot->writeFieldBegin("incomingEmailAddress", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->incomingEmailAddress);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recentMailedAddresses) {
    xfer += oprot->writeFieldBegin("recentMailedAddresses", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->recentMailedAddresses.size()));
      std::vector<std::string> ::const_iterator _iter14;
      for (_iter14 = this->recentMailedAddresses.begin(); _iter14 != this->recentMailedAddresses.end(); ++_iter14)
      {
        xfer += oprot->writeString((*_iter14));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.comments) {
    xfer += oprot->writeFieldBegin("comments", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->comments);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dateAgreedToTermsOfService) {
    xfer += oprot->writeFieldBegin("dateAgreedToTermsOfService", ::apache::thrift::protocol::T_I64, 11);
    xfer += oprot->writeI64(this->dateAgreedToTermsOfService);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxReferrals) {
    xfer += oprot->writeFieldBegin("maxReferrals", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->maxReferrals);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.referralCount) {
    xfer += oprot->writeFieldBegin("referralCount", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32(this->referralCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.refererCode) {
    xfer += oprot->writeFieldBegin("refererCode", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->refererCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sentEmailDate) {
    xfer += oprot->writeFieldBegin("sentEmailDate", ::apache::thrift::protocol::T_I64, 15);
    xfer += oprot->writeI64(this->sentEmailDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sentEmailCount) {
    xfer += oprot->writeFieldBegin("sentEmailCount", ::apache::thrift::protocol::T_I32, 16);
    xfer += oprot->writeI32(this->sentEmailCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dailyEmailLimit) {
    xfer += oprot->writeFieldBegin("dailyEmailLimit", ::apache::thrift::protocol::T_I32, 17);
    xfer += oprot->writeI32(this->dailyEmailLimit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.emailOptOutDate) {
    xfer += oprot->writeFieldBegin("emailOptOutDate", ::apache::thrift::protocol::T_I64, 18);
    xfer += oprot->writeI64(this->emailOptOutDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.partnerEmailOptInDate) {
    xfer += oprot->writeFieldBegin("partnerEmailOptInDate", ::apache::thrift::protocol::T_I64, 19);
    xfer += oprot->writeI64(this->partnerEmailOptInDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.preferredLanguage) {
    xfer += oprot->writeFieldBegin("preferredLanguage", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->preferredLanguage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.preferredCountry) {
    xfer += oprot->writeFieldBegin("preferredCountry", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->preferredCountry);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.clipFullPage) {
    xfer += oprot->writeFieldBegin("clipFullPage", ::apache::thrift::protocol::T_BOOL, 22);
    xfer += oprot->writeBool(this->clipFullPage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.twitterUserName) {
    xfer += oprot->writeFieldBegin("twitterUserName", ::apache::thrift::protocol::T_STRING, 23);
    xfer += oprot->writeString(this->twitterUserName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.twitterId) {
    xfer += oprot->writeFieldBegin("twitterId", ::apache::thrift::protocol::T_STRING, 24);
    xfer += oprot->writeString(this->twitterId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.groupName) {
    xfer += oprot->writeFieldBegin("groupName", ::apache::thrift::protocol::T_STRING, 25);
    xfer += oprot->writeString(this->groupName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recognitionLanguage) {
    xfer += oprot->writeFieldBegin("recognitionLanguage", ::apache::thrift::protocol::T_STRING, 26);
    xfer += oprot->writeString(this->recognitionLanguage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.referralProof) {
    xfer += oprot->writeFieldBegin("referralProof", ::apache::thrift::protocol::T_STRING, 28);
    xfer += oprot->writeString(this->referralProof);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.educationalDiscount) {
    xfer += oprot->writeFieldBegin("educationalDiscount", ::apache::thrift::protocol::T_BOOL, 29);
    xfer += oprot->writeBool(this->educationalDiscount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.businessAddress) {
    xfer += oprot->writeFieldBegin("businessAddress", ::apache::thrift::protocol::T_STRING, 30);
    xfer += oprot->writeString(this->businessAddress);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hideSponsorBilling) {
    xfer += oprot->writeFieldBegin("hideSponsorBilling", ::apache::thrift::protocol::T_BOOL, 31);
    xfer += oprot->writeBool(this->hideSponsorBilling);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.useEmailAutoFiling) {
    xfer += oprot->writeFieldBegin("useEmailAutoFiling", ::apache::thrift::protocol::T_BOOL, 33);
    xfer += oprot->writeBool(this->useEmailAutoFiling);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reminderEmailConfig) {
    xfer += oprot->writeFieldBegin("reminderEmailConfig", ::apache::thrift::protocol::T_I32, 34);
    xfer += oprot->writeI32((int32_t)this->reminderEmailConfig);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.emailAddressLastConfirmed) {
    xfer += oprot->writeFieldBegin("emailAddressLastConfirmed", ::apache::thrift::protocol::T_I64, 35);
    xfer += oprot->writeI64(this->emailAddressLastConfirmed);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.passwordUpdated) {
    xfer += oprot->writeFieldBegin("passwordUpdated", ::apache::thrift::protocol::T_I64, 36);
    xfer += oprot->writeI64(this->passwordUpdated);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.salesforcePushEnabled) {
    xfer += oprot->writeFieldBegin("salesforcePushEnabled", ::apache::thrift::protocol::T_BOOL, 37);
    xfer += oprot->writeBool(this->salesforcePushEnabled);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shouldLogClientEvent) {
    xfer += oprot->writeFieldBegin("shouldLogClientEvent", ::apache::thrift::protocol::T_BOOL, 38);
    xfer += oprot->writeBool(this->shouldLogClientEvent);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserAttributes &a, UserAttributes &b) {
  using ::std::swap;
  swap(a.defaultLocationName, b.defaultLocationName);
  swap(a.defaultLatitude, b.defaultLatitude);
  swap(a.defaultLongitude, b.defaultLongitude);
  swap(a.preactivation, b.preactivation);
  swap(a.viewedPromotions, b.viewedPromotions);
  swap(a.incomingEmailAddress, b.incomingEmailAddress);
  swap(a.recentMailedAddresses, b.recentMailedAddresses);
  swap(a.comments, b.comments);
  swap(a.dateAgreedToTermsOfService, b.dateAgreedToTermsOfService);
  swap(a.maxReferrals, b.maxReferrals);
  swap(a.referralCount, b.referralCount);
  swap(a.refererCode, b.refererCode);
  swap(a.sentEmailDate, b.sentEmailDate);
  swap(a.sentEmailCount, b.sentEmailCount);
  swap(a.dailyEmailLimit, b.dailyEmailLimit);
  swap(a.emailOptOutDate, b.emailOptOutDate);
  swap(a.partnerEmailOptInDate, b.partnerEmailOptInDate);
  swap(a.preferredLanguage, b.preferredLanguage);
  swap(a.preferredCountry, b.preferredCountry);
  swap(a.clipFullPage, b.clipFullPage);
  swap(a.twitterUserName, b.twitterUserName);
  swap(a.twitterId, b.twitterId);
  swap(a.groupName, b.groupName);
  swap(a.recognitionLanguage, b.recognitionLanguage);
  swap(a.referralProof, b.referralProof);
  swap(a.educationalDiscount, b.educationalDiscount);
  swap(a.businessAddress, b.businessAddress);
  swap(a.hideSponsorBilling, b.hideSponsorBilling);
  swap(a.useEmailAutoFiling, b.useEmailAutoFiling);
  swap(a.reminderEmailConfig, b.reminderEmailConfig);
  swap(a.emailAddressLastConfirmed, b.emailAddressLastConfirmed);
  swap(a.passwordUpdated, b.passwordUpdated);
  swap(a.salesforcePushEnabled, b.salesforcePushEnabled);
  swap(a.shouldLogClientEvent, b.shouldLogClientEvent);
  swap(a.__isset, b.__isset);
}

UserAttributes::UserAttributes(const UserAttributes& other15) {
  defaultLocationName = other15.defaultLocationName;
  defaultLatitude = other15.defaultLatitude;
  defaultLongitude = other15.defaultLongitude;
  preactivation = other15.preactivation;
  viewedPromotions = other15.viewedPromotions;
  incomingEmailAddress = other15.incomingEmailAddress;
  recentMailedAddresses = other15.recentMailedAddresses;
  comments = other15.comments;
  dateAgreedToTermsOfService = other15.dateAgreedToTermsOfService;
  maxReferrals = other15.maxReferrals;
  referralCount = other15.referralCount;
  refererCode = other15.refererCode;
  sentEmailDate = other15.sentEmailDate;
  sentEmailCount = other15.sentEmailCount;
  dailyEmailLimit = other15.dailyEmailLimit;
  emailOptOutDate = other15.emailOptOutDate;
  partnerEmailOptInDate = other15.partnerEmailOptInDate;
  preferredLanguage = other15.preferredLanguage;
  preferredCountry = other15.preferredCountry;
  clipFullPage = other15.clipFullPage;
  twitterUserName = other15.twitterUserName;
  twitterId = other15.twitterId;
  groupName = other15.groupName;
  recognitionLanguage = other15.recognitionLanguage;
  referralProof = other15.referralProof;
  educationalDiscount = other15.educationalDiscount;
  businessAddress = other15.businessAddress;
  hideSponsorBilling = other15.hideSponsorBilling;
  useEmailAutoFiling = other15.useEmailAutoFiling;
  reminderEmailConfig = other15.reminderEmailConfig;
  emailAddressLastConfirmed = other15.emailAddressLastConfirmed;
  passwordUpdated = other15.passwordUpdated;
  salesforcePushEnabled = other15.salesforcePushEnabled;
  shouldLogClientEvent = other15.shouldLogClientEvent;
  __isset = other15.__isset;
}
UserAttributes& UserAttributes::operator=(const UserAttributes& other16) {
  defaultLocationName = other16.defaultLocationName;
  defaultLatitude = other16.defaultLatitude;
  defaultLongitude = other16.defaultLongitude;
  preactivation = other16.preactivation;
  viewedPromotions = other16.viewedPromotions;
  incomingEmailAddress = other16.incomingEmailAddress;
  recentMailedAddresses = other16.recentMailedAddresses;
  comments = other16.comments;
  dateAgreedToTermsOfService = other16.dateAgreedToTermsOfService;
  maxReferrals = other16.maxReferrals;
  referralCount = other16.referralCount;
  refererCode = other16.refererCode;
  sentEmailDate = other16.sentEmailDate;
  sentEmailCount = other16.sentEmailCount;
  dailyEmailLimit = other16.dailyEmailLimit;
  emailOptOutDate = other16.emailOptOutDate;
  partnerEmailOptInDate = other16.partnerEmailOptInDate;
  preferredLanguage = other16.preferredLanguage;
  preferredCountry = other16.preferredCountry;
  clipFullPage = other16.clipFullPage;
  twitterUserName = other16.twitterUserName;
  twitterId = other16.twitterId;
  groupName = other16.groupName;
  recognitionLanguage = other16.recognitionLanguage;
  referralProof = other16.referralProof;
  educationalDiscount = other16.educationalDiscount;
  businessAddress = other16.businessAddress;
  hideSponsorBilling = other16.hideSponsorBilling;
  useEmailAutoFiling = other16.useEmailAutoFiling;
  reminderEmailConfig = other16.reminderEmailConfig;
  emailAddressLastConfirmed = other16.emailAddressLastConfirmed;
  passwordUpdated = other16.passwordUpdated;
  salesforcePushEnabled = other16.salesforcePushEnabled;
  shouldLogClientEvent = other16.shouldLogClientEvent;
  __isset = other16.__isset;
  return *this;
}
void UserAttributes::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserAttributes(";
  out << "defaultLocationName="; (__isset.defaultLocationName ? (out << to_string(defaultLocationName)) : (out << "<null>"));
  out << ", " << "defaultLatitude="; (__isset.defaultLatitude ? (out << to_string(defaultLatitude)) : (out << "<null>"));
  out << ", " << "defaultLongitude="; (__isset.defaultLongitude ? (out << to_string(defaultLongitude)) : (out << "<null>"));
  out << ", " << "preactivation="; (__isset.preactivation ? (out << to_string(preactivation)) : (out << "<null>"));
  out << ", " << "viewedPromotions="; (__isset.viewedPromotions ? (out << to_string(viewedPromotions)) : (out << "<null>"));
  out << ", " << "incomingEmailAddress="; (__isset.incomingEmailAddress ? (out << to_string(incomingEmailAddress)) : (out << "<null>"));
  out << ", " << "recentMailedAddresses="; (__isset.recentMailedAddresses ? (out << to_string(recentMailedAddresses)) : (out << "<null>"));
  out << ", " << "comments="; (__isset.comments ? (out << to_string(comments)) : (out << "<null>"));
  out << ", " << "dateAgreedToTermsOfService="; (__isset.dateAgreedToTermsOfService ? (out << to_string(dateAgreedToTermsOfService)) : (out << "<null>"));
  out << ", " << "maxReferrals="; (__isset.maxReferrals ? (out << to_string(maxReferrals)) : (out << "<null>"));
  out << ", " << "referralCount="; (__isset.referralCount ? (out << to_string(referralCount)) : (out << "<null>"));
  out << ", " << "refererCode="; (__isset.refererCode ? (out << to_string(refererCode)) : (out << "<null>"));
  out << ", " << "sentEmailDate="; (__isset.sentEmailDate ? (out << to_string(sentEmailDate)) : (out << "<null>"));
  out << ", " << "sentEmailCount="; (__isset.sentEmailCount ? (out << to_string(sentEmailCount)) : (out << "<null>"));
  out << ", " << "dailyEmailLimit="; (__isset.dailyEmailLimit ? (out << to_string(dailyEmailLimit)) : (out << "<null>"));
  out << ", " << "emailOptOutDate="; (__isset.emailOptOutDate ? (out << to_string(emailOptOutDate)) : (out << "<null>"));
  out << ", " << "partnerEmailOptInDate="; (__isset.partnerEmailOptInDate ? (out << to_string(partnerEmailOptInDate)) : (out << "<null>"));
  out << ", " << "preferredLanguage="; (__isset.preferredLanguage ? (out << to_string(preferredLanguage)) : (out << "<null>"));
  out << ", " << "preferredCountry="; (__isset.preferredCountry ? (out << to_string(preferredCountry)) : (out << "<null>"));
  out << ", " << "clipFullPage="; (__isset.clipFullPage ? (out << to_string(clipFullPage)) : (out << "<null>"));
  out << ", " << "twitterUserName="; (__isset.twitterUserName ? (out << to_string(twitterUserName)) : (out << "<null>"));
  out << ", " << "twitterId="; (__isset.twitterId ? (out << to_string(twitterId)) : (out << "<null>"));
  out << ", " << "groupName="; (__isset.groupName ? (out << to_string(groupName)) : (out << "<null>"));
  out << ", " << "recognitionLanguage="; (__isset.recognitionLanguage ? (out << to_string(recognitionLanguage)) : (out << "<null>"));
  out << ", " << "referralProof="; (__isset.referralProof ? (out << to_string(referralProof)) : (out << "<null>"));
  out << ", " << "educationalDiscount="; (__isset.educationalDiscount ? (out << to_string(educationalDiscount)) : (out << "<null>"));
  out << ", " << "businessAddress="; (__isset.businessAddress ? (out << to_string(businessAddress)) : (out << "<null>"));
  out << ", " << "hideSponsorBilling="; (__isset.hideSponsorBilling ? (out << to_string(hideSponsorBilling)) : (out << "<null>"));
  out << ", " << "useEmailAutoFiling="; (__isset.useEmailAutoFiling ? (out << to_string(useEmailAutoFiling)) : (out << "<null>"));
  out << ", " << "reminderEmailConfig="; (__isset.reminderEmailConfig ? (out << to_string(reminderEmailConfig)) : (out << "<null>"));
  out << ", " << "emailAddressLastConfirmed="; (__isset.emailAddressLastConfirmed ? (out << to_string(emailAddressLastConfirmed)) : (out << "<null>"));
  out << ", " << "passwordUpdated="; (__isset.passwordUpdated ? (out << to_string(passwordUpdated)) : (out << "<null>"));
  out << ", " << "salesforcePushEnabled="; (__isset.salesforcePushEnabled ? (out << to_string(salesforcePushEnabled)) : (out << "<null>"));
  out << ", " << "shouldLogClientEvent="; (__isset.shouldLogClientEvent ? (out << to_string(shouldLogClientEvent)) : (out << "<null>"));
  out << ")";
}


BusinessUserAttributes::~BusinessUserAttributes() throw() {
}


void BusinessUserAttributes::__set_title(const std::string& val) {
  this->title = val;
__isset.title = true;
}

void BusinessUserAttributes::__set_location(const std::string& val) {
  this->location = val;
__isset.location = true;
}

void BusinessUserAttributes::__set_department(const std::string& val) {
  this->department = val;
__isset.department = true;
}

void BusinessUserAttributes::__set_mobilePhone(const std::string& val) {
  this->mobilePhone = val;
__isset.mobilePhone = true;
}

void BusinessUserAttributes::__set_linkedInProfileUrl(const std::string& val) {
  this->linkedInProfileUrl = val;
__isset.linkedInProfileUrl = true;
}

void BusinessUserAttributes::__set_workPhone(const std::string& val) {
  this->workPhone = val;
__isset.workPhone = true;
}

void BusinessUserAttributes::__set_companyStartDate(const Timestamp val) {
  this->companyStartDate = val;
__isset.companyStartDate = true;
}

uint32_t BusinessUserAttributes::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->location);
          this->__isset.location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->department);
          this->__isset.department = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mobilePhone);
          this->__isset.mobilePhone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->linkedInProfileUrl);
          this->__isset.linkedInProfileUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->workPhone);
          this->__isset.workPhone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->companyStartDate);
          this->__isset.companyStartDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BusinessUserAttributes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BusinessUserAttributes");

  if (this->__isset.title) {
    xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->title);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.location) {
    xfer += oprot->writeFieldBegin("location", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->location);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.department) {
    xfer += oprot->writeFieldBegin("department", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->department);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mobilePhone) {
    xfer += oprot->writeFieldBegin("mobilePhone", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->mobilePhone);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.linkedInProfileUrl) {
    xfer += oprot->writeFieldBegin("linkedInProfileUrl", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->linkedInProfileUrl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.workPhone) {
    xfer += oprot->writeFieldBegin("workPhone", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->workPhone);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.companyStartDate) {
    xfer += oprot->writeFieldBegin("companyStartDate", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->companyStartDate);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BusinessUserAttributes &a, BusinessUserAttributes &b) {
  using ::std::swap;
  swap(a.title, b.title);
  swap(a.location, b.location);
  swap(a.department, b.department);
  swap(a.mobilePhone, b.mobilePhone);
  swap(a.linkedInProfileUrl, b.linkedInProfileUrl);
  swap(a.workPhone, b.workPhone);
  swap(a.companyStartDate, b.companyStartDate);
  swap(a.__isset, b.__isset);
}

BusinessUserAttributes::BusinessUserAttributes(const BusinessUserAttributes& other17) {
  title = other17.title;
  location = other17.location;
  department = other17.department;
  mobilePhone = other17.mobilePhone;
  linkedInProfileUrl = other17.linkedInProfileUrl;
  workPhone = other17.workPhone;
  companyStartDate = other17.companyStartDate;
  __isset = other17.__isset;
}
BusinessUserAttributes& BusinessUserAttributes::operator=(const BusinessUserAttributes& other18) {
  title = other18.title;
  location = other18.location;
  department = other18.department;
  mobilePhone = other18.mobilePhone;
  linkedInProfileUrl = other18.linkedInProfileUrl;
  workPhone = other18.workPhone;
  companyStartDate = other18.companyStartDate;
  __isset = other18.__isset;
  return *this;
}
void BusinessUserAttributes::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BusinessUserAttributes(";
  out << "title="; (__isset.title ? (out << to_string(title)) : (out << "<null>"));
  out << ", " << "location="; (__isset.location ? (out << to_string(location)) : (out << "<null>"));
  out << ", " << "department="; (__isset.department ? (out << to_string(department)) : (out << "<null>"));
  out << ", " << "mobilePhone="; (__isset.mobilePhone ? (out << to_string(mobilePhone)) : (out << "<null>"));
  out << ", " << "linkedInProfileUrl="; (__isset.linkedInProfileUrl ? (out << to_string(linkedInProfileUrl)) : (out << "<null>"));
  out << ", " << "workPhone="; (__isset.workPhone ? (out << to_string(workPhone)) : (out << "<null>"));
  out << ", " << "companyStartDate="; (__isset.companyStartDate ? (out << to_string(companyStartDate)) : (out << "<null>"));
  out << ")";
}


Accounting::~Accounting() throw() {
}


void Accounting::__set_uploadLimitEnd(const Timestamp val) {
  this->uploadLimitEnd = val;
__isset.uploadLimitEnd = true;
}

void Accounting::__set_uploadLimitNextMonth(const int64_t val) {
  this->uploadLimitNextMonth = val;
__isset.uploadLimitNextMonth = true;
}

void Accounting::__set_premiumServiceStatus(const PremiumOrderStatus::type val) {
  this->premiumServiceStatus = val;
__isset.premiumServiceStatus = true;
}

void Accounting::__set_premiumOrderNumber(const std::string& val) {
  this->premiumOrderNumber = val;
__isset.premiumOrderNumber = true;
}

void Accounting::__set_premiumCommerceService(const std::string& val) {
  this->premiumCommerceService = val;
__isset.premiumCommerceService = true;
}

void Accounting::__set_premiumServiceStart(const Timestamp val) {
  this->premiumServiceStart = val;
__isset.premiumServiceStart = true;
}

void Accounting::__set_premiumServiceSKU(const std::string& val) {
  this->premiumServiceSKU = val;
__isset.premiumServiceSKU = true;
}

void Accounting::__set_lastSuccessfulCharge(const Timestamp val) {
  this->lastSuccessfulCharge = val;
__isset.lastSuccessfulCharge = true;
}

void Accounting::__set_lastFailedCharge(const Timestamp val) {
  this->lastFailedCharge = val;
__isset.lastFailedCharge = true;
}

void Accounting::__set_lastFailedChargeReason(const std::string& val) {
  this->lastFailedChargeReason = val;
__isset.lastFailedChargeReason = true;
}

void Accounting::__set_nextPaymentDue(const Timestamp val) {
  this->nextPaymentDue = val;
__isset.nextPaymentDue = true;
}

void Accounting::__set_premiumLockUntil(const Timestamp val) {
  this->premiumLockUntil = val;
__isset.premiumLockUntil = true;
}

void Accounting::__set_updated(const Timestamp val) {
  this->updated = val;
__isset.updated = true;
}

void Accounting::__set_premiumSubscriptionNumber(const std::string& val) {
  this->premiumSubscriptionNumber = val;
__isset.premiumSubscriptionNumber = true;
}

void Accounting::__set_lastRequestedCharge(const Timestamp val) {
  this->lastRequestedCharge = val;
__isset.lastRequestedCharge = true;
}

void Accounting::__set_currency(const std::string& val) {
  this->currency = val;
__isset.currency = true;
}

void Accounting::__set_unitPrice(const int32_t val) {
  this->unitPrice = val;
__isset.unitPrice = true;
}

void Accounting::__set_businessId(const int32_t val) {
  this->businessId = val;
__isset.businessId = true;
}

void Accounting::__set_businessName(const std::string& val) {
  this->businessName = val;
__isset.businessName = true;
}

void Accounting::__set_businessRole(const BusinessUserRole::type val) {
  this->businessRole = val;
__isset.businessRole = true;
}

void Accounting::__set_unitDiscount(const int32_t val) {
  this->unitDiscount = val;
__isset.unitDiscount = true;
}

void Accounting::__set_nextChargeDate(const Timestamp val) {
  this->nextChargeDate = val;
__isset.nextChargeDate = true;
}

void Accounting::__set_availablePoints(const int32_t val) {
  this->availablePoints = val;
__isset.availablePoints = true;
}

uint32_t Accounting::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uploadLimitEnd);
          this->__isset.uploadLimitEnd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uploadLimitNextMonth);
          this->__isset.uploadLimitNextMonth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast19;
          xfer += iprot->readI32(ecast19);
          this->premiumServiceStatus = (PremiumOrderStatus::type)ecast19;
          this->__isset.premiumServiceStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->premiumOrderNumber);
          this->__isset.premiumOrderNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->premiumCommerceService);
          this->__isset.premiumCommerceService = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->premiumServiceStart);
          this->__isset.premiumServiceStart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->premiumServiceSKU);
          this->__isset.premiumServiceSKU = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastSuccessfulCharge);
          this->__isset.lastSuccessfulCharge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastFailedCharge);
          this->__isset.lastFailedCharge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastFailedChargeReason);
          this->__isset.lastFailedChargeReason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nextPaymentDue);
          this->__isset.nextPaymentDue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->premiumLockUntil);
          this->__isset.premiumLockUntil = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->updated);
          this->__isset.updated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->premiumSubscriptionNumber);
          this->__isset.premiumSubscriptionNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastRequestedCharge);
          this->__isset.lastRequestedCharge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currency);
          this->__isset.currency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unitPrice);
          this->__isset.unitPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->businessId);
          this->__isset.businessId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->businessName);
          this->__isset.businessName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast20;
          xfer += iprot->readI32(ecast20);
          this->businessRole = (BusinessUserRole::type)ecast20;
          this->__isset.businessRole = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unitDiscount);
          this->__isset.unitDiscount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nextChargeDate);
          this->__isset.nextChargeDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->availablePoints);
          this->__isset.availablePoints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Accounting::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Accounting");

  if (this->__isset.uploadLimitEnd) {
    xfer += oprot->writeFieldBegin("uploadLimitEnd", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->uploadLimitEnd);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uploadLimitNextMonth) {
    xfer += oprot->writeFieldBegin("uploadLimitNextMonth", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->uploadLimitNextMonth);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.premiumServiceStatus) {
    xfer += oprot->writeFieldBegin("premiumServiceStatus", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->premiumServiceStatus);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.premiumOrderNumber) {
    xfer += oprot->writeFieldBegin("premiumOrderNumber", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->premiumOrderNumber);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.premiumCommerceService) {
    xfer += oprot->writeFieldBegin("premiumCommerceService", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->premiumCommerceService);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.premiumServiceStart) {
    xfer += oprot->writeFieldBegin("premiumServiceStart", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->premiumServiceStart);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.premiumServiceSKU) {
    xfer += oprot->writeFieldBegin("premiumServiceSKU", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->premiumServiceSKU);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastSuccessfulCharge) {
    xfer += oprot->writeFieldBegin("lastSuccessfulCharge", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->lastSuccessfulCharge);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastFailedCharge) {
    xfer += oprot->writeFieldBegin("lastFailedCharge", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->lastFailedCharge);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastFailedChargeReason) {
    xfer += oprot->writeFieldBegin("lastFailedChargeReason", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->lastFailedChargeReason);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nextPaymentDue) {
    xfer += oprot->writeFieldBegin("nextPaymentDue", ::apache::thrift::protocol::T_I64, 12);
    xfer += oprot->writeI64(this->nextPaymentDue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.premiumLockUntil) {
    xfer += oprot->writeFieldBegin("premiumLockUntil", ::apache::thrift::protocol::T_I64, 13);
    xfer += oprot->writeI64(this->premiumLockUntil);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updated) {
    xfer += oprot->writeFieldBegin("updated", ::apache::thrift::protocol::T_I64, 14);
    xfer += oprot->writeI64(this->updated);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.premiumSubscriptionNumber) {
    xfer += oprot->writeFieldBegin("premiumSubscriptionNumber", ::apache::thrift::protocol::T_STRING, 16);
    xfer += oprot->writeString(this->premiumSubscriptionNumber);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastRequestedCharge) {
    xfer += oprot->writeFieldBegin("lastRequestedCharge", ::apache::thrift::protocol::T_I64, 17);
    xfer += oprot->writeI64(this->lastRequestedCharge);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.currency) {
    xfer += oprot->writeFieldBegin("currency", ::apache::thrift::protocol::T_STRING, 18);
    xfer += oprot->writeString(this->currency);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.unitPrice) {
    xfer += oprot->writeFieldBegin("unitPrice", ::apache::thrift::protocol::T_I32, 19);
    xfer += oprot->writeI32(this->unitPrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.businessId) {
    xfer += oprot->writeFieldBegin("businessId", ::apache::thrift::protocol::T_I32, 20);
    xfer += oprot->writeI32(this->businessId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.businessName) {
    xfer += oprot->writeFieldBegin("businessName", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->businessName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.businessRole) {
    xfer += oprot->writeFieldBegin("businessRole", ::apache::thrift::protocol::T_I32, 22);
    xfer += oprot->writeI32((int32_t)this->businessRole);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.unitDiscount) {
    xfer += oprot->writeFieldBegin("unitDiscount", ::apache::thrift::protocol::T_I32, 23);
    xfer += oprot->writeI32(this->unitDiscount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nextChargeDate) {
    xfer += oprot->writeFieldBegin("nextChargeDate", ::apache::thrift::protocol::T_I64, 24);
    xfer += oprot->writeI64(this->nextChargeDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.availablePoints) {
    xfer += oprot->writeFieldBegin("availablePoints", ::apache::thrift::protocol::T_I32, 25);
    xfer += oprot->writeI32(this->availablePoints);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Accounting &a, Accounting &b) {
  using ::std::swap;
  swap(a.uploadLimitEnd, b.uploadLimitEnd);
  swap(a.uploadLimitNextMonth, b.uploadLimitNextMonth);
  swap(a.premiumServiceStatus, b.premiumServiceStatus);
  swap(a.premiumOrderNumber, b.premiumOrderNumber);
  swap(a.premiumCommerceService, b.premiumCommerceService);
  swap(a.premiumServiceStart, b.premiumServiceStart);
  swap(a.premiumServiceSKU, b.premiumServiceSKU);
  swap(a.lastSuccessfulCharge, b.lastSuccessfulCharge);
  swap(a.lastFailedCharge, b.lastFailedCharge);
  swap(a.lastFailedChargeReason, b.lastFailedChargeReason);
  swap(a.nextPaymentDue, b.nextPaymentDue);
  swap(a.premiumLockUntil, b.premiumLockUntil);
  swap(a.updated, b.updated);
  swap(a.premiumSubscriptionNumber, b.premiumSubscriptionNumber);
  swap(a.lastRequestedCharge, b.lastRequestedCharge);
  swap(a.currency, b.currency);
  swap(a.unitPrice, b.unitPrice);
  swap(a.businessId, b.businessId);
  swap(a.businessName, b.businessName);
  swap(a.businessRole, b.businessRole);
  swap(a.unitDiscount, b.unitDiscount);
  swap(a.nextChargeDate, b.nextChargeDate);
  swap(a.availablePoints, b.availablePoints);
  swap(a.__isset, b.__isset);
}

Accounting::Accounting(const Accounting& other21) {
  uploadLimitEnd = other21.uploadLimitEnd;
  uploadLimitNextMonth = other21.uploadLimitNextMonth;
  premiumServiceStatus = other21.premiumServiceStatus;
  premiumOrderNumber = other21.premiumOrderNumber;
  premiumCommerceService = other21.premiumCommerceService;
  premiumServiceStart = other21.premiumServiceStart;
  premiumServiceSKU = other21.premiumServiceSKU;
  lastSuccessfulCharge = other21.lastSuccessfulCharge;
  lastFailedCharge = other21.lastFailedCharge;
  lastFailedChargeReason = other21.lastFailedChargeReason;
  nextPaymentDue = other21.nextPaymentDue;
  premiumLockUntil = other21.premiumLockUntil;
  updated = other21.updated;
  premiumSubscriptionNumber = other21.premiumSubscriptionNumber;
  lastRequestedCharge = other21.lastRequestedCharge;
  currency = other21.currency;
  unitPrice = other21.unitPrice;
  businessId = other21.businessId;
  businessName = other21.businessName;
  businessRole = other21.businessRole;
  unitDiscount = other21.unitDiscount;
  nextChargeDate = other21.nextChargeDate;
  availablePoints = other21.availablePoints;
  __isset = other21.__isset;
}
Accounting& Accounting::operator=(const Accounting& other22) {
  uploadLimitEnd = other22.uploadLimitEnd;
  uploadLimitNextMonth = other22.uploadLimitNextMonth;
  premiumServiceStatus = other22.premiumServiceStatus;
  premiumOrderNumber = other22.premiumOrderNumber;
  premiumCommerceService = other22.premiumCommerceService;
  premiumServiceStart = other22.premiumServiceStart;
  premiumServiceSKU = other22.premiumServiceSKU;
  lastSuccessfulCharge = other22.lastSuccessfulCharge;
  lastFailedCharge = other22.lastFailedCharge;
  lastFailedChargeReason = other22.lastFailedChargeReason;
  nextPaymentDue = other22.nextPaymentDue;
  premiumLockUntil = other22.premiumLockUntil;
  updated = other22.updated;
  premiumSubscriptionNumber = other22.premiumSubscriptionNumber;
  lastRequestedCharge = other22.lastRequestedCharge;
  currency = other22.currency;
  unitPrice = other22.unitPrice;
  businessId = other22.businessId;
  businessName = other22.businessName;
  businessRole = other22.businessRole;
  unitDiscount = other22.unitDiscount;
  nextChargeDate = other22.nextChargeDate;
  availablePoints = other22.availablePoints;
  __isset = other22.__isset;
  return *this;
}
void Accounting::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Accounting(";
  out << "uploadLimitEnd="; (__isset.uploadLimitEnd ? (out << to_string(uploadLimitEnd)) : (out << "<null>"));
  out << ", " << "uploadLimitNextMonth="; (__isset.uploadLimitNextMonth ? (out << to_string(uploadLimitNextMonth)) : (out << "<null>"));
  out << ", " << "premiumServiceStatus="; (__isset.premiumServiceStatus ? (out << to_string(premiumServiceStatus)) : (out << "<null>"));
  out << ", " << "premiumOrderNumber="; (__isset.premiumOrderNumber ? (out << to_string(premiumOrderNumber)) : (out << "<null>"));
  out << ", " << "premiumCommerceService="; (__isset.premiumCommerceService ? (out << to_string(premiumCommerceService)) : (out << "<null>"));
  out << ", " << "premiumServiceStart="; (__isset.premiumServiceStart ? (out << to_string(premiumServiceStart)) : (out << "<null>"));
  out << ", " << "premiumServiceSKU="; (__isset.premiumServiceSKU ? (out << to_string(premiumServiceSKU)) : (out << "<null>"));
  out << ", " << "lastSuccessfulCharge="; (__isset.lastSuccessfulCharge ? (out << to_string(lastSuccessfulCharge)) : (out << "<null>"));
  out << ", " << "lastFailedCharge="; (__isset.lastFailedCharge ? (out << to_string(lastFailedCharge)) : (out << "<null>"));
  out << ", " << "lastFailedChargeReason="; (__isset.lastFailedChargeReason ? (out << to_string(lastFailedChargeReason)) : (out << "<null>"));
  out << ", " << "nextPaymentDue="; (__isset.nextPaymentDue ? (out << to_string(nextPaymentDue)) : (out << "<null>"));
  out << ", " << "premiumLockUntil="; (__isset.premiumLockUntil ? (out << to_string(premiumLockUntil)) : (out << "<null>"));
  out << ", " << "updated="; (__isset.updated ? (out << to_string(updated)) : (out << "<null>"));
  out << ", " << "premiumSubscriptionNumber="; (__isset.premiumSubscriptionNumber ? (out << to_string(premiumSubscriptionNumber)) : (out << "<null>"));
  out << ", " << "lastRequestedCharge="; (__isset.lastRequestedCharge ? (out << to_string(lastRequestedCharge)) : (out << "<null>"));
  out << ", " << "currency="; (__isset.currency ? (out << to_string(currency)) : (out << "<null>"));
  out << ", " << "unitPrice="; (__isset.unitPrice ? (out << to_string(unitPrice)) : (out << "<null>"));
  out << ", " << "businessId="; (__isset.businessId ? (out << to_string(businessId)) : (out << "<null>"));
  out << ", " << "businessName="; (__isset.businessName ? (out << to_string(businessName)) : (out << "<null>"));
  out << ", " << "businessRole="; (__isset.businessRole ? (out << to_string(businessRole)) : (out << "<null>"));
  out << ", " << "unitDiscount="; (__isset.unitDiscount ? (out << to_string(unitDiscount)) : (out << "<null>"));
  out << ", " << "nextChargeDate="; (__isset.nextChargeDate ? (out << to_string(nextChargeDate)) : (out << "<null>"));
  out << ", " << "availablePoints="; (__isset.availablePoints ? (out << to_string(availablePoints)) : (out << "<null>"));
  out << ")";
}


BusinessUserInfo::~BusinessUserInfo() throw() {
}


void BusinessUserInfo::__set_businessId(const int32_t val) {
  this->businessId = val;
__isset.businessId = true;
}

void BusinessUserInfo::__set_businessName(const std::string& val) {
  this->businessName = val;
__isset.businessName = true;
}

void BusinessUserInfo::__set_role(const BusinessUserRole::type val) {
  this->role = val;
__isset.role = true;
}

void BusinessUserInfo::__set_email(const std::string& val) {
  this->email = val;
__isset.email = true;
}

void BusinessUserInfo::__set_updated(const Timestamp val) {
  this->updated = val;
__isset.updated = true;
}

uint32_t BusinessUserInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->businessId);
          this->__isset.businessId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->businessName);
          this->__isset.businessName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast23;
          xfer += iprot->readI32(ecast23);
          this->role = (BusinessUserRole::type)ecast23;
          this->__isset.role = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->updated);
          this->__isset.updated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BusinessUserInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BusinessUserInfo");

  if (this->__isset.businessId) {
    xfer += oprot->writeFieldBegin("businessId", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->businessId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.businessName) {
    xfer += oprot->writeFieldBegin("businessName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->businessName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.role) {
    xfer += oprot->writeFieldBegin("role", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->role);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.email) {
    xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->email);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updated) {
    xfer += oprot->writeFieldBegin("updated", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->updated);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BusinessUserInfo &a, BusinessUserInfo &b) {
  using ::std::swap;
  swap(a.businessId, b.businessId);
  swap(a.businessName, b.businessName);
  swap(a.role, b.role);
  swap(a.email, b.email);
  swap(a.updated, b.updated);
  swap(a.__isset, b.__isset);
}

BusinessUserInfo::BusinessUserInfo(const BusinessUserInfo& other24) {
  businessId = other24.businessId;
  businessName = other24.businessName;
  role = other24.role;
  email = other24.email;
  updated = other24.updated;
  __isset = other24.__isset;
}
BusinessUserInfo& BusinessUserInfo::operator=(const BusinessUserInfo& other25) {
  businessId = other25.businessId;
  businessName = other25.businessName;
  role = other25.role;
  email = other25.email;
  updated = other25.updated;
  __isset = other25.__isset;
  return *this;
}
void BusinessUserInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BusinessUserInfo(";
  out << "businessId="; (__isset.businessId ? (out << to_string(businessId)) : (out << "<null>"));
  out << ", " << "businessName="; (__isset.businessName ? (out << to_string(businessName)) : (out << "<null>"));
  out << ", " << "role="; (__isset.role ? (out << to_string(role)) : (out << "<null>"));
  out << ", " << "email="; (__isset.email ? (out << to_string(email)) : (out << "<null>"));
  out << ", " << "updated="; (__isset.updated ? (out << to_string(updated)) : (out << "<null>"));
  out << ")";
}


AccountLimits::~AccountLimits() throw() {
}


void AccountLimits::__set_userMailLimitDaily(const int32_t val) {
  this->userMailLimitDaily = val;
__isset.userMailLimitDaily = true;
}

void AccountLimits::__set_noteSizeMax(const int64_t val) {
  this->noteSizeMax = val;
__isset.noteSizeMax = true;
}

void AccountLimits::__set_resourceSizeMax(const int64_t val) {
  this->resourceSizeMax = val;
__isset.resourceSizeMax = true;
}

void AccountLimits::__set_userLinkedNotebookMax(const int32_t val) {
  this->userLinkedNotebookMax = val;
__isset.userLinkedNotebookMax = true;
}

void AccountLimits::__set_uploadLimit(const int64_t val) {
  this->uploadLimit = val;
__isset.uploadLimit = true;
}

void AccountLimits::__set_userNoteCountMax(const int32_t val) {
  this->userNoteCountMax = val;
__isset.userNoteCountMax = true;
}

void AccountLimits::__set_userNotebookCountMax(const int32_t val) {
  this->userNotebookCountMax = val;
__isset.userNotebookCountMax = true;
}

void AccountLimits::__set_userTagCountMax(const int32_t val) {
  this->userTagCountMax = val;
__isset.userTagCountMax = true;
}

void AccountLimits::__set_noteTagCountMax(const int32_t val) {
  this->noteTagCountMax = val;
__isset.noteTagCountMax = true;
}

void AccountLimits::__set_userSavedSearchesMax(const int32_t val) {
  this->userSavedSearchesMax = val;
__isset.userSavedSearchesMax = true;
}

void AccountLimits::__set_noteResourceCountMax(const int32_t val) {
  this->noteResourceCountMax = val;
__isset.noteResourceCountMax = true;
}

uint32_t AccountLimits::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userMailLimitDaily);
          this->__isset.userMailLimitDaily = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->noteSizeMax);
          this->__isset.noteSizeMax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->resourceSizeMax);
          this->__isset.resourceSizeMax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userLinkedNotebookMax);
          this->__isset.userLinkedNotebookMax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uploadLimit);
          this->__isset.uploadLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userNoteCountMax);
          this->__isset.userNoteCountMax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userNotebookCountMax);
          this->__isset.userNotebookCountMax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userTagCountMax);
          this->__isset.userTagCountMax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->noteTagCountMax);
          this->__isset.noteTagCountMax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userSavedSearchesMax);
          this->__isset.userSavedSearchesMax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->noteResourceCountMax);
          this->__isset.noteResourceCountMax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AccountLimits::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AccountLimits");

  if (this->__isset.userMailLimitDaily) {
    xfer += oprot->writeFieldBegin("userMailLimitDaily", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->userMailLimitDaily);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noteSizeMax) {
    xfer += oprot->writeFieldBegin("noteSizeMax", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->noteSizeMax);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resourceSizeMax) {
    xfer += oprot->writeFieldBegin("resourceSizeMax", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->resourceSizeMax);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userLinkedNotebookMax) {
    xfer += oprot->writeFieldBegin("userLinkedNotebookMax", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->userLinkedNotebookMax);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uploadLimit) {
    xfer += oprot->writeFieldBegin("uploadLimit", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->uploadLimit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userNoteCountMax) {
    xfer += oprot->writeFieldBegin("userNoteCountMax", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->userNoteCountMax);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userNotebookCountMax) {
    xfer += oprot->writeFieldBegin("userNotebookCountMax", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->userNotebookCountMax);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userTagCountMax) {
    xfer += oprot->writeFieldBegin("userTagCountMax", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->userTagCountMax);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noteTagCountMax) {
    xfer += oprot->writeFieldBegin("noteTagCountMax", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->noteTagCountMax);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userSavedSearchesMax) {
    xfer += oprot->writeFieldBegin("userSavedSearchesMax", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->userSavedSearchesMax);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noteResourceCountMax) {
    xfer += oprot->writeFieldBegin("noteResourceCountMax", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->noteResourceCountMax);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AccountLimits &a, AccountLimits &b) {
  using ::std::swap;
  swap(a.userMailLimitDaily, b.userMailLimitDaily);
  swap(a.noteSizeMax, b.noteSizeMax);
  swap(a.resourceSizeMax, b.resourceSizeMax);
  swap(a.userLinkedNotebookMax, b.userLinkedNotebookMax);
  swap(a.uploadLimit, b.uploadLimit);
  swap(a.userNoteCountMax, b.userNoteCountMax);
  swap(a.userNotebookCountMax, b.userNotebookCountMax);
  swap(a.userTagCountMax, b.userTagCountMax);
  swap(a.noteTagCountMax, b.noteTagCountMax);
  swap(a.userSavedSearchesMax, b.userSavedSearchesMax);
  swap(a.noteResourceCountMax, b.noteResourceCountMax);
  swap(a.__isset, b.__isset);
}

AccountLimits::AccountLimits(const AccountLimits& other26) {
  userMailLimitDaily = other26.userMailLimitDaily;
  noteSizeMax = other26.noteSizeMax;
  resourceSizeMax = other26.resourceSizeMax;
  userLinkedNotebookMax = other26.userLinkedNotebookMax;
  uploadLimit = other26.uploadLimit;
  userNoteCountMax = other26.userNoteCountMax;
  userNotebookCountMax = other26.userNotebookCountMax;
  userTagCountMax = other26.userTagCountMax;
  noteTagCountMax = other26.noteTagCountMax;
  userSavedSearchesMax = other26.userSavedSearchesMax;
  noteResourceCountMax = other26.noteResourceCountMax;
  __isset = other26.__isset;
}
AccountLimits& AccountLimits::operator=(const AccountLimits& other27) {
  userMailLimitDaily = other27.userMailLimitDaily;
  noteSizeMax = other27.noteSizeMax;
  resourceSizeMax = other27.resourceSizeMax;
  userLinkedNotebookMax = other27.userLinkedNotebookMax;
  uploadLimit = other27.uploadLimit;
  userNoteCountMax = other27.userNoteCountMax;
  userNotebookCountMax = other27.userNotebookCountMax;
  userTagCountMax = other27.userTagCountMax;
  noteTagCountMax = other27.noteTagCountMax;
  userSavedSearchesMax = other27.userSavedSearchesMax;
  noteResourceCountMax = other27.noteResourceCountMax;
  __isset = other27.__isset;
  return *this;
}
void AccountLimits::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AccountLimits(";
  out << "userMailLimitDaily="; (__isset.userMailLimitDaily ? (out << to_string(userMailLimitDaily)) : (out << "<null>"));
  out << ", " << "noteSizeMax="; (__isset.noteSizeMax ? (out << to_string(noteSizeMax)) : (out << "<null>"));
  out << ", " << "resourceSizeMax="; (__isset.resourceSizeMax ? (out << to_string(resourceSizeMax)) : (out << "<null>"));
  out << ", " << "userLinkedNotebookMax="; (__isset.userLinkedNotebookMax ? (out << to_string(userLinkedNotebookMax)) : (out << "<null>"));
  out << ", " << "uploadLimit="; (__isset.uploadLimit ? (out << to_string(uploadLimit)) : (out << "<null>"));
  out << ", " << "userNoteCountMax="; (__isset.userNoteCountMax ? (out << to_string(userNoteCountMax)) : (out << "<null>"));
  out << ", " << "userNotebookCountMax="; (__isset.userNotebookCountMax ? (out << to_string(userNotebookCountMax)) : (out << "<null>"));
  out << ", " << "userTagCountMax="; (__isset.userTagCountMax ? (out << to_string(userTagCountMax)) : (out << "<null>"));
  out << ", " << "noteTagCountMax="; (__isset.noteTagCountMax ? (out << to_string(noteTagCountMax)) : (out << "<null>"));
  out << ", " << "userSavedSearchesMax="; (__isset.userSavedSearchesMax ? (out << to_string(userSavedSearchesMax)) : (out << "<null>"));
  out << ", " << "noteResourceCountMax="; (__isset.noteResourceCountMax ? (out << to_string(noteResourceCountMax)) : (out << "<null>"));
  out << ")";
}


User::~User() throw() {
}


void User::__set_id(const UserID val) {
  this->id = val;
__isset.id = true;
}

void User::__set_username(const std::string& val) {
  this->username = val;
__isset.username = true;
}

void User::__set_email(const std::string& val) {
  this->email = val;
__isset.email = true;
}

void User::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void User::__set_timezone(const std::string& val) {
  this->timezone = val;
__isset.timezone = true;
}

void User::__set_privilege(const PrivilegeLevel::type val) {
  this->privilege = val;
__isset.privilege = true;
}

void User::__set_serviceLevel(const ServiceLevel::type val) {
  this->serviceLevel = val;
__isset.serviceLevel = true;
}

void User::__set_created(const Timestamp val) {
  this->created = val;
__isset.created = true;
}

void User::__set_updated(const Timestamp val) {
  this->updated = val;
__isset.updated = true;
}

void User::__set_deleted(const Timestamp val) {
  this->deleted = val;
__isset.deleted = true;
}

void User::__set_active(const bool val) {
  this->active = val;
__isset.active = true;
}

void User::__set_shardId(const std::string& val) {
  this->shardId = val;
__isset.shardId = true;
}

void User::__set_attributes(const UserAttributes& val) {
  this->attributes = val;
__isset.attributes = true;
}

void User::__set_accounting(const Accounting& val) {
  this->accounting = val;
__isset.accounting = true;
}

void User::__set_businessUserInfo(const BusinessUserInfo& val) {
  this->businessUserInfo = val;
__isset.businessUserInfo = true;
}

void User::__set_photoUrl(const std::string& val) {
  this->photoUrl = val;
__isset.photoUrl = true;
}

void User::__set_photoLastUpdated(const Timestamp val) {
  this->photoLastUpdated = val;
__isset.photoLastUpdated = true;
}

void User::__set_accountLimits(const AccountLimits& val) {
  this->accountLimits = val;
__isset.accountLimits = true;
}

uint32_t User::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timezone);
          this->__isset.timezone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast28;
          xfer += iprot->readI32(ecast28);
          this->privilege = (PrivilegeLevel::type)ecast28;
          this->__isset.privilege = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast29;
          xfer += iprot->readI32(ecast29);
          this->serviceLevel = (ServiceLevel::type)ecast29;
          this->__isset.serviceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->created);
          this->__isset.created = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->updated);
          this->__isset.updated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->deleted);
          this->__isset.deleted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->active);
          this->__isset.active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->shardId);
          this->__isset.shardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->attributes.read(iprot);
          this->__isset.attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->accounting.read(iprot);
          this->__isset.accounting = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->businessUserInfo.read(iprot);
          this->__isset.businessUserInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->photoUrl);
          this->__isset.photoUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->photoLastUpdated);
          this->__isset.photoLastUpdated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->accountLimits.read(iprot);
          this->__isset.accountLimits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User");

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.username) {
    xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->username);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.email) {
    xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->email);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.timezone) {
    xfer += oprot->writeFieldBegin("timezone", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->timezone);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.privilege) {
    xfer += oprot->writeFieldBegin("privilege", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32((int32_t)this->privilege);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.created) {
    xfer += oprot->writeFieldBegin("created", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->created);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updated) {
    xfer += oprot->writeFieldBegin("updated", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->updated);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deleted) {
    xfer += oprot->writeFieldBegin("deleted", ::apache::thrift::protocol::T_I64, 11);
    xfer += oprot->writeI64(this->deleted);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.active) {
    xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_BOOL, 13);
    xfer += oprot->writeBool(this->active);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shardId) {
    xfer += oprot->writeFieldBegin("shardId", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->shardId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributes) {
    xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_STRUCT, 15);
    xfer += this->attributes.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.accounting) {
    xfer += oprot->writeFieldBegin("accounting", ::apache::thrift::protocol::T_STRUCT, 16);
    xfer += this->accounting.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.businessUserInfo) {
    xfer += oprot->writeFieldBegin("businessUserInfo", ::apache::thrift::protocol::T_STRUCT, 18);
    xfer += this->businessUserInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.photoUrl) {
    xfer += oprot->writeFieldBegin("photoUrl", ::apache::thrift::protocol::T_STRING, 19);
    xfer += oprot->writeString(this->photoUrl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.photoLastUpdated) {
    xfer += oprot->writeFieldBegin("photoLastUpdated", ::apache::thrift::protocol::T_I64, 20);
    xfer += oprot->writeI64(this->photoLastUpdated);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serviceLevel) {
    xfer += oprot->writeFieldBegin("serviceLevel", ::apache::thrift::protocol::T_I32, 21);
    xfer += oprot->writeI32((int32_t)this->serviceLevel);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.accountLimits) {
    xfer += oprot->writeFieldBegin("accountLimits", ::apache::thrift::protocol::T_STRUCT, 22);
    xfer += this->accountLimits.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User &a, User &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.username, b.username);
  swap(a.email, b.email);
  swap(a.name, b.name);
  swap(a.timezone, b.timezone);
  swap(a.privilege, b.privilege);
  swap(a.serviceLevel, b.serviceLevel);
  swap(a.created, b.created);
  swap(a.updated, b.updated);
  swap(a.deleted, b.deleted);
  swap(a.active, b.active);
  swap(a.shardId, b.shardId);
  swap(a.attributes, b.attributes);
  swap(a.accounting, b.accounting);
  swap(a.businessUserInfo, b.businessUserInfo);
  swap(a.photoUrl, b.photoUrl);
  swap(a.photoLastUpdated, b.photoLastUpdated);
  swap(a.accountLimits, b.accountLimits);
  swap(a.__isset, b.__isset);
}

User::User(const User& other30) {
  id = other30.id;
  username = other30.username;
  email = other30.email;
  name = other30.name;
  timezone = other30.timezone;
  privilege = other30.privilege;
  serviceLevel = other30.serviceLevel;
  created = other30.created;
  updated = other30.updated;
  deleted = other30.deleted;
  active = other30.active;
  shardId = other30.shardId;
  attributes = other30.attributes;
  accounting = other30.accounting;
  businessUserInfo = other30.businessUserInfo;
  photoUrl = other30.photoUrl;
  photoLastUpdated = other30.photoLastUpdated;
  accountLimits = other30.accountLimits;
  __isset = other30.__isset;
}
User& User::operator=(const User& other31) {
  id = other31.id;
  username = other31.username;
  email = other31.email;
  name = other31.name;
  timezone = other31.timezone;
  privilege = other31.privilege;
  serviceLevel = other31.serviceLevel;
  created = other31.created;
  updated = other31.updated;
  deleted = other31.deleted;
  active = other31.active;
  shardId = other31.shardId;
  attributes = other31.attributes;
  accounting = other31.accounting;
  businessUserInfo = other31.businessUserInfo;
  photoUrl = other31.photoUrl;
  photoLastUpdated = other31.photoLastUpdated;
  accountLimits = other31.accountLimits;
  __isset = other31.__isset;
  return *this;
}
void User::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User(";
  out << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "username="; (__isset.username ? (out << to_string(username)) : (out << "<null>"));
  out << ", " << "email="; (__isset.email ? (out << to_string(email)) : (out << "<null>"));
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "timezone="; (__isset.timezone ? (out << to_string(timezone)) : (out << "<null>"));
  out << ", " << "privilege="; (__isset.privilege ? (out << to_string(privilege)) : (out << "<null>"));
  out << ", " << "serviceLevel="; (__isset.serviceLevel ? (out << to_string(serviceLevel)) : (out << "<null>"));
  out << ", " << "created="; (__isset.created ? (out << to_string(created)) : (out << "<null>"));
  out << ", " << "updated="; (__isset.updated ? (out << to_string(updated)) : (out << "<null>"));
  out << ", " << "deleted="; (__isset.deleted ? (out << to_string(deleted)) : (out << "<null>"));
  out << ", " << "active="; (__isset.active ? (out << to_string(active)) : (out << "<null>"));
  out << ", " << "shardId="; (__isset.shardId ? (out << to_string(shardId)) : (out << "<null>"));
  out << ", " << "attributes="; (__isset.attributes ? (out << to_string(attributes)) : (out << "<null>"));
  out << ", " << "accounting="; (__isset.accounting ? (out << to_string(accounting)) : (out << "<null>"));
  out << ", " << "businessUserInfo="; (__isset.businessUserInfo ? (out << to_string(businessUserInfo)) : (out << "<null>"));
  out << ", " << "photoUrl="; (__isset.photoUrl ? (out << to_string(photoUrl)) : (out << "<null>"));
  out << ", " << "photoLastUpdated="; (__isset.photoLastUpdated ? (out << to_string(photoLastUpdated)) : (out << "<null>"));
  out << ", " << "accountLimits="; (__isset.accountLimits ? (out << to_string(accountLimits)) : (out << "<null>"));
  out << ")";
}


Contact::~Contact() throw() {
}


void Contact::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void Contact::__set_id(const std::string& val) {
  this->id = val;
__isset.id = true;
}

void Contact::__set_type(const ContactType::type val) {
  this->type = val;
__isset.type = true;
}

void Contact::__set_photoUrl(const std::string& val) {
  this->photoUrl = val;
__isset.photoUrl = true;
}

void Contact::__set_photoLastUpdated(const Timestamp val) {
  this->photoLastUpdated = val;
__isset.photoLastUpdated = true;
}

void Contact::__set_messagingPermit(const std::string& val) {
  this->messagingPermit = val;
__isset.messagingPermit = true;
}

void Contact::__set_messagingPermitExpires(const Timestamp val) {
  this->messagingPermitExpires = val;
__isset.messagingPermitExpires = true;
}

uint32_t Contact::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast32;
          xfer += iprot->readI32(ecast32);
          this->type = (ContactType::type)ecast32;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->photoUrl);
          this->__isset.photoUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->photoLastUpdated);
          this->__isset.photoLastUpdated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->messagingPermit);
          this->__isset.messagingPermit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->messagingPermitExpires);
          this->__isset.messagingPermitExpires = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Contact::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Contact");

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.photoUrl) {
    xfer += oprot->writeFieldBegin("photoUrl", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->photoUrl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.photoLastUpdated) {
    xfer += oprot->writeFieldBegin("photoLastUpdated", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->photoLastUpdated);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.messagingPermit) {
    xfer += oprot->writeFieldBegin("messagingPermit", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeBinary(this->messagingPermit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.messagingPermitExpires) {
    xfer += oprot->writeFieldBegin("messagingPermitExpires", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->messagingPermitExpires);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Contact &a, Contact &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.id, b.id);
  swap(a.type, b.type);
  swap(a.photoUrl, b.photoUrl);
  swap(a.photoLastUpdated, b.photoLastUpdated);
  swap(a.messagingPermit, b.messagingPermit);
  swap(a.messagingPermitExpires, b.messagingPermitExpires);
  swap(a.__isset, b.__isset);
}

Contact::Contact(const Contact& other33) {
  name = other33.name;
  id = other33.id;
  type = other33.type;
  photoUrl = other33.photoUrl;
  photoLastUpdated = other33.photoLastUpdated;
  messagingPermit = other33.messagingPermit;
  messagingPermitExpires = other33.messagingPermitExpires;
  __isset = other33.__isset;
}
Contact& Contact::operator=(const Contact& other34) {
  name = other34.name;
  id = other34.id;
  type = other34.type;
  photoUrl = other34.photoUrl;
  photoLastUpdated = other34.photoLastUpdated;
  messagingPermit = other34.messagingPermit;
  messagingPermitExpires = other34.messagingPermitExpires;
  __isset = other34.__isset;
  return *this;
}
void Contact::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Contact(";
  out << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "type="; (__isset.type ? (out << to_string(type)) : (out << "<null>"));
  out << ", " << "photoUrl="; (__isset.photoUrl ? (out << to_string(photoUrl)) : (out << "<null>"));
  out << ", " << "photoLastUpdated="; (__isset.photoLastUpdated ? (out << to_string(photoLastUpdated)) : (out << "<null>"));
  out << ", " << "messagingPermit="; (__isset.messagingPermit ? (out << to_string(messagingPermit)) : (out << "<null>"));
  out << ", " << "messagingPermitExpires="; (__isset.messagingPermitExpires ? (out << to_string(messagingPermitExpires)) : (out << "<null>"));
  out << ")";
}


Identity::~Identity() throw() {
}


void Identity::__set_id(const IdentityID val) {
  this->id = val;
}

void Identity::__set_contact(const Contact& val) {
  this->contact = val;
__isset.contact = true;
}

void Identity::__set_userId(const UserID val) {
  this->userId = val;
__isset.userId = true;
}

void Identity::__set_deactivated(const bool val) {
  this->deactivated = val;
__isset.deactivated = true;
}

void Identity::__set_sameBusiness(const bool val) {
  this->sameBusiness = val;
__isset.sameBusiness = true;
}

void Identity::__set_blocked(const bool val) {
  this->blocked = val;
__isset.blocked = true;
}

void Identity::__set_userConnected(const bool val) {
  this->userConnected = val;
__isset.userConnected = true;
}

void Identity::__set_eventId(const MessageEventID val) {
  this->eventId = val;
__isset.eventId = true;
}

uint32_t Identity::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->contact.read(iprot);
          this->__isset.contact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->deactivated);
          this->__isset.deactivated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->sameBusiness);
          this->__isset.sameBusiness = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->blocked);
          this->__isset.blocked = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->userConnected);
          this->__isset.userConnected = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventId);
          this->__isset.eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Identity::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Identity");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.contact) {
    xfer += oprot->writeFieldBegin("contact", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->contact.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userId) {
    xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->userId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deactivated) {
    xfer += oprot->writeFieldBegin("deactivated", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->deactivated);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sameBusiness) {
    xfer += oprot->writeFieldBegin("sameBusiness", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->sameBusiness);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.blocked) {
    xfer += oprot->writeFieldBegin("blocked", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->blocked);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userConnected) {
    xfer += oprot->writeFieldBegin("userConnected", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->userConnected);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventId) {
    xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->eventId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Identity &a, Identity &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.contact, b.contact);
  swap(a.userId, b.userId);
  swap(a.deactivated, b.deactivated);
  swap(a.sameBusiness, b.sameBusiness);
  swap(a.blocked, b.blocked);
  swap(a.userConnected, b.userConnected);
  swap(a.eventId, b.eventId);
  swap(a.__isset, b.__isset);
}

Identity::Identity(const Identity& other35) {
  id = other35.id;
  contact = other35.contact;
  userId = other35.userId;
  deactivated = other35.deactivated;
  sameBusiness = other35.sameBusiness;
  blocked = other35.blocked;
  userConnected = other35.userConnected;
  eventId = other35.eventId;
  __isset = other35.__isset;
}
Identity& Identity::operator=(const Identity& other36) {
  id = other36.id;
  contact = other36.contact;
  userId = other36.userId;
  deactivated = other36.deactivated;
  sameBusiness = other36.sameBusiness;
  blocked = other36.blocked;
  userConnected = other36.userConnected;
  eventId = other36.eventId;
  __isset = other36.__isset;
  return *this;
}
void Identity::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Identity(";
  out << "id=" << to_string(id);
  out << ", " << "contact="; (__isset.contact ? (out << to_string(contact)) : (out << "<null>"));
  out << ", " << "userId="; (__isset.userId ? (out << to_string(userId)) : (out << "<null>"));
  out << ", " << "deactivated="; (__isset.deactivated ? (out << to_string(deactivated)) : (out << "<null>"));
  out << ", " << "sameBusiness="; (__isset.sameBusiness ? (out << to_string(sameBusiness)) : (out << "<null>"));
  out << ", " << "blocked="; (__isset.blocked ? (out << to_string(blocked)) : (out << "<null>"));
  out << ", " << "userConnected="; (__isset.userConnected ? (out << to_string(userConnected)) : (out << "<null>"));
  out << ", " << "eventId="; (__isset.eventId ? (out << to_string(eventId)) : (out << "<null>"));
  out << ")";
}


Tag::~Tag() throw() {
}


void Tag::__set_guid(const Guid& val) {
  this->guid = val;
__isset.guid = true;
}

void Tag::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void Tag::__set_parentGuid(const Guid& val) {
  this->parentGuid = val;
__isset.parentGuid = true;
}

void Tag::__set_updateSequenceNum(const int32_t val) {
  this->updateSequenceNum = val;
__isset.updateSequenceNum = true;
}

uint32_t Tag::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guid);
          this->__isset.guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->parentGuid);
          this->__isset.parentGuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->updateSequenceNum);
          this->__isset.updateSequenceNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Tag::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Tag");

  if (this->__isset.guid) {
    xfer += oprot->writeFieldBegin("guid", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parentGuid) {
    xfer += oprot->writeFieldBegin("parentGuid", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->parentGuid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updateSequenceNum) {
    xfer += oprot->writeFieldBegin("updateSequenceNum", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->updateSequenceNum);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Tag &a, Tag &b) {
  using ::std::swap;
  swap(a.guid, b.guid);
  swap(a.name, b.name);
  swap(a.parentGuid, b.parentGuid);
  swap(a.updateSequenceNum, b.updateSequenceNum);
  swap(a.__isset, b.__isset);
}

Tag::Tag(const Tag& other37) {
  guid = other37.guid;
  name = other37.name;
  parentGuid = other37.parentGuid;
  updateSequenceNum = other37.updateSequenceNum;
  __isset = other37.__isset;
}
Tag& Tag::operator=(const Tag& other38) {
  guid = other38.guid;
  name = other38.name;
  parentGuid = other38.parentGuid;
  updateSequenceNum = other38.updateSequenceNum;
  __isset = other38.__isset;
  return *this;
}
void Tag::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Tag(";
  out << "guid="; (__isset.guid ? (out << to_string(guid)) : (out << "<null>"));
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "parentGuid="; (__isset.parentGuid ? (out << to_string(parentGuid)) : (out << "<null>"));
  out << ", " << "updateSequenceNum="; (__isset.updateSequenceNum ? (out << to_string(updateSequenceNum)) : (out << "<null>"));
  out << ")";
}


LazyMap::~LazyMap() throw() {
}


void LazyMap::__set_keysOnly(const std::set<std::string> & val) {
  this->keysOnly = val;
__isset.keysOnly = true;
}

void LazyMap::__set_fullMap(const std::map<std::string, std::string> & val) {
  this->fullMap = val;
__isset.fullMap = true;
}

uint32_t LazyMap::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->keysOnly.clear();
            uint32_t _size39;
            ::apache::thrift::protocol::TType _etype42;
            xfer += iprot->readSetBegin(_etype42, _size39);
            uint32_t _i43;
            for (_i43 = 0; _i43 < _size39; ++_i43)
            {
              std::string _elem44;
              xfer += iprot->readString(_elem44);
              this->keysOnly.insert(_elem44);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.keysOnly = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->fullMap.clear();
            uint32_t _size45;
            ::apache::thrift::protocol::TType _ktype46;
            ::apache::thrift::protocol::TType _vtype47;
            xfer += iprot->readMapBegin(_ktype46, _vtype47, _size45);
            uint32_t _i49;
            for (_i49 = 0; _i49 < _size45; ++_i49)
            {
              std::string _key50;
              xfer += iprot->readString(_key50);
              std::string& _val51 = this->fullMap[_key50];
              xfer += iprot->readString(_val51);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.fullMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LazyMap::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LazyMap");

  if (this->__isset.keysOnly) {
    xfer += oprot->writeFieldBegin("keysOnly", ::apache::thrift::protocol::T_SET, 1);
    {
      xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->keysOnly.size()));
      std::set<std::string> ::const_iterator _iter52;
      for (_iter52 = this->keysOnly.begin(); _iter52 != this->keysOnly.end(); ++_iter52)
      {
        xfer += oprot->writeString((*_iter52));
      }
      xfer += oprot->writeSetEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fullMap) {
    xfer += oprot->writeFieldBegin("fullMap", ::apache::thrift::protocol::T_MAP, 2);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->fullMap.size()));
      std::map<std::string, std::string> ::const_iterator _iter53;
      for (_iter53 = this->fullMap.begin(); _iter53 != this->fullMap.end(); ++_iter53)
      {
        xfer += oprot->writeString(_iter53->first);
        xfer += oprot->writeString(_iter53->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LazyMap &a, LazyMap &b) {
  using ::std::swap;
  swap(a.keysOnly, b.keysOnly);
  swap(a.fullMap, b.fullMap);
  swap(a.__isset, b.__isset);
}

LazyMap::LazyMap(const LazyMap& other54) {
  keysOnly = other54.keysOnly;
  fullMap = other54.fullMap;
  __isset = other54.__isset;
}
LazyMap& LazyMap::operator=(const LazyMap& other55) {
  keysOnly = other55.keysOnly;
  fullMap = other55.fullMap;
  __isset = other55.__isset;
  return *this;
}
void LazyMap::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LazyMap(";
  out << "keysOnly="; (__isset.keysOnly ? (out << to_string(keysOnly)) : (out << "<null>"));
  out << ", " << "fullMap="; (__isset.fullMap ? (out << to_string(fullMap)) : (out << "<null>"));
  out << ")";
}


ResourceAttributes::~ResourceAttributes() throw() {
}


void ResourceAttributes::__set_sourceURL(const std::string& val) {
  this->sourceURL = val;
__isset.sourceURL = true;
}

void ResourceAttributes::__set_timestamp(const Timestamp val) {
  this->timestamp = val;
__isset.timestamp = true;
}

void ResourceAttributes::__set_latitude(const double val) {
  this->latitude = val;
__isset.latitude = true;
}

void ResourceAttributes::__set_longitude(const double val) {
  this->longitude = val;
__isset.longitude = true;
}

void ResourceAttributes::__set_altitude(const double val) {
  this->altitude = val;
__isset.altitude = true;
}

void ResourceAttributes::__set_cameraMake(const std::string& val) {
  this->cameraMake = val;
__isset.cameraMake = true;
}

void ResourceAttributes::__set_cameraModel(const std::string& val) {
  this->cameraModel = val;
__isset.cameraModel = true;
}

void ResourceAttributes::__set_clientWillIndex(const bool val) {
  this->clientWillIndex = val;
__isset.clientWillIndex = true;
}

void ResourceAttributes::__set_recoType(const std::string& val) {
  this->recoType = val;
__isset.recoType = true;
}

void ResourceAttributes::__set_fileName(const std::string& val) {
  this->fileName = val;
__isset.fileName = true;
}

void ResourceAttributes::__set_attachment(const bool val) {
  this->attachment = val;
__isset.attachment = true;
}

void ResourceAttributes::__set_applicationData(const LazyMap& val) {
  this->applicationData = val;
__isset.applicationData = true;
}

uint32_t ResourceAttributes::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sourceURL);
          this->__isset.sourceURL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->altitude);
          this->__isset.altitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cameraMake);
          this->__isset.cameraMake = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cameraModel);
          this->__isset.cameraModel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->clientWillIndex);
          this->__isset.clientWillIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->recoType);
          this->__isset.recoType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fileName);
          this->__isset.fileName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->attachment);
          this->__isset.attachment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationData.read(iprot);
          this->__isset.applicationData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResourceAttributes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ResourceAttributes");

  if (this->__isset.sourceURL) {
    xfer += oprot->writeFieldBegin("sourceURL", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->sourceURL);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.timestamp) {
    xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->timestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.latitude) {
    xfer += oprot->writeFieldBegin("latitude", ::apache::thrift::protocol::T_DOUBLE, 3);
    xfer += oprot->writeDouble(this->latitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.longitude) {
    xfer += oprot->writeFieldBegin("longitude", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->longitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.altitude) {
    xfer += oprot->writeFieldBegin("altitude", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->altitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cameraMake) {
    xfer += oprot->writeFieldBegin("cameraMake", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->cameraMake);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cameraModel) {
    xfer += oprot->writeFieldBegin("cameraModel", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->cameraModel);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.clientWillIndex) {
    xfer += oprot->writeFieldBegin("clientWillIndex", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->clientWillIndex);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recoType) {
    xfer += oprot->writeFieldBegin("recoType", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->recoType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fileName) {
    xfer += oprot->writeFieldBegin("fileName", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->fileName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attachment) {
    xfer += oprot->writeFieldBegin("attachment", ::apache::thrift::protocol::T_BOOL, 11);
    xfer += oprot->writeBool(this->attachment);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.applicationData) {
    xfer += oprot->writeFieldBegin("applicationData", ::apache::thrift::protocol::T_STRUCT, 12);
    xfer += this->applicationData.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResourceAttributes &a, ResourceAttributes &b) {
  using ::std::swap;
  swap(a.sourceURL, b.sourceURL);
  swap(a.timestamp, b.timestamp);
  swap(a.latitude, b.latitude);
  swap(a.longitude, b.longitude);
  swap(a.altitude, b.altitude);
  swap(a.cameraMake, b.cameraMake);
  swap(a.cameraModel, b.cameraModel);
  swap(a.clientWillIndex, b.clientWillIndex);
  swap(a.recoType, b.recoType);
  swap(a.fileName, b.fileName);
  swap(a.attachment, b.attachment);
  swap(a.applicationData, b.applicationData);
  swap(a.__isset, b.__isset);
}

ResourceAttributes::ResourceAttributes(const ResourceAttributes& other56) {
  sourceURL = other56.sourceURL;
  timestamp = other56.timestamp;
  latitude = other56.latitude;
  longitude = other56.longitude;
  altitude = other56.altitude;
  cameraMake = other56.cameraMake;
  cameraModel = other56.cameraModel;
  clientWillIndex = other56.clientWillIndex;
  recoType = other56.recoType;
  fileName = other56.fileName;
  attachment = other56.attachment;
  applicationData = other56.applicationData;
  __isset = other56.__isset;
}
ResourceAttributes& ResourceAttributes::operator=(const ResourceAttributes& other57) {
  sourceURL = other57.sourceURL;
  timestamp = other57.timestamp;
  latitude = other57.latitude;
  longitude = other57.longitude;
  altitude = other57.altitude;
  cameraMake = other57.cameraMake;
  cameraModel = other57.cameraModel;
  clientWillIndex = other57.clientWillIndex;
  recoType = other57.recoType;
  fileName = other57.fileName;
  attachment = other57.attachment;
  applicationData = other57.applicationData;
  __isset = other57.__isset;
  return *this;
}
void ResourceAttributes::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ResourceAttributes(";
  out << "sourceURL="; (__isset.sourceURL ? (out << to_string(sourceURL)) : (out << "<null>"));
  out << ", " << "timestamp="; (__isset.timestamp ? (out << to_string(timestamp)) : (out << "<null>"));
  out << ", " << "latitude="; (__isset.latitude ? (out << to_string(latitude)) : (out << "<null>"));
  out << ", " << "longitude="; (__isset.longitude ? (out << to_string(longitude)) : (out << "<null>"));
  out << ", " << "altitude="; (__isset.altitude ? (out << to_string(altitude)) : (out << "<null>"));
  out << ", " << "cameraMake="; (__isset.cameraMake ? (out << to_string(cameraMake)) : (out << "<null>"));
  out << ", " << "cameraModel="; (__isset.cameraModel ? (out << to_string(cameraModel)) : (out << "<null>"));
  out << ", " << "clientWillIndex="; (__isset.clientWillIndex ? (out << to_string(clientWillIndex)) : (out << "<null>"));
  out << ", " << "recoType="; (__isset.recoType ? (out << to_string(recoType)) : (out << "<null>"));
  out << ", " << "fileName="; (__isset.fileName ? (out << to_string(fileName)) : (out << "<null>"));
  out << ", " << "attachment="; (__isset.attachment ? (out << to_string(attachment)) : (out << "<null>"));
  out << ", " << "applicationData="; (__isset.applicationData ? (out << to_string(applicationData)) : (out << "<null>"));
  out << ")";
}


Resource::~Resource() throw() {
}


void Resource::__set_guid(const Guid& val) {
  this->guid = val;
__isset.guid = true;
}

void Resource::__set_noteGuid(const Guid& val) {
  this->noteGuid = val;
__isset.noteGuid = true;
}

void Resource::__set_data(const Data& val) {
  this->data = val;
__isset.data = true;
}

void Resource::__set_mime(const std::string& val) {
  this->mime = val;
__isset.mime = true;
}

void Resource::__set_width(const int16_t val) {
  this->width = val;
__isset.width = true;
}

void Resource::__set_height(const int16_t val) {
  this->height = val;
__isset.height = true;
}

void Resource::__set_duration(const int16_t val) {
  this->duration = val;
__isset.duration = true;
}

void Resource::__set_active(const bool val) {
  this->active = val;
__isset.active = true;
}

void Resource::__set_recognition(const Data& val) {
  this->recognition = val;
__isset.recognition = true;
}

void Resource::__set_attributes(const ResourceAttributes& val) {
  this->attributes = val;
__isset.attributes = true;
}

void Resource::__set_updateSequenceNum(const int32_t val) {
  this->updateSequenceNum = val;
__isset.updateSequenceNum = true;
}

void Resource::__set_alternateData(const Data& val) {
  this->alternateData = val;
__isset.alternateData = true;
}

uint32_t Resource::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guid);
          this->__isset.guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->noteGuid);
          this->__isset.noteGuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mime);
          this->__isset.mime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->width);
          this->__isset.width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->height);
          this->__isset.height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->duration);
          this->__isset.duration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->active);
          this->__isset.active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->recognition.read(iprot);
          this->__isset.recognition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->attributes.read(iprot);
          this->__isset.attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->updateSequenceNum);
          this->__isset.updateSequenceNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->alternateData.read(iprot);
          this->__isset.alternateData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Resource::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Resource");

  if (this->__isset.guid) {
    xfer += oprot->writeFieldBegin("guid", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noteGuid) {
    xfer += oprot->writeFieldBegin("noteGuid", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->noteGuid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->data.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mime) {
    xfer += oprot->writeFieldBegin("mime", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->mime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.width) {
    xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I16, 5);
    xfer += oprot->writeI16(this->width);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.height) {
    xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I16, 6);
    xfer += oprot->writeI16(this->height);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.duration) {
    xfer += oprot->writeFieldBegin("duration", ::apache::thrift::protocol::T_I16, 7);
    xfer += oprot->writeI16(this->duration);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.active) {
    xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->active);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recognition) {
    xfer += oprot->writeFieldBegin("recognition", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->recognition.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributes) {
    xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_STRUCT, 11);
    xfer += this->attributes.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updateSequenceNum) {
    xfer += oprot->writeFieldBegin("updateSequenceNum", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->updateSequenceNum);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.alternateData) {
    xfer += oprot->writeFieldBegin("alternateData", ::apache::thrift::protocol::T_STRUCT, 13);
    xfer += this->alternateData.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Resource &a, Resource &b) {
  using ::std::swap;
  swap(a.guid, b.guid);
  swap(a.noteGuid, b.noteGuid);
  swap(a.data, b.data);
  swap(a.mime, b.mime);
  swap(a.width, b.width);
  swap(a.height, b.height);
  swap(a.duration, b.duration);
  swap(a.active, b.active);
  swap(a.recognition, b.recognition);
  swap(a.attributes, b.attributes);
  swap(a.updateSequenceNum, b.updateSequenceNum);
  swap(a.alternateData, b.alternateData);
  swap(a.__isset, b.__isset);
}

Resource::Resource(const Resource& other58) {
  guid = other58.guid;
  noteGuid = other58.noteGuid;
  data = other58.data;
  mime = other58.mime;
  width = other58.width;
  height = other58.height;
  duration = other58.duration;
  active = other58.active;
  recognition = other58.recognition;
  attributes = other58.attributes;
  updateSequenceNum = other58.updateSequenceNum;
  alternateData = other58.alternateData;
  __isset = other58.__isset;
}
Resource& Resource::operator=(const Resource& other59) {
  guid = other59.guid;
  noteGuid = other59.noteGuid;
  data = other59.data;
  mime = other59.mime;
  width = other59.width;
  height = other59.height;
  duration = other59.duration;
  active = other59.active;
  recognition = other59.recognition;
  attributes = other59.attributes;
  updateSequenceNum = other59.updateSequenceNum;
  alternateData = other59.alternateData;
  __isset = other59.__isset;
  return *this;
}
void Resource::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Resource(";
  out << "guid="; (__isset.guid ? (out << to_string(guid)) : (out << "<null>"));
  out << ", " << "noteGuid="; (__isset.noteGuid ? (out << to_string(noteGuid)) : (out << "<null>"));
  out << ", " << "data="; (__isset.data ? (out << to_string(data)) : (out << "<null>"));
  out << ", " << "mime="; (__isset.mime ? (out << to_string(mime)) : (out << "<null>"));
  out << ", " << "width="; (__isset.width ? (out << to_string(width)) : (out << "<null>"));
  out << ", " << "height="; (__isset.height ? (out << to_string(height)) : (out << "<null>"));
  out << ", " << "duration="; (__isset.duration ? (out << to_string(duration)) : (out << "<null>"));
  out << ", " << "active="; (__isset.active ? (out << to_string(active)) : (out << "<null>"));
  out << ", " << "recognition="; (__isset.recognition ? (out << to_string(recognition)) : (out << "<null>"));
  out << ", " << "attributes="; (__isset.attributes ? (out << to_string(attributes)) : (out << "<null>"));
  out << ", " << "updateSequenceNum="; (__isset.updateSequenceNum ? (out << to_string(updateSequenceNum)) : (out << "<null>"));
  out << ", " << "alternateData="; (__isset.alternateData ? (out << to_string(alternateData)) : (out << "<null>"));
  out << ")";
}


NoteAttributes::~NoteAttributes() throw() {
}


void NoteAttributes::__set_subjectDate(const Timestamp val) {
  this->subjectDate = val;
__isset.subjectDate = true;
}

void NoteAttributes::__set_latitude(const double val) {
  this->latitude = val;
__isset.latitude = true;
}

void NoteAttributes::__set_longitude(const double val) {
  this->longitude = val;
__isset.longitude = true;
}

void NoteAttributes::__set_altitude(const double val) {
  this->altitude = val;
__isset.altitude = true;
}

void NoteAttributes::__set_author(const std::string& val) {
  this->author = val;
__isset.author = true;
}

void NoteAttributes::__set_source(const std::string& val) {
  this->source = val;
__isset.source = true;
}

void NoteAttributes::__set_sourceURL(const std::string& val) {
  this->sourceURL = val;
__isset.sourceURL = true;
}

void NoteAttributes::__set_sourceApplication(const std::string& val) {
  this->sourceApplication = val;
__isset.sourceApplication = true;
}

void NoteAttributes::__set_shareDate(const Timestamp val) {
  this->shareDate = val;
__isset.shareDate = true;
}

void NoteAttributes::__set_reminderOrder(const int64_t val) {
  this->reminderOrder = val;
__isset.reminderOrder = true;
}

void NoteAttributes::__set_reminderDoneTime(const Timestamp val) {
  this->reminderDoneTime = val;
__isset.reminderDoneTime = true;
}

void NoteAttributes::__set_reminderTime(const Timestamp val) {
  this->reminderTime = val;
__isset.reminderTime = true;
}

void NoteAttributes::__set_placeName(const std::string& val) {
  this->placeName = val;
__isset.placeName = true;
}

void NoteAttributes::__set_contentClass(const std::string& val) {
  this->contentClass = val;
__isset.contentClass = true;
}

void NoteAttributes::__set_applicationData(const LazyMap& val) {
  this->applicationData = val;
__isset.applicationData = true;
}

void NoteAttributes::__set_lastEditedBy(const std::string& val) {
  this->lastEditedBy = val;
__isset.lastEditedBy = true;
}

void NoteAttributes::__set_classifications(const std::map<std::string, std::string> & val) {
  this->classifications = val;
__isset.classifications = true;
}

void NoteAttributes::__set_creatorId(const UserID val) {
  this->creatorId = val;
__isset.creatorId = true;
}

void NoteAttributes::__set_lastEditorId(const UserID val) {
  this->lastEditorId = val;
__isset.lastEditorId = true;
}

void NoteAttributes::__set_sharedWithBusiness(const bool val) {
  this->sharedWithBusiness = val;
__isset.sharedWithBusiness = true;
}

void NoteAttributes::__set_conflictSourceNoteGuid(const Guid& val) {
  this->conflictSourceNoteGuid = val;
__isset.conflictSourceNoteGuid = true;
}

void NoteAttributes::__set_noteTitleQuality(const int32_t val) {
  this->noteTitleQuality = val;
__isset.noteTitleQuality = true;
}

uint32_t NoteAttributes::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->subjectDate);
          this->__isset.subjectDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->altitude);
          this->__isset.altitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->author);
          this->__isset.author = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->source);
          this->__isset.source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sourceURL);
          this->__isset.sourceURL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sourceApplication);
          this->__isset.sourceApplication = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->shareDate);
          this->__isset.shareDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->reminderOrder);
          this->__isset.reminderOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->reminderDoneTime);
          this->__isset.reminderDoneTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->reminderTime);
          this->__isset.reminderTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->placeName);
          this->__isset.placeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contentClass);
          this->__isset.contentClass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationData.read(iprot);
          this->__isset.applicationData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastEditedBy);
          this->__isset.lastEditedBy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->classifications.clear();
            uint32_t _size60;
            ::apache::thrift::protocol::TType _ktype61;
            ::apache::thrift::protocol::TType _vtype62;
            xfer += iprot->readMapBegin(_ktype61, _vtype62, _size60);
            uint32_t _i64;
            for (_i64 = 0; _i64 < _size60; ++_i64)
            {
              std::string _key65;
              xfer += iprot->readString(_key65);
              std::string& _val66 = this->classifications[_key65];
              xfer += iprot->readString(_val66);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.classifications = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->creatorId);
          this->__isset.creatorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lastEditorId);
          this->__isset.lastEditorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->sharedWithBusiness);
          this->__isset.sharedWithBusiness = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->conflictSourceNoteGuid);
          this->__isset.conflictSourceNoteGuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->noteTitleQuality);
          this->__isset.noteTitleQuality = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NoteAttributes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NoteAttributes");

  if (this->__isset.subjectDate) {
    xfer += oprot->writeFieldBegin("subjectDate", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->subjectDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.latitude) {
    xfer += oprot->writeFieldBegin("latitude", ::apache::thrift::protocol::T_DOUBLE, 10);
    xfer += oprot->writeDouble(this->latitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.longitude) {
    xfer += oprot->writeFieldBegin("longitude", ::apache::thrift::protocol::T_DOUBLE, 11);
    xfer += oprot->writeDouble(this->longitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.altitude) {
    xfer += oprot->writeFieldBegin("altitude", ::apache::thrift::protocol::T_DOUBLE, 12);
    xfer += oprot->writeDouble(this->altitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.author) {
    xfer += oprot->writeFieldBegin("author", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->author);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.source) {
    xfer += oprot->writeFieldBegin("source", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->source);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sourceURL) {
    xfer += oprot->writeFieldBegin("sourceURL", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->sourceURL);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sourceApplication) {
    xfer += oprot->writeFieldBegin("sourceApplication", ::apache::thrift::protocol::T_STRING, 16);
    xfer += oprot->writeString(this->sourceApplication);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shareDate) {
    xfer += oprot->writeFieldBegin("shareDate", ::apache::thrift::protocol::T_I64, 17);
    xfer += oprot->writeI64(this->shareDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reminderOrder) {
    xfer += oprot->writeFieldBegin("reminderOrder", ::apache::thrift::protocol::T_I64, 18);
    xfer += oprot->writeI64(this->reminderOrder);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reminderDoneTime) {
    xfer += oprot->writeFieldBegin("reminderDoneTime", ::apache::thrift::protocol::T_I64, 19);
    xfer += oprot->writeI64(this->reminderDoneTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reminderTime) {
    xfer += oprot->writeFieldBegin("reminderTime", ::apache::thrift::protocol::T_I64, 20);
    xfer += oprot->writeI64(this->reminderTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.placeName) {
    xfer += oprot->writeFieldBegin("placeName", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->placeName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contentClass) {
    xfer += oprot->writeFieldBegin("contentClass", ::apache::thrift::protocol::T_STRING, 22);
    xfer += oprot->writeString(this->contentClass);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.applicationData) {
    xfer += oprot->writeFieldBegin("applicationData", ::apache::thrift::protocol::T_STRUCT, 23);
    xfer += this->applicationData.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastEditedBy) {
    xfer += oprot->writeFieldBegin("lastEditedBy", ::apache::thrift::protocol::T_STRING, 24);
    xfer += oprot->writeString(this->lastEditedBy);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.classifications) {
    xfer += oprot->writeFieldBegin("classifications", ::apache::thrift::protocol::T_MAP, 26);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->classifications.size()));
      std::map<std::string, std::string> ::const_iterator _iter67;
      for (_iter67 = this->classifications.begin(); _iter67 != this->classifications.end(); ++_iter67)
      {
        xfer += oprot->writeString(_iter67->first);
        xfer += oprot->writeString(_iter67->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.creatorId) {
    xfer += oprot->writeFieldBegin("creatorId", ::apache::thrift::protocol::T_I32, 27);
    xfer += oprot->writeI32(this->creatorId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastEditorId) {
    xfer += oprot->writeFieldBegin("lastEditorId", ::apache::thrift::protocol::T_I32, 28);
    xfer += oprot->writeI32(this->lastEditorId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sharedWithBusiness) {
    xfer += oprot->writeFieldBegin("sharedWithBusiness", ::apache::thrift::protocol::T_BOOL, 29);
    xfer += oprot->writeBool(this->sharedWithBusiness);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.conflictSourceNoteGuid) {
    xfer += oprot->writeFieldBegin("conflictSourceNoteGuid", ::apache::thrift::protocol::T_STRING, 30);
    xfer += oprot->writeString(this->conflictSourceNoteGuid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noteTitleQuality) {
    xfer += oprot->writeFieldBegin("noteTitleQuality", ::apache::thrift::protocol::T_I32, 31);
    xfer += oprot->writeI32(this->noteTitleQuality);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NoteAttributes &a, NoteAttributes &b) {
  using ::std::swap;
  swap(a.subjectDate, b.subjectDate);
  swap(a.latitude, b.latitude);
  swap(a.longitude, b.longitude);
  swap(a.altitude, b.altitude);
  swap(a.author, b.author);
  swap(a.source, b.source);
  swap(a.sourceURL, b.sourceURL);
  swap(a.sourceApplication, b.sourceApplication);
  swap(a.shareDate, b.shareDate);
  swap(a.reminderOrder, b.reminderOrder);
  swap(a.reminderDoneTime, b.reminderDoneTime);
  swap(a.reminderTime, b.reminderTime);
  swap(a.placeName, b.placeName);
  swap(a.contentClass, b.contentClass);
  swap(a.applicationData, b.applicationData);
  swap(a.lastEditedBy, b.lastEditedBy);
  swap(a.classifications, b.classifications);
  swap(a.creatorId, b.creatorId);
  swap(a.lastEditorId, b.lastEditorId);
  swap(a.sharedWithBusiness, b.sharedWithBusiness);
  swap(a.conflictSourceNoteGuid, b.conflictSourceNoteGuid);
  swap(a.noteTitleQuality, b.noteTitleQuality);
  swap(a.__isset, b.__isset);
}

NoteAttributes::NoteAttributes(const NoteAttributes& other68) {
  subjectDate = other68.subjectDate;
  latitude = other68.latitude;
  longitude = other68.longitude;
  altitude = other68.altitude;
  author = other68.author;
  source = other68.source;
  sourceURL = other68.sourceURL;
  sourceApplication = other68.sourceApplication;
  shareDate = other68.shareDate;
  reminderOrder = other68.reminderOrder;
  reminderDoneTime = other68.reminderDoneTime;
  reminderTime = other68.reminderTime;
  placeName = other68.placeName;
  contentClass = other68.contentClass;
  applicationData = other68.applicationData;
  lastEditedBy = other68.lastEditedBy;
  classifications = other68.classifications;
  creatorId = other68.creatorId;
  lastEditorId = other68.lastEditorId;
  sharedWithBusiness = other68.sharedWithBusiness;
  conflictSourceNoteGuid = other68.conflictSourceNoteGuid;
  noteTitleQuality = other68.noteTitleQuality;
  __isset = other68.__isset;
}
NoteAttributes& NoteAttributes::operator=(const NoteAttributes& other69) {
  subjectDate = other69.subjectDate;
  latitude = other69.latitude;
  longitude = other69.longitude;
  altitude = other69.altitude;
  author = other69.author;
  source = other69.source;
  sourceURL = other69.sourceURL;
  sourceApplication = other69.sourceApplication;
  shareDate = other69.shareDate;
  reminderOrder = other69.reminderOrder;
  reminderDoneTime = other69.reminderDoneTime;
  reminderTime = other69.reminderTime;
  placeName = other69.placeName;
  contentClass = other69.contentClass;
  applicationData = other69.applicationData;
  lastEditedBy = other69.lastEditedBy;
  classifications = other69.classifications;
  creatorId = other69.creatorId;
  lastEditorId = other69.lastEditorId;
  sharedWithBusiness = other69.sharedWithBusiness;
  conflictSourceNoteGuid = other69.conflictSourceNoteGuid;
  noteTitleQuality = other69.noteTitleQuality;
  __isset = other69.__isset;
  return *this;
}
void NoteAttributes::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NoteAttributes(";
  out << "subjectDate="; (__isset.subjectDate ? (out << to_string(subjectDate)) : (out << "<null>"));
  out << ", " << "latitude="; (__isset.latitude ? (out << to_string(latitude)) : (out << "<null>"));
  out << ", " << "longitude="; (__isset.longitude ? (out << to_string(longitude)) : (out << "<null>"));
  out << ", " << "altitude="; (__isset.altitude ? (out << to_string(altitude)) : (out << "<null>"));
  out << ", " << "author="; (__isset.author ? (out << to_string(author)) : (out << "<null>"));
  out << ", " << "source="; (__isset.source ? (out << to_string(source)) : (out << "<null>"));
  out << ", " << "sourceURL="; (__isset.sourceURL ? (out << to_string(sourceURL)) : (out << "<null>"));
  out << ", " << "sourceApplication="; (__isset.sourceApplication ? (out << to_string(sourceApplication)) : (out << "<null>"));
  out << ", " << "shareDate="; (__isset.shareDate ? (out << to_string(shareDate)) : (out << "<null>"));
  out << ", " << "reminderOrder="; (__isset.reminderOrder ? (out << to_string(reminderOrder)) : (out << "<null>"));
  out << ", " << "reminderDoneTime="; (__isset.reminderDoneTime ? (out << to_string(reminderDoneTime)) : (out << "<null>"));
  out << ", " << "reminderTime="; (__isset.reminderTime ? (out << to_string(reminderTime)) : (out << "<null>"));
  out << ", " << "placeName="; (__isset.placeName ? (out << to_string(placeName)) : (out << "<null>"));
  out << ", " << "contentClass="; (__isset.contentClass ? (out << to_string(contentClass)) : (out << "<null>"));
  out << ", " << "applicationData="; (__isset.applicationData ? (out << to_string(applicationData)) : (out << "<null>"));
  out << ", " << "lastEditedBy="; (__isset.lastEditedBy ? (out << to_string(lastEditedBy)) : (out << "<null>"));
  out << ", " << "classifications="; (__isset.classifications ? (out << to_string(classifications)) : (out << "<null>"));
  out << ", " << "creatorId="; (__isset.creatorId ? (out << to_string(creatorId)) : (out << "<null>"));
  out << ", " << "lastEditorId="; (__isset.lastEditorId ? (out << to_string(lastEditorId)) : (out << "<null>"));
  out << ", " << "sharedWithBusiness="; (__isset.sharedWithBusiness ? (out << to_string(sharedWithBusiness)) : (out << "<null>"));
  out << ", " << "conflictSourceNoteGuid="; (__isset.conflictSourceNoteGuid ? (out << to_string(conflictSourceNoteGuid)) : (out << "<null>"));
  out << ", " << "noteTitleQuality="; (__isset.noteTitleQuality ? (out << to_string(noteTitleQuality)) : (out << "<null>"));
  out << ")";
}


SharedNote::~SharedNote() throw() {
}


void SharedNote::__set_sharerUserID(const UserID val) {
  this->sharerUserID = val;
__isset.sharerUserID = true;
}

void SharedNote::__set_recipientIdentity(const Identity& val) {
  this->recipientIdentity = val;
__isset.recipientIdentity = true;
}

void SharedNote::__set_privilege(const SharedNotePrivilegeLevel::type val) {
  this->privilege = val;
__isset.privilege = true;
}

void SharedNote::__set_serviceCreated(const Timestamp val) {
  this->serviceCreated = val;
__isset.serviceCreated = true;
}

void SharedNote::__set_serviceUpdated(const Timestamp val) {
  this->serviceUpdated = val;
__isset.serviceUpdated = true;
}

void SharedNote::__set_serviceAssigned(const Timestamp val) {
  this->serviceAssigned = val;
__isset.serviceAssigned = true;
}

uint32_t SharedNote::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sharerUserID);
          this->__isset.sharerUserID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->recipientIdentity.read(iprot);
          this->__isset.recipientIdentity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast70;
          xfer += iprot->readI32(ecast70);
          this->privilege = (SharedNotePrivilegeLevel::type)ecast70;
          this->__isset.privilege = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceCreated);
          this->__isset.serviceCreated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceUpdated);
          this->__isset.serviceUpdated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceAssigned);
          this->__isset.serviceAssigned = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SharedNote::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SharedNote");

  if (this->__isset.sharerUserID) {
    xfer += oprot->writeFieldBegin("sharerUserID", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->sharerUserID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recipientIdentity) {
    xfer += oprot->writeFieldBegin("recipientIdentity", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->recipientIdentity.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.privilege) {
    xfer += oprot->writeFieldBegin("privilege", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->privilege);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serviceCreated) {
    xfer += oprot->writeFieldBegin("serviceCreated", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->serviceCreated);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serviceUpdated) {
    xfer += oprot->writeFieldBegin("serviceUpdated", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->serviceUpdated);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serviceAssigned) {
    xfer += oprot->writeFieldBegin("serviceAssigned", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->serviceAssigned);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SharedNote &a, SharedNote &b) {
  using ::std::swap;
  swap(a.sharerUserID, b.sharerUserID);
  swap(a.recipientIdentity, b.recipientIdentity);
  swap(a.privilege, b.privilege);
  swap(a.serviceCreated, b.serviceCreated);
  swap(a.serviceUpdated, b.serviceUpdated);
  swap(a.serviceAssigned, b.serviceAssigned);
  swap(a.__isset, b.__isset);
}

SharedNote::SharedNote(const SharedNote& other71) {
  sharerUserID = other71.sharerUserID;
  recipientIdentity = other71.recipientIdentity;
  privilege = other71.privilege;
  serviceCreated = other71.serviceCreated;
  serviceUpdated = other71.serviceUpdated;
  serviceAssigned = other71.serviceAssigned;
  __isset = other71.__isset;
}
SharedNote& SharedNote::operator=(const SharedNote& other72) {
  sharerUserID = other72.sharerUserID;
  recipientIdentity = other72.recipientIdentity;
  privilege = other72.privilege;
  serviceCreated = other72.serviceCreated;
  serviceUpdated = other72.serviceUpdated;
  serviceAssigned = other72.serviceAssigned;
  __isset = other72.__isset;
  return *this;
}
void SharedNote::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SharedNote(";
  out << "sharerUserID="; (__isset.sharerUserID ? (out << to_string(sharerUserID)) : (out << "<null>"));
  out << ", " << "recipientIdentity="; (__isset.recipientIdentity ? (out << to_string(recipientIdentity)) : (out << "<null>"));
  out << ", " << "privilege="; (__isset.privilege ? (out << to_string(privilege)) : (out << "<null>"));
  out << ", " << "serviceCreated="; (__isset.serviceCreated ? (out << to_string(serviceCreated)) : (out << "<null>"));
  out << ", " << "serviceUpdated="; (__isset.serviceUpdated ? (out << to_string(serviceUpdated)) : (out << "<null>"));
  out << ", " << "serviceAssigned="; (__isset.serviceAssigned ? (out << to_string(serviceAssigned)) : (out << "<null>"));
  out << ")";
}


NoteRestrictions::~NoteRestrictions() throw() {
}


void NoteRestrictions::__set_noUpdateTitle(const bool val) {
  this->noUpdateTitle = val;
__isset.noUpdateTitle = true;
}

void NoteRestrictions::__set_noUpdateContent(const bool val) {
  this->noUpdateContent = val;
__isset.noUpdateContent = true;
}

void NoteRestrictions::__set_noEmail(const bool val) {
  this->noEmail = val;
__isset.noEmail = true;
}

void NoteRestrictions::__set_noShare(const bool val) {
  this->noShare = val;
__isset.noShare = true;
}

void NoteRestrictions::__set_noSharePublicly(const bool val) {
  this->noSharePublicly = val;
__isset.noSharePublicly = true;
}

uint32_t NoteRestrictions::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noUpdateTitle);
          this->__isset.noUpdateTitle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noUpdateContent);
          this->__isset.noUpdateContent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noEmail);
          this->__isset.noEmail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noShare);
          this->__isset.noShare = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noSharePublicly);
          this->__isset.noSharePublicly = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NoteRestrictions::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NoteRestrictions");

  if (this->__isset.noUpdateTitle) {
    xfer += oprot->writeFieldBegin("noUpdateTitle", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->noUpdateTitle);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noUpdateContent) {
    xfer += oprot->writeFieldBegin("noUpdateContent", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->noUpdateContent);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noEmail) {
    xfer += oprot->writeFieldBegin("noEmail", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->noEmail);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noShare) {
    xfer += oprot->writeFieldBegin("noShare", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->noShare);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noSharePublicly) {
    xfer += oprot->writeFieldBegin("noSharePublicly", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->noSharePublicly);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NoteRestrictions &a, NoteRestrictions &b) {
  using ::std::swap;
  swap(a.noUpdateTitle, b.noUpdateTitle);
  swap(a.noUpdateContent, b.noUpdateContent);
  swap(a.noEmail, b.noEmail);
  swap(a.noShare, b.noShare);
  swap(a.noSharePublicly, b.noSharePublicly);
  swap(a.__isset, b.__isset);
}

NoteRestrictions::NoteRestrictions(const NoteRestrictions& other73) {
  noUpdateTitle = other73.noUpdateTitle;
  noUpdateContent = other73.noUpdateContent;
  noEmail = other73.noEmail;
  noShare = other73.noShare;
  noSharePublicly = other73.noSharePublicly;
  __isset = other73.__isset;
}
NoteRestrictions& NoteRestrictions::operator=(const NoteRestrictions& other74) {
  noUpdateTitle = other74.noUpdateTitle;
  noUpdateContent = other74.noUpdateContent;
  noEmail = other74.noEmail;
  noShare = other74.noShare;
  noSharePublicly = other74.noSharePublicly;
  __isset = other74.__isset;
  return *this;
}
void NoteRestrictions::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NoteRestrictions(";
  out << "noUpdateTitle="; (__isset.noUpdateTitle ? (out << to_string(noUpdateTitle)) : (out << "<null>"));
  out << ", " << "noUpdateContent="; (__isset.noUpdateContent ? (out << to_string(noUpdateContent)) : (out << "<null>"));
  out << ", " << "noEmail="; (__isset.noEmail ? (out << to_string(noEmail)) : (out << "<null>"));
  out << ", " << "noShare="; (__isset.noShare ? (out << to_string(noShare)) : (out << "<null>"));
  out << ", " << "noSharePublicly="; (__isset.noSharePublicly ? (out << to_string(noSharePublicly)) : (out << "<null>"));
  out << ")";
}


NoteLimits::~NoteLimits() throw() {
}


void NoteLimits::__set_noteResourceCountMax(const int32_t val) {
  this->noteResourceCountMax = val;
__isset.noteResourceCountMax = true;
}

void NoteLimits::__set_uploadLimit(const int64_t val) {
  this->uploadLimit = val;
__isset.uploadLimit = true;
}

void NoteLimits::__set_resourceSizeMax(const int64_t val) {
  this->resourceSizeMax = val;
__isset.resourceSizeMax = true;
}

void NoteLimits::__set_noteSizeMax(const int64_t val) {
  this->noteSizeMax = val;
__isset.noteSizeMax = true;
}

void NoteLimits::__set_uploaded(const int64_t val) {
  this->uploaded = val;
__isset.uploaded = true;
}

uint32_t NoteLimits::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->noteResourceCountMax);
          this->__isset.noteResourceCountMax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uploadLimit);
          this->__isset.uploadLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->resourceSizeMax);
          this->__isset.resourceSizeMax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->noteSizeMax);
          this->__isset.noteSizeMax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uploaded);
          this->__isset.uploaded = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NoteLimits::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NoteLimits");

  if (this->__isset.noteResourceCountMax) {
    xfer += oprot->writeFieldBegin("noteResourceCountMax", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->noteResourceCountMax);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uploadLimit) {
    xfer += oprot->writeFieldBegin("uploadLimit", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->uploadLimit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resourceSizeMax) {
    xfer += oprot->writeFieldBegin("resourceSizeMax", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->resourceSizeMax);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noteSizeMax) {
    xfer += oprot->writeFieldBegin("noteSizeMax", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->noteSizeMax);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uploaded) {
    xfer += oprot->writeFieldBegin("uploaded", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->uploaded);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NoteLimits &a, NoteLimits &b) {
  using ::std::swap;
  swap(a.noteResourceCountMax, b.noteResourceCountMax);
  swap(a.uploadLimit, b.uploadLimit);
  swap(a.resourceSizeMax, b.resourceSizeMax);
  swap(a.noteSizeMax, b.noteSizeMax);
  swap(a.uploaded, b.uploaded);
  swap(a.__isset, b.__isset);
}

NoteLimits::NoteLimits(const NoteLimits& other75) {
  noteResourceCountMax = other75.noteResourceCountMax;
  uploadLimit = other75.uploadLimit;
  resourceSizeMax = other75.resourceSizeMax;
  noteSizeMax = other75.noteSizeMax;
  uploaded = other75.uploaded;
  __isset = other75.__isset;
}
NoteLimits& NoteLimits::operator=(const NoteLimits& other76) {
  noteResourceCountMax = other76.noteResourceCountMax;
  uploadLimit = other76.uploadLimit;
  resourceSizeMax = other76.resourceSizeMax;
  noteSizeMax = other76.noteSizeMax;
  uploaded = other76.uploaded;
  __isset = other76.__isset;
  return *this;
}
void NoteLimits::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NoteLimits(";
  out << "noteResourceCountMax="; (__isset.noteResourceCountMax ? (out << to_string(noteResourceCountMax)) : (out << "<null>"));
  out << ", " << "uploadLimit="; (__isset.uploadLimit ? (out << to_string(uploadLimit)) : (out << "<null>"));
  out << ", " << "resourceSizeMax="; (__isset.resourceSizeMax ? (out << to_string(resourceSizeMax)) : (out << "<null>"));
  out << ", " << "noteSizeMax="; (__isset.noteSizeMax ? (out << to_string(noteSizeMax)) : (out << "<null>"));
  out << ", " << "uploaded="; (__isset.uploaded ? (out << to_string(uploaded)) : (out << "<null>"));
  out << ")";
}


Note::~Note() throw() {
}


void Note::__set_guid(const Guid& val) {
  this->guid = val;
__isset.guid = true;
}

void Note::__set_title(const std::string& val) {
  this->title = val;
__isset.title = true;
}

void Note::__set_content(const std::string& val) {
  this->content = val;
__isset.content = true;
}

void Note::__set_contentHash(const std::string& val) {
  this->contentHash = val;
__isset.contentHash = true;
}

void Note::__set_contentLength(const int32_t val) {
  this->contentLength = val;
__isset.contentLength = true;
}

void Note::__set_created(const Timestamp val) {
  this->created = val;
__isset.created = true;
}

void Note::__set_updated(const Timestamp val) {
  this->updated = val;
__isset.updated = true;
}

void Note::__set_deleted(const Timestamp val) {
  this->deleted = val;
__isset.deleted = true;
}

void Note::__set_active(const bool val) {
  this->active = val;
__isset.active = true;
}

void Note::__set_updateSequenceNum(const int32_t val) {
  this->updateSequenceNum = val;
__isset.updateSequenceNum = true;
}

void Note::__set_notebookGuid(const std::string& val) {
  this->notebookGuid = val;
__isset.notebookGuid = true;
}

void Note::__set_tagGuids(const std::vector<Guid> & val) {
  this->tagGuids = val;
__isset.tagGuids = true;
}

void Note::__set_resources(const std::vector<Resource> & val) {
  this->resources = val;
__isset.resources = true;
}

void Note::__set_attributes(const NoteAttributes& val) {
  this->attributes = val;
__isset.attributes = true;
}

void Note::__set_tagNames(const std::vector<std::string> & val) {
  this->tagNames = val;
__isset.tagNames = true;
}

void Note::__set_sharedNotes(const std::vector<SharedNote> & val) {
  this->sharedNotes = val;
__isset.sharedNotes = true;
}

void Note::__set_restrictions(const NoteRestrictions& val) {
  this->restrictions = val;
__isset.restrictions = true;
}

void Note::__set_limits(const NoteLimits& val) {
  this->limits = val;
__isset.limits = true;
}

uint32_t Note::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guid);
          this->__isset.guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->contentHash);
          this->__isset.contentHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->contentLength);
          this->__isset.contentLength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->created);
          this->__isset.created = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->updated);
          this->__isset.updated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->deleted);
          this->__isset.deleted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->active);
          this->__isset.active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->updateSequenceNum);
          this->__isset.updateSequenceNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notebookGuid);
          this->__isset.notebookGuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tagGuids.clear();
            uint32_t _size77;
            ::apache::thrift::protocol::TType _etype80;
            xfer += iprot->readListBegin(_etype80, _size77);
            this->tagGuids.resize(_size77);
            uint32_t _i81;
            for (_i81 = 0; _i81 < _size77; ++_i81)
            {
              xfer += iprot->readString(this->tagGuids[_i81]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tagGuids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->resources.clear();
            uint32_t _size82;
            ::apache::thrift::protocol::TType _etype85;
            xfer += iprot->readListBegin(_etype85, _size82);
            this->resources.resize(_size82);
            uint32_t _i86;
            for (_i86 = 0; _i86 < _size82; ++_i86)
            {
              xfer += this->resources[_i86].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.resources = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->attributes.read(iprot);
          this->__isset.attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tagNames.clear();
            uint32_t _size87;
            ::apache::thrift::protocol::TType _etype90;
            xfer += iprot->readListBegin(_etype90, _size87);
            this->tagNames.resize(_size87);
            uint32_t _i91;
            for (_i91 = 0; _i91 < _size87; ++_i91)
            {
              xfer += iprot->readString(this->tagNames[_i91]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tagNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sharedNotes.clear();
            uint32_t _size92;
            ::apache::thrift::protocol::TType _etype95;
            xfer += iprot->readListBegin(_etype95, _size92);
            this->sharedNotes.resize(_size92);
            uint32_t _i96;
            for (_i96 = 0; _i96 < _size92; ++_i96)
            {
              xfer += this->sharedNotes[_i96].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sharedNotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->restrictions.read(iprot);
          this->__isset.restrictions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->limits.read(iprot);
          this->__isset.limits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Note::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Note");

  if (this->__isset.guid) {
    xfer += oprot->writeFieldBegin("guid", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.title) {
    xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->title);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.content) {
    xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->content);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contentHash) {
    xfer += oprot->writeFieldBegin("contentHash", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeBinary(this->contentHash);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contentLength) {
    xfer += oprot->writeFieldBegin("contentLength", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->contentLength);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.created) {
    xfer += oprot->writeFieldBegin("created", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->created);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updated) {
    xfer += oprot->writeFieldBegin("updated", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->updated);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deleted) {
    xfer += oprot->writeFieldBegin("deleted", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->deleted);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.active) {
    xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->active);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updateSequenceNum) {
    xfer += oprot->writeFieldBegin("updateSequenceNum", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->updateSequenceNum);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.notebookGuid) {
    xfer += oprot->writeFieldBegin("notebookGuid", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->notebookGuid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tagGuids) {
    xfer += oprot->writeFieldBegin("tagGuids", ::apache::thrift::protocol::T_LIST, 12);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tagGuids.size()));
      std::vector<Guid> ::const_iterator _iter97;
      for (_iter97 = this->tagGuids.begin(); _iter97 != this->tagGuids.end(); ++_iter97)
      {
        xfer += oprot->writeString((*_iter97));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resources) {
    xfer += oprot->writeFieldBegin("resources", ::apache::thrift::protocol::T_LIST, 13);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->resources.size()));
      std::vector<Resource> ::const_iterator _iter98;
      for (_iter98 = this->resources.begin(); _iter98 != this->resources.end(); ++_iter98)
      {
        xfer += (*_iter98).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributes) {
    xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_STRUCT, 14);
    xfer += this->attributes.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tagNames) {
    xfer += oprot->writeFieldBegin("tagNames", ::apache::thrift::protocol::T_LIST, 15);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tagNames.size()));
      std::vector<std::string> ::const_iterator _iter99;
      for (_iter99 = this->tagNames.begin(); _iter99 != this->tagNames.end(); ++_iter99)
      {
        xfer += oprot->writeString((*_iter99));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sharedNotes) {
    xfer += oprot->writeFieldBegin("sharedNotes", ::apache::thrift::protocol::T_LIST, 16);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sharedNotes.size()));
      std::vector<SharedNote> ::const_iterator _iter100;
      for (_iter100 = this->sharedNotes.begin(); _iter100 != this->sharedNotes.end(); ++_iter100)
      {
        xfer += (*_iter100).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.restrictions) {
    xfer += oprot->writeFieldBegin("restrictions", ::apache::thrift::protocol::T_STRUCT, 17);
    xfer += this->restrictions.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.limits) {
    xfer += oprot->writeFieldBegin("limits", ::apache::thrift::protocol::T_STRUCT, 18);
    xfer += this->limits.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Note &a, Note &b) {
  using ::std::swap;
  swap(a.guid, b.guid);
  swap(a.title, b.title);
  swap(a.content, b.content);
  swap(a.contentHash, b.contentHash);
  swap(a.contentLength, b.contentLength);
  swap(a.created, b.created);
  swap(a.updated, b.updated);
  swap(a.deleted, b.deleted);
  swap(a.active, b.active);
  swap(a.updateSequenceNum, b.updateSequenceNum);
  swap(a.notebookGuid, b.notebookGuid);
  swap(a.tagGuids, b.tagGuids);
  swap(a.resources, b.resources);
  swap(a.attributes, b.attributes);
  swap(a.tagNames, b.tagNames);
  swap(a.sharedNotes, b.sharedNotes);
  swap(a.restrictions, b.restrictions);
  swap(a.limits, b.limits);
  swap(a.__isset, b.__isset);
}

Note::Note(const Note& other101) {
  guid = other101.guid;
  title = other101.title;
  content = other101.content;
  contentHash = other101.contentHash;
  contentLength = other101.contentLength;
  created = other101.created;
  updated = other101.updated;
  deleted = other101.deleted;
  active = other101.active;
  updateSequenceNum = other101.updateSequenceNum;
  notebookGuid = other101.notebookGuid;
  tagGuids = other101.tagGuids;
  resources = other101.resources;
  attributes = other101.attributes;
  tagNames = other101.tagNames;
  sharedNotes = other101.sharedNotes;
  restrictions = other101.restrictions;
  limits = other101.limits;
  __isset = other101.__isset;
}
Note& Note::operator=(const Note& other102) {
  guid = other102.guid;
  title = other102.title;
  content = other102.content;
  contentHash = other102.contentHash;
  contentLength = other102.contentLength;
  created = other102.created;
  updated = other102.updated;
  deleted = other102.deleted;
  active = other102.active;
  updateSequenceNum = other102.updateSequenceNum;
  notebookGuid = other102.notebookGuid;
  tagGuids = other102.tagGuids;
  resources = other102.resources;
  attributes = other102.attributes;
  tagNames = other102.tagNames;
  sharedNotes = other102.sharedNotes;
  restrictions = other102.restrictions;
  limits = other102.limits;
  __isset = other102.__isset;
  return *this;
}
void Note::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Note(";
  out << "guid="; (__isset.guid ? (out << to_string(guid)) : (out << "<null>"));
  out << ", " << "title="; (__isset.title ? (out << to_string(title)) : (out << "<null>"));
  out << ", " << "content="; (__isset.content ? (out << to_string(content)) : (out << "<null>"));
  out << ", " << "contentHash="; (__isset.contentHash ? (out << to_string(contentHash)) : (out << "<null>"));
  out << ", " << "contentLength="; (__isset.contentLength ? (out << to_string(contentLength)) : (out << "<null>"));
  out << ", " << "created="; (__isset.created ? (out << to_string(created)) : (out << "<null>"));
  out << ", " << "updated="; (__isset.updated ? (out << to_string(updated)) : (out << "<null>"));
  out << ", " << "deleted="; (__isset.deleted ? (out << to_string(deleted)) : (out << "<null>"));
  out << ", " << "active="; (__isset.active ? (out << to_string(active)) : (out << "<null>"));
  out << ", " << "updateSequenceNum="; (__isset.updateSequenceNum ? (out << to_string(updateSequenceNum)) : (out << "<null>"));
  out << ", " << "notebookGuid="; (__isset.notebookGuid ? (out << to_string(notebookGuid)) : (out << "<null>"));
  out << ", " << "tagGuids="; (__isset.tagGuids ? (out << to_string(tagGuids)) : (out << "<null>"));
  out << ", " << "resources="; (__isset.resources ? (out << to_string(resources)) : (out << "<null>"));
  out << ", " << "attributes="; (__isset.attributes ? (out << to_string(attributes)) : (out << "<null>"));
  out << ", " << "tagNames="; (__isset.tagNames ? (out << to_string(tagNames)) : (out << "<null>"));
  out << ", " << "sharedNotes="; (__isset.sharedNotes ? (out << to_string(sharedNotes)) : (out << "<null>"));
  out << ", " << "restrictions="; (__isset.restrictions ? (out << to_string(restrictions)) : (out << "<null>"));
  out << ", " << "limits="; (__isset.limits ? (out << to_string(limits)) : (out << "<null>"));
  out << ")";
}


Publishing::~Publishing() throw() {
}


void Publishing::__set_uri(const std::string& val) {
  this->uri = val;
__isset.uri = true;
}

void Publishing::__set_order(const NoteSortOrder::type val) {
  this->order = val;
__isset.order = true;
}

void Publishing::__set_ascending(const bool val) {
  this->ascending = val;
__isset.ascending = true;
}

void Publishing::__set_publicDescription(const std::string& val) {
  this->publicDescription = val;
__isset.publicDescription = true;
}

uint32_t Publishing::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uri);
          this->__isset.uri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast103;
          xfer += iprot->readI32(ecast103);
          this->order = (NoteSortOrder::type)ecast103;
          this->__isset.order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ascending);
          this->__isset.ascending = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->publicDescription);
          this->__isset.publicDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Publishing::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Publishing");

  if (this->__isset.uri) {
    xfer += oprot->writeFieldBegin("uri", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->uri);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.order) {
    xfer += oprot->writeFieldBegin("order", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->order);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ascending) {
    xfer += oprot->writeFieldBegin("ascending", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->ascending);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.publicDescription) {
    xfer += oprot->writeFieldBegin("publicDescription", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->publicDescription);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Publishing &a, Publishing &b) {
  using ::std::swap;
  swap(a.uri, b.uri);
  swap(a.order, b.order);
  swap(a.ascending, b.ascending);
  swap(a.publicDescription, b.publicDescription);
  swap(a.__isset, b.__isset);
}

Publishing::Publishing(const Publishing& other104) {
  uri = other104.uri;
  order = other104.order;
  ascending = other104.ascending;
  publicDescription = other104.publicDescription;
  __isset = other104.__isset;
}
Publishing& Publishing::operator=(const Publishing& other105) {
  uri = other105.uri;
  order = other105.order;
  ascending = other105.ascending;
  publicDescription = other105.publicDescription;
  __isset = other105.__isset;
  return *this;
}
void Publishing::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Publishing(";
  out << "uri="; (__isset.uri ? (out << to_string(uri)) : (out << "<null>"));
  out << ", " << "order="; (__isset.order ? (out << to_string(order)) : (out << "<null>"));
  out << ", " << "ascending="; (__isset.ascending ? (out << to_string(ascending)) : (out << "<null>"));
  out << ", " << "publicDescription="; (__isset.publicDescription ? (out << to_string(publicDescription)) : (out << "<null>"));
  out << ")";
}


BusinessNotebook::~BusinessNotebook() throw() {
}


void BusinessNotebook::__set_notebookDescription(const std::string& val) {
  this->notebookDescription = val;
__isset.notebookDescription = true;
}

void BusinessNotebook::__set_privilege(const SharedNotebookPrivilegeLevel::type val) {
  this->privilege = val;
__isset.privilege = true;
}

void BusinessNotebook::__set_recommended(const bool val) {
  this->recommended = val;
__isset.recommended = true;
}

uint32_t BusinessNotebook::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notebookDescription);
          this->__isset.notebookDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast106;
          xfer += iprot->readI32(ecast106);
          this->privilege = (SharedNotebookPrivilegeLevel::type)ecast106;
          this->__isset.privilege = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->recommended);
          this->__isset.recommended = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BusinessNotebook::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BusinessNotebook");

  if (this->__isset.notebookDescription) {
    xfer += oprot->writeFieldBegin("notebookDescription", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->notebookDescription);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.privilege) {
    xfer += oprot->writeFieldBegin("privilege", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->privilege);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recommended) {
    xfer += oprot->writeFieldBegin("recommended", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->recommended);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BusinessNotebook &a, BusinessNotebook &b) {
  using ::std::swap;
  swap(a.notebookDescription, b.notebookDescription);
  swap(a.privilege, b.privilege);
  swap(a.recommended, b.recommended);
  swap(a.__isset, b.__isset);
}

BusinessNotebook::BusinessNotebook(const BusinessNotebook& other107) {
  notebookDescription = other107.notebookDescription;
  privilege = other107.privilege;
  recommended = other107.recommended;
  __isset = other107.__isset;
}
BusinessNotebook& BusinessNotebook::operator=(const BusinessNotebook& other108) {
  notebookDescription = other108.notebookDescription;
  privilege = other108.privilege;
  recommended = other108.recommended;
  __isset = other108.__isset;
  return *this;
}
void BusinessNotebook::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BusinessNotebook(";
  out << "notebookDescription="; (__isset.notebookDescription ? (out << to_string(notebookDescription)) : (out << "<null>"));
  out << ", " << "privilege="; (__isset.privilege ? (out << to_string(privilege)) : (out << "<null>"));
  out << ", " << "recommended="; (__isset.recommended ? (out << to_string(recommended)) : (out << "<null>"));
  out << ")";
}


SavedSearchScope::~SavedSearchScope() throw() {
}


void SavedSearchScope::__set_includeAccount(const bool val) {
  this->includeAccount = val;
__isset.includeAccount = true;
}

void SavedSearchScope::__set_includePersonalLinkedNotebooks(const bool val) {
  this->includePersonalLinkedNotebooks = val;
__isset.includePersonalLinkedNotebooks = true;
}

void SavedSearchScope::__set_includeBusinessLinkedNotebooks(const bool val) {
  this->includeBusinessLinkedNotebooks = val;
__isset.includeBusinessLinkedNotebooks = true;
}

uint32_t SavedSearchScope::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->includeAccount);
          this->__isset.includeAccount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->includePersonalLinkedNotebooks);
          this->__isset.includePersonalLinkedNotebooks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->includeBusinessLinkedNotebooks);
          this->__isset.includeBusinessLinkedNotebooks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SavedSearchScope::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SavedSearchScope");

  if (this->__isset.includeAccount) {
    xfer += oprot->writeFieldBegin("includeAccount", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->includeAccount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.includePersonalLinkedNotebooks) {
    xfer += oprot->writeFieldBegin("includePersonalLinkedNotebooks", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->includePersonalLinkedNotebooks);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.includeBusinessLinkedNotebooks) {
    xfer += oprot->writeFieldBegin("includeBusinessLinkedNotebooks", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->includeBusinessLinkedNotebooks);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SavedSearchScope &a, SavedSearchScope &b) {
  using ::std::swap;
  swap(a.includeAccount, b.includeAccount);
  swap(a.includePersonalLinkedNotebooks, b.includePersonalLinkedNotebooks);
  swap(a.includeBusinessLinkedNotebooks, b.includeBusinessLinkedNotebooks);
  swap(a.__isset, b.__isset);
}

SavedSearchScope::SavedSearchScope(const SavedSearchScope& other109) {
  includeAccount = other109.includeAccount;
  includePersonalLinkedNotebooks = other109.includePersonalLinkedNotebooks;
  includeBusinessLinkedNotebooks = other109.includeBusinessLinkedNotebooks;
  __isset = other109.__isset;
}
SavedSearchScope& SavedSearchScope::operator=(const SavedSearchScope& other110) {
  includeAccount = other110.includeAccount;
  includePersonalLinkedNotebooks = other110.includePersonalLinkedNotebooks;
  includeBusinessLinkedNotebooks = other110.includeBusinessLinkedNotebooks;
  __isset = other110.__isset;
  return *this;
}
void SavedSearchScope::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SavedSearchScope(";
  out << "includeAccount="; (__isset.includeAccount ? (out << to_string(includeAccount)) : (out << "<null>"));
  out << ", " << "includePersonalLinkedNotebooks="; (__isset.includePersonalLinkedNotebooks ? (out << to_string(includePersonalLinkedNotebooks)) : (out << "<null>"));
  out << ", " << "includeBusinessLinkedNotebooks="; (__isset.includeBusinessLinkedNotebooks ? (out << to_string(includeBusinessLinkedNotebooks)) : (out << "<null>"));
  out << ")";
}


SavedSearch::~SavedSearch() throw() {
}


void SavedSearch::__set_guid(const Guid& val) {
  this->guid = val;
__isset.guid = true;
}

void SavedSearch::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void SavedSearch::__set_query(const std::string& val) {
  this->query = val;
__isset.query = true;
}

void SavedSearch::__set_format(const QueryFormat::type val) {
  this->format = val;
__isset.format = true;
}

void SavedSearch::__set_updateSequenceNum(const int32_t val) {
  this->updateSequenceNum = val;
__isset.updateSequenceNum = true;
}

void SavedSearch::__set_scope(const SavedSearchScope& val) {
  this->scope = val;
__isset.scope = true;
}

uint32_t SavedSearch::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guid);
          this->__isset.guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->query);
          this->__isset.query = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast111;
          xfer += iprot->readI32(ecast111);
          this->format = (QueryFormat::type)ecast111;
          this->__isset.format = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->updateSequenceNum);
          this->__isset.updateSequenceNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->scope.read(iprot);
          this->__isset.scope = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SavedSearch::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SavedSearch");

  if (this->__isset.guid) {
    xfer += oprot->writeFieldBegin("guid", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.query) {
    xfer += oprot->writeFieldBegin("query", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->query);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.format) {
    xfer += oprot->writeFieldBegin("format", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->format);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updateSequenceNum) {
    xfer += oprot->writeFieldBegin("updateSequenceNum", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->updateSequenceNum);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.scope) {
    xfer += oprot->writeFieldBegin("scope", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->scope.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SavedSearch &a, SavedSearch &b) {
  using ::std::swap;
  swap(a.guid, b.guid);
  swap(a.name, b.name);
  swap(a.query, b.query);
  swap(a.format, b.format);
  swap(a.updateSequenceNum, b.updateSequenceNum);
  swap(a.scope, b.scope);
  swap(a.__isset, b.__isset);
}

SavedSearch::SavedSearch(const SavedSearch& other112) {
  guid = other112.guid;
  name = other112.name;
  query = other112.query;
  format = other112.format;
  updateSequenceNum = other112.updateSequenceNum;
  scope = other112.scope;
  __isset = other112.__isset;
}
SavedSearch& SavedSearch::operator=(const SavedSearch& other113) {
  guid = other113.guid;
  name = other113.name;
  query = other113.query;
  format = other113.format;
  updateSequenceNum = other113.updateSequenceNum;
  scope = other113.scope;
  __isset = other113.__isset;
  return *this;
}
void SavedSearch::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SavedSearch(";
  out << "guid="; (__isset.guid ? (out << to_string(guid)) : (out << "<null>"));
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "query="; (__isset.query ? (out << to_string(query)) : (out << "<null>"));
  out << ", " << "format="; (__isset.format ? (out << to_string(format)) : (out << "<null>"));
  out << ", " << "updateSequenceNum="; (__isset.updateSequenceNum ? (out << to_string(updateSequenceNum)) : (out << "<null>"));
  out << ", " << "scope="; (__isset.scope ? (out << to_string(scope)) : (out << "<null>"));
  out << ")";
}


SharedNotebookRecipientSettings::~SharedNotebookRecipientSettings() throw() {
}


void SharedNotebookRecipientSettings::__set_reminderNotifyEmail(const bool val) {
  this->reminderNotifyEmail = val;
__isset.reminderNotifyEmail = true;
}

void SharedNotebookRecipientSettings::__set_reminderNotifyInApp(const bool val) {
  this->reminderNotifyInApp = val;
__isset.reminderNotifyInApp = true;
}

uint32_t SharedNotebookRecipientSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->reminderNotifyEmail);
          this->__isset.reminderNotifyEmail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->reminderNotifyInApp);
          this->__isset.reminderNotifyInApp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SharedNotebookRecipientSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SharedNotebookRecipientSettings");

  if (this->__isset.reminderNotifyEmail) {
    xfer += oprot->writeFieldBegin("reminderNotifyEmail", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->reminderNotifyEmail);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reminderNotifyInApp) {
    xfer += oprot->writeFieldBegin("reminderNotifyInApp", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->reminderNotifyInApp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SharedNotebookRecipientSettings &a, SharedNotebookRecipientSettings &b) {
  using ::std::swap;
  swap(a.reminderNotifyEmail, b.reminderNotifyEmail);
  swap(a.reminderNotifyInApp, b.reminderNotifyInApp);
  swap(a.__isset, b.__isset);
}

SharedNotebookRecipientSettings::SharedNotebookRecipientSettings(const SharedNotebookRecipientSettings& other114) {
  reminderNotifyEmail = other114.reminderNotifyEmail;
  reminderNotifyInApp = other114.reminderNotifyInApp;
  __isset = other114.__isset;
}
SharedNotebookRecipientSettings& SharedNotebookRecipientSettings::operator=(const SharedNotebookRecipientSettings& other115) {
  reminderNotifyEmail = other115.reminderNotifyEmail;
  reminderNotifyInApp = other115.reminderNotifyInApp;
  __isset = other115.__isset;
  return *this;
}
void SharedNotebookRecipientSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SharedNotebookRecipientSettings(";
  out << "reminderNotifyEmail="; (__isset.reminderNotifyEmail ? (out << to_string(reminderNotifyEmail)) : (out << "<null>"));
  out << ", " << "reminderNotifyInApp="; (__isset.reminderNotifyInApp ? (out << to_string(reminderNotifyInApp)) : (out << "<null>"));
  out << ")";
}


NotebookRecipientSettings::~NotebookRecipientSettings() throw() {
}


void NotebookRecipientSettings::__set_reminderNotifyEmail(const bool val) {
  this->reminderNotifyEmail = val;
__isset.reminderNotifyEmail = true;
}

void NotebookRecipientSettings::__set_reminderNotifyInApp(const bool val) {
  this->reminderNotifyInApp = val;
__isset.reminderNotifyInApp = true;
}

void NotebookRecipientSettings::__set_inMyList(const bool val) {
  this->inMyList = val;
__isset.inMyList = true;
}

void NotebookRecipientSettings::__set_stack(const std::string& val) {
  this->stack = val;
__isset.stack = true;
}

uint32_t NotebookRecipientSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->reminderNotifyEmail);
          this->__isset.reminderNotifyEmail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->reminderNotifyInApp);
          this->__isset.reminderNotifyInApp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->inMyList);
          this->__isset.inMyList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stack);
          this->__isset.stack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NotebookRecipientSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NotebookRecipientSettings");

  if (this->__isset.reminderNotifyEmail) {
    xfer += oprot->writeFieldBegin("reminderNotifyEmail", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->reminderNotifyEmail);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reminderNotifyInApp) {
    xfer += oprot->writeFieldBegin("reminderNotifyInApp", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->reminderNotifyInApp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.inMyList) {
    xfer += oprot->writeFieldBegin("inMyList", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->inMyList);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stack) {
    xfer += oprot->writeFieldBegin("stack", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->stack);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotebookRecipientSettings &a, NotebookRecipientSettings &b) {
  using ::std::swap;
  swap(a.reminderNotifyEmail, b.reminderNotifyEmail);
  swap(a.reminderNotifyInApp, b.reminderNotifyInApp);
  swap(a.inMyList, b.inMyList);
  swap(a.stack, b.stack);
  swap(a.__isset, b.__isset);
}

NotebookRecipientSettings::NotebookRecipientSettings(const NotebookRecipientSettings& other116) {
  reminderNotifyEmail = other116.reminderNotifyEmail;
  reminderNotifyInApp = other116.reminderNotifyInApp;
  inMyList = other116.inMyList;
  stack = other116.stack;
  __isset = other116.__isset;
}
NotebookRecipientSettings& NotebookRecipientSettings::operator=(const NotebookRecipientSettings& other117) {
  reminderNotifyEmail = other117.reminderNotifyEmail;
  reminderNotifyInApp = other117.reminderNotifyInApp;
  inMyList = other117.inMyList;
  stack = other117.stack;
  __isset = other117.__isset;
  return *this;
}
void NotebookRecipientSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotebookRecipientSettings(";
  out << "reminderNotifyEmail="; (__isset.reminderNotifyEmail ? (out << to_string(reminderNotifyEmail)) : (out << "<null>"));
  out << ", " << "reminderNotifyInApp="; (__isset.reminderNotifyInApp ? (out << to_string(reminderNotifyInApp)) : (out << "<null>"));
  out << ", " << "inMyList="; (__isset.inMyList ? (out << to_string(inMyList)) : (out << "<null>"));
  out << ", " << "stack="; (__isset.stack ? (out << to_string(stack)) : (out << "<null>"));
  out << ")";
}


SharedNotebook::~SharedNotebook() throw() {
}


void SharedNotebook::__set_id(const int64_t val) {
  this->id = val;
__isset.id = true;
}

void SharedNotebook::__set_userId(const UserID val) {
  this->userId = val;
__isset.userId = true;
}

void SharedNotebook::__set_notebookGuid(const Guid& val) {
  this->notebookGuid = val;
__isset.notebookGuid = true;
}

void SharedNotebook::__set_email(const std::string& val) {
  this->email = val;
__isset.email = true;
}

void SharedNotebook::__set_recipientIdentityId(const IdentityID val) {
  this->recipientIdentityId = val;
__isset.recipientIdentityId = true;
}

void SharedNotebook::__set_notebookModifiable(const bool val) {
  this->notebookModifiable = val;
__isset.notebookModifiable = true;
}

void SharedNotebook::__set_serviceCreated(const Timestamp val) {
  this->serviceCreated = val;
__isset.serviceCreated = true;
}

void SharedNotebook::__set_serviceUpdated(const Timestamp val) {
  this->serviceUpdated = val;
__isset.serviceUpdated = true;
}

void SharedNotebook::__set_globalId(const std::string& val) {
  this->globalId = val;
__isset.globalId = true;
}

void SharedNotebook::__set_username(const std::string& val) {
  this->username = val;
__isset.username = true;
}

void SharedNotebook::__set_privilege(const SharedNotebookPrivilegeLevel::type val) {
  this->privilege = val;
__isset.privilege = true;
}

void SharedNotebook::__set_recipientSettings(const SharedNotebookRecipientSettings& val) {
  this->recipientSettings = val;
__isset.recipientSettings = true;
}

void SharedNotebook::__set_sharerUserId(const UserID val) {
  this->sharerUserId = val;
__isset.sharerUserId = true;
}

void SharedNotebook::__set_recipientUsername(const std::string& val) {
  this->recipientUsername = val;
__isset.recipientUsername = true;
}

void SharedNotebook::__set_recipientUserId(const UserID val) {
  this->recipientUserId = val;
__isset.recipientUserId = true;
}

void SharedNotebook::__set_serviceAssigned(const Timestamp val) {
  this->serviceAssigned = val;
__isset.serviceAssigned = true;
}

uint32_t SharedNotebook::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notebookGuid);
          this->__isset.notebookGuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->recipientIdentityId);
          this->__isset.recipientIdentityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->notebookModifiable);
          this->__isset.notebookModifiable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceCreated);
          this->__isset.serviceCreated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceUpdated);
          this->__isset.serviceUpdated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->globalId);
          this->__isset.globalId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast118;
          xfer += iprot->readI32(ecast118);
          this->privilege = (SharedNotebookPrivilegeLevel::type)ecast118;
          this->__isset.privilege = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->recipientSettings.read(iprot);
          this->__isset.recipientSettings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sharerUserId);
          this->__isset.sharerUserId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->recipientUsername);
          this->__isset.recipientUsername = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->recipientUserId);
          this->__isset.recipientUserId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceAssigned);
          this->__isset.serviceAssigned = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SharedNotebook::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SharedNotebook");

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userId) {
    xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->userId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.notebookGuid) {
    xfer += oprot->writeFieldBegin("notebookGuid", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->notebookGuid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.email) {
    xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->email);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.notebookModifiable) {
    xfer += oprot->writeFieldBegin("notebookModifiable", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->notebookModifiable);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serviceCreated) {
    xfer += oprot->writeFieldBegin("serviceCreated", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->serviceCreated);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.globalId) {
    xfer += oprot->writeFieldBegin("globalId", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->globalId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.username) {
    xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->username);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serviceUpdated) {
    xfer += oprot->writeFieldBegin("serviceUpdated", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->serviceUpdated);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.privilege) {
    xfer += oprot->writeFieldBegin("privilege", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32((int32_t)this->privilege);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recipientSettings) {
    xfer += oprot->writeFieldBegin("recipientSettings", ::apache::thrift::protocol::T_STRUCT, 13);
    xfer += this->recipientSettings.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sharerUserId) {
    xfer += oprot->writeFieldBegin("sharerUserId", ::apache::thrift::protocol::T_I32, 14);
    xfer += oprot->writeI32(this->sharerUserId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recipientUsername) {
    xfer += oprot->writeFieldBegin("recipientUsername", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->recipientUsername);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serviceAssigned) {
    xfer += oprot->writeFieldBegin("serviceAssigned", ::apache::thrift::protocol::T_I64, 16);
    xfer += oprot->writeI64(this->serviceAssigned);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recipientUserId) {
    xfer += oprot->writeFieldBegin("recipientUserId", ::apache::thrift::protocol::T_I32, 17);
    xfer += oprot->writeI32(this->recipientUserId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recipientIdentityId) {
    xfer += oprot->writeFieldBegin("recipientIdentityId", ::apache::thrift::protocol::T_I64, 18);
    xfer += oprot->writeI64(this->recipientIdentityId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SharedNotebook &a, SharedNotebook &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.userId, b.userId);
  swap(a.notebookGuid, b.notebookGuid);
  swap(a.email, b.email);
  swap(a.recipientIdentityId, b.recipientIdentityId);
  swap(a.notebookModifiable, b.notebookModifiable);
  swap(a.serviceCreated, b.serviceCreated);
  swap(a.serviceUpdated, b.serviceUpdated);
  swap(a.globalId, b.globalId);
  swap(a.username, b.username);
  swap(a.privilege, b.privilege);
  swap(a.recipientSettings, b.recipientSettings);
  swap(a.sharerUserId, b.sharerUserId);
  swap(a.recipientUsername, b.recipientUsername);
  swap(a.recipientUserId, b.recipientUserId);
  swap(a.serviceAssigned, b.serviceAssigned);
  swap(a.__isset, b.__isset);
}

SharedNotebook::SharedNotebook(const SharedNotebook& other119) {
  id = other119.id;
  userId = other119.userId;
  notebookGuid = other119.notebookGuid;
  email = other119.email;
  recipientIdentityId = other119.recipientIdentityId;
  notebookModifiable = other119.notebookModifiable;
  serviceCreated = other119.serviceCreated;
  serviceUpdated = other119.serviceUpdated;
  globalId = other119.globalId;
  username = other119.username;
  privilege = other119.privilege;
  recipientSettings = other119.recipientSettings;
  sharerUserId = other119.sharerUserId;
  recipientUsername = other119.recipientUsername;
  recipientUserId = other119.recipientUserId;
  serviceAssigned = other119.serviceAssigned;
  __isset = other119.__isset;
}
SharedNotebook& SharedNotebook::operator=(const SharedNotebook& other120) {
  id = other120.id;
  userId = other120.userId;
  notebookGuid = other120.notebookGuid;
  email = other120.email;
  recipientIdentityId = other120.recipientIdentityId;
  notebookModifiable = other120.notebookModifiable;
  serviceCreated = other120.serviceCreated;
  serviceUpdated = other120.serviceUpdated;
  globalId = other120.globalId;
  username = other120.username;
  privilege = other120.privilege;
  recipientSettings = other120.recipientSettings;
  sharerUserId = other120.sharerUserId;
  recipientUsername = other120.recipientUsername;
  recipientUserId = other120.recipientUserId;
  serviceAssigned = other120.serviceAssigned;
  __isset = other120.__isset;
  return *this;
}
void SharedNotebook::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SharedNotebook(";
  out << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "userId="; (__isset.userId ? (out << to_string(userId)) : (out << "<null>"));
  out << ", " << "notebookGuid="; (__isset.notebookGuid ? (out << to_string(notebookGuid)) : (out << "<null>"));
  out << ", " << "email="; (__isset.email ? (out << to_string(email)) : (out << "<null>"));
  out << ", " << "recipientIdentityId="; (__isset.recipientIdentityId ? (out << to_string(recipientIdentityId)) : (out << "<null>"));
  out << ", " << "notebookModifiable="; (__isset.notebookModifiable ? (out << to_string(notebookModifiable)) : (out << "<null>"));
  out << ", " << "serviceCreated="; (__isset.serviceCreated ? (out << to_string(serviceCreated)) : (out << "<null>"));
  out << ", " << "serviceUpdated="; (__isset.serviceUpdated ? (out << to_string(serviceUpdated)) : (out << "<null>"));
  out << ", " << "globalId="; (__isset.globalId ? (out << to_string(globalId)) : (out << "<null>"));
  out << ", " << "username="; (__isset.username ? (out << to_string(username)) : (out << "<null>"));
  out << ", " << "privilege="; (__isset.privilege ? (out << to_string(privilege)) : (out << "<null>"));
  out << ", " << "recipientSettings="; (__isset.recipientSettings ? (out << to_string(recipientSettings)) : (out << "<null>"));
  out << ", " << "sharerUserId="; (__isset.sharerUserId ? (out << to_string(sharerUserId)) : (out << "<null>"));
  out << ", " << "recipientUsername="; (__isset.recipientUsername ? (out << to_string(recipientUsername)) : (out << "<null>"));
  out << ", " << "recipientUserId="; (__isset.recipientUserId ? (out << to_string(recipientUserId)) : (out << "<null>"));
  out << ", " << "serviceAssigned="; (__isset.serviceAssigned ? (out << to_string(serviceAssigned)) : (out << "<null>"));
  out << ")";
}


NotebookRestrictions::~NotebookRestrictions() throw() {
}


void NotebookRestrictions::__set_noReadNotes(const bool val) {
  this->noReadNotes = val;
__isset.noReadNotes = true;
}

void NotebookRestrictions::__set_noCreateNotes(const bool val) {
  this->noCreateNotes = val;
__isset.noCreateNotes = true;
}

void NotebookRestrictions::__set_noUpdateNotes(const bool val) {
  this->noUpdateNotes = val;
__isset.noUpdateNotes = true;
}

void NotebookRestrictions::__set_noExpungeNotes(const bool val) {
  this->noExpungeNotes = val;
__isset.noExpungeNotes = true;
}

void NotebookRestrictions::__set_noShareNotes(const bool val) {
  this->noShareNotes = val;
__isset.noShareNotes = true;
}

void NotebookRestrictions::__set_noEmailNotes(const bool val) {
  this->noEmailNotes = val;
__isset.noEmailNotes = true;
}

void NotebookRestrictions::__set_noSendMessageToRecipients(const bool val) {
  this->noSendMessageToRecipients = val;
__isset.noSendMessageToRecipients = true;
}

void NotebookRestrictions::__set_noUpdateNotebook(const bool val) {
  this->noUpdateNotebook = val;
__isset.noUpdateNotebook = true;
}

void NotebookRestrictions::__set_noExpungeNotebook(const bool val) {
  this->noExpungeNotebook = val;
__isset.noExpungeNotebook = true;
}

void NotebookRestrictions::__set_noSetDefaultNotebook(const bool val) {
  this->noSetDefaultNotebook = val;
__isset.noSetDefaultNotebook = true;
}

void NotebookRestrictions::__set_noSetNotebookStack(const bool val) {
  this->noSetNotebookStack = val;
__isset.noSetNotebookStack = true;
}

void NotebookRestrictions::__set_noPublishToPublic(const bool val) {
  this->noPublishToPublic = val;
__isset.noPublishToPublic = true;
}

void NotebookRestrictions::__set_noPublishToBusinessLibrary(const bool val) {
  this->noPublishToBusinessLibrary = val;
__isset.noPublishToBusinessLibrary = true;
}

void NotebookRestrictions::__set_noCreateTags(const bool val) {
  this->noCreateTags = val;
__isset.noCreateTags = true;
}

void NotebookRestrictions::__set_noUpdateTags(const bool val) {
  this->noUpdateTags = val;
__isset.noUpdateTags = true;
}

void NotebookRestrictions::__set_noExpungeTags(const bool val) {
  this->noExpungeTags = val;
__isset.noExpungeTags = true;
}

void NotebookRestrictions::__set_noSetParentTag(const bool val) {
  this->noSetParentTag = val;
__isset.noSetParentTag = true;
}

void NotebookRestrictions::__set_noCreateSharedNotebooks(const bool val) {
  this->noCreateSharedNotebooks = val;
__isset.noCreateSharedNotebooks = true;
}

void NotebookRestrictions::__set_updateWhichSharedNotebookRestrictions(const SharedNotebookInstanceRestrictions::type val) {
  this->updateWhichSharedNotebookRestrictions = val;
__isset.updateWhichSharedNotebookRestrictions = true;
}

void NotebookRestrictions::__set_expungeWhichSharedNotebookRestrictions(const SharedNotebookInstanceRestrictions::type val) {
  this->expungeWhichSharedNotebookRestrictions = val;
__isset.expungeWhichSharedNotebookRestrictions = true;
}

void NotebookRestrictions::__set_noShareNotesWithBusiness(const bool val) {
  this->noShareNotesWithBusiness = val;
__isset.noShareNotesWithBusiness = true;
}

void NotebookRestrictions::__set_noRenameNotebook(const bool val) {
  this->noRenameNotebook = val;
__isset.noRenameNotebook = true;
}

uint32_t NotebookRestrictions::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noReadNotes);
          this->__isset.noReadNotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noCreateNotes);
          this->__isset.noCreateNotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noUpdateNotes);
          this->__isset.noUpdateNotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noExpungeNotes);
          this->__isset.noExpungeNotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noShareNotes);
          this->__isset.noShareNotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noEmailNotes);
          this->__isset.noEmailNotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noSendMessageToRecipients);
          this->__isset.noSendMessageToRecipients = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noUpdateNotebook);
          this->__isset.noUpdateNotebook = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noExpungeNotebook);
          this->__isset.noExpungeNotebook = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noSetDefaultNotebook);
          this->__isset.noSetDefaultNotebook = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noSetNotebookStack);
          this->__isset.noSetNotebookStack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noPublishToPublic);
          this->__isset.noPublishToPublic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noPublishToBusinessLibrary);
          this->__isset.noPublishToBusinessLibrary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noCreateTags);
          this->__isset.noCreateTags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noUpdateTags);
          this->__isset.noUpdateTags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noExpungeTags);
          this->__isset.noExpungeTags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noSetParentTag);
          this->__isset.noSetParentTag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noCreateSharedNotebooks);
          this->__isset.noCreateSharedNotebooks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast121;
          xfer += iprot->readI32(ecast121);
          this->updateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions::type)ecast121;
          this->__isset.updateWhichSharedNotebookRestrictions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast122;
          xfer += iprot->readI32(ecast122);
          this->expungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions::type)ecast122;
          this->__isset.expungeWhichSharedNotebookRestrictions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noShareNotesWithBusiness);
          this->__isset.noShareNotesWithBusiness = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noRenameNotebook);
          this->__isset.noRenameNotebook = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NotebookRestrictions::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NotebookRestrictions");

  if (this->__isset.noReadNotes) {
    xfer += oprot->writeFieldBegin("noReadNotes", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->noReadNotes);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noCreateNotes) {
    xfer += oprot->writeFieldBegin("noCreateNotes", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->noCreateNotes);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noUpdateNotes) {
    xfer += oprot->writeFieldBegin("noUpdateNotes", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->noUpdateNotes);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noExpungeNotes) {
    xfer += oprot->writeFieldBegin("noExpungeNotes", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->noExpungeNotes);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noShareNotes) {
    xfer += oprot->writeFieldBegin("noShareNotes", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->noShareNotes);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noEmailNotes) {
    xfer += oprot->writeFieldBegin("noEmailNotes", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->noEmailNotes);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noSendMessageToRecipients) {
    xfer += oprot->writeFieldBegin("noSendMessageToRecipients", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->noSendMessageToRecipients);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noUpdateNotebook) {
    xfer += oprot->writeFieldBegin("noUpdateNotebook", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->noUpdateNotebook);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noExpungeNotebook) {
    xfer += oprot->writeFieldBegin("noExpungeNotebook", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->noExpungeNotebook);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noSetDefaultNotebook) {
    xfer += oprot->writeFieldBegin("noSetDefaultNotebook", ::apache::thrift::protocol::T_BOOL, 10);
    xfer += oprot->writeBool(this->noSetDefaultNotebook);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noSetNotebookStack) {
    xfer += oprot->writeFieldBegin("noSetNotebookStack", ::apache::thrift::protocol::T_BOOL, 11);
    xfer += oprot->writeBool(this->noSetNotebookStack);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noPublishToPublic) {
    xfer += oprot->writeFieldBegin("noPublishToPublic", ::apache::thrift::protocol::T_BOOL, 12);
    xfer += oprot->writeBool(this->noPublishToPublic);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noPublishToBusinessLibrary) {
    xfer += oprot->writeFieldBegin("noPublishToBusinessLibrary", ::apache::thrift::protocol::T_BOOL, 13);
    xfer += oprot->writeBool(this->noPublishToBusinessLibrary);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noCreateTags) {
    xfer += oprot->writeFieldBegin("noCreateTags", ::apache::thrift::protocol::T_BOOL, 14);
    xfer += oprot->writeBool(this->noCreateTags);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noUpdateTags) {
    xfer += oprot->writeFieldBegin("noUpdateTags", ::apache::thrift::protocol::T_BOOL, 15);
    xfer += oprot->writeBool(this->noUpdateTags);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noExpungeTags) {
    xfer += oprot->writeFieldBegin("noExpungeTags", ::apache::thrift::protocol::T_BOOL, 16);
    xfer += oprot->writeBool(this->noExpungeTags);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noSetParentTag) {
    xfer += oprot->writeFieldBegin("noSetParentTag", ::apache::thrift::protocol::T_BOOL, 17);
    xfer += oprot->writeBool(this->noSetParentTag);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noCreateSharedNotebooks) {
    xfer += oprot->writeFieldBegin("noCreateSharedNotebooks", ::apache::thrift::protocol::T_BOOL, 18);
    xfer += oprot->writeBool(this->noCreateSharedNotebooks);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updateWhichSharedNotebookRestrictions) {
    xfer += oprot->writeFieldBegin("updateWhichSharedNotebookRestrictions", ::apache::thrift::protocol::T_I32, 19);
    xfer += oprot->writeI32((int32_t)this->updateWhichSharedNotebookRestrictions);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.expungeWhichSharedNotebookRestrictions) {
    xfer += oprot->writeFieldBegin("expungeWhichSharedNotebookRestrictions", ::apache::thrift::protocol::T_I32, 20);
    xfer += oprot->writeI32((int32_t)this->expungeWhichSharedNotebookRestrictions);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noShareNotesWithBusiness) {
    xfer += oprot->writeFieldBegin("noShareNotesWithBusiness", ::apache::thrift::protocol::T_BOOL, 21);
    xfer += oprot->writeBool(this->noShareNotesWithBusiness);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noRenameNotebook) {
    xfer += oprot->writeFieldBegin("noRenameNotebook", ::apache::thrift::protocol::T_BOOL, 22);
    xfer += oprot->writeBool(this->noRenameNotebook);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotebookRestrictions &a, NotebookRestrictions &b) {
  using ::std::swap;
  swap(a.noReadNotes, b.noReadNotes);
  swap(a.noCreateNotes, b.noCreateNotes);
  swap(a.noUpdateNotes, b.noUpdateNotes);
  swap(a.noExpungeNotes, b.noExpungeNotes);
  swap(a.noShareNotes, b.noShareNotes);
  swap(a.noEmailNotes, b.noEmailNotes);
  swap(a.noSendMessageToRecipients, b.noSendMessageToRecipients);
  swap(a.noUpdateNotebook, b.noUpdateNotebook);
  swap(a.noExpungeNotebook, b.noExpungeNotebook);
  swap(a.noSetDefaultNotebook, b.noSetDefaultNotebook);
  swap(a.noSetNotebookStack, b.noSetNotebookStack);
  swap(a.noPublishToPublic, b.noPublishToPublic);
  swap(a.noPublishToBusinessLibrary, b.noPublishToBusinessLibrary);
  swap(a.noCreateTags, b.noCreateTags);
  swap(a.noUpdateTags, b.noUpdateTags);
  swap(a.noExpungeTags, b.noExpungeTags);
  swap(a.noSetParentTag, b.noSetParentTag);
  swap(a.noCreateSharedNotebooks, b.noCreateSharedNotebooks);
  swap(a.updateWhichSharedNotebookRestrictions, b.updateWhichSharedNotebookRestrictions);
  swap(a.expungeWhichSharedNotebookRestrictions, b.expungeWhichSharedNotebookRestrictions);
  swap(a.noShareNotesWithBusiness, b.noShareNotesWithBusiness);
  swap(a.noRenameNotebook, b.noRenameNotebook);
  swap(a.__isset, b.__isset);
}

NotebookRestrictions::NotebookRestrictions(const NotebookRestrictions& other123) {
  noReadNotes = other123.noReadNotes;
  noCreateNotes = other123.noCreateNotes;
  noUpdateNotes = other123.noUpdateNotes;
  noExpungeNotes = other123.noExpungeNotes;
  noShareNotes = other123.noShareNotes;
  noEmailNotes = other123.noEmailNotes;
  noSendMessageToRecipients = other123.noSendMessageToRecipients;
  noUpdateNotebook = other123.noUpdateNotebook;
  noExpungeNotebook = other123.noExpungeNotebook;
  noSetDefaultNotebook = other123.noSetDefaultNotebook;
  noSetNotebookStack = other123.noSetNotebookStack;
  noPublishToPublic = other123.noPublishToPublic;
  noPublishToBusinessLibrary = other123.noPublishToBusinessLibrary;
  noCreateTags = other123.noCreateTags;
  noUpdateTags = other123.noUpdateTags;
  noExpungeTags = other123.noExpungeTags;
  noSetParentTag = other123.noSetParentTag;
  noCreateSharedNotebooks = other123.noCreateSharedNotebooks;
  updateWhichSharedNotebookRestrictions = other123.updateWhichSharedNotebookRestrictions;
  expungeWhichSharedNotebookRestrictions = other123.expungeWhichSharedNotebookRestrictions;
  noShareNotesWithBusiness = other123.noShareNotesWithBusiness;
  noRenameNotebook = other123.noRenameNotebook;
  __isset = other123.__isset;
}
NotebookRestrictions& NotebookRestrictions::operator=(const NotebookRestrictions& other124) {
  noReadNotes = other124.noReadNotes;
  noCreateNotes = other124.noCreateNotes;
  noUpdateNotes = other124.noUpdateNotes;
  noExpungeNotes = other124.noExpungeNotes;
  noShareNotes = other124.noShareNotes;
  noEmailNotes = other124.noEmailNotes;
  noSendMessageToRecipients = other124.noSendMessageToRecipients;
  noUpdateNotebook = other124.noUpdateNotebook;
  noExpungeNotebook = other124.noExpungeNotebook;
  noSetDefaultNotebook = other124.noSetDefaultNotebook;
  noSetNotebookStack = other124.noSetNotebookStack;
  noPublishToPublic = other124.noPublishToPublic;
  noPublishToBusinessLibrary = other124.noPublishToBusinessLibrary;
  noCreateTags = other124.noCreateTags;
  noUpdateTags = other124.noUpdateTags;
  noExpungeTags = other124.noExpungeTags;
  noSetParentTag = other124.noSetParentTag;
  noCreateSharedNotebooks = other124.noCreateSharedNotebooks;
  updateWhichSharedNotebookRestrictions = other124.updateWhichSharedNotebookRestrictions;
  expungeWhichSharedNotebookRestrictions = other124.expungeWhichSharedNotebookRestrictions;
  noShareNotesWithBusiness = other124.noShareNotesWithBusiness;
  noRenameNotebook = other124.noRenameNotebook;
  __isset = other124.__isset;
  return *this;
}
void NotebookRestrictions::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotebookRestrictions(";
  out << "noReadNotes="; (__isset.noReadNotes ? (out << to_string(noReadNotes)) : (out << "<null>"));
  out << ", " << "noCreateNotes="; (__isset.noCreateNotes ? (out << to_string(noCreateNotes)) : (out << "<null>"));
  out << ", " << "noUpdateNotes="; (__isset.noUpdateNotes ? (out << to_string(noUpdateNotes)) : (out << "<null>"));
  out << ", " << "noExpungeNotes="; (__isset.noExpungeNotes ? (out << to_string(noExpungeNotes)) : (out << "<null>"));
  out << ", " << "noShareNotes="; (__isset.noShareNotes ? (out << to_string(noShareNotes)) : (out << "<null>"));
  out << ", " << "noEmailNotes="; (__isset.noEmailNotes ? (out << to_string(noEmailNotes)) : (out << "<null>"));
  out << ", " << "noSendMessageToRecipients="; (__isset.noSendMessageToRecipients ? (out << to_string(noSendMessageToRecipients)) : (out << "<null>"));
  out << ", " << "noUpdateNotebook="; (__isset.noUpdateNotebook ? (out << to_string(noUpdateNotebook)) : (out << "<null>"));
  out << ", " << "noExpungeNotebook="; (__isset.noExpungeNotebook ? (out << to_string(noExpungeNotebook)) : (out << "<null>"));
  out << ", " << "noSetDefaultNotebook="; (__isset.noSetDefaultNotebook ? (out << to_string(noSetDefaultNotebook)) : (out << "<null>"));
  out << ", " << "noSetNotebookStack="; (__isset.noSetNotebookStack ? (out << to_string(noSetNotebookStack)) : (out << "<null>"));
  out << ", " << "noPublishToPublic="; (__isset.noPublishToPublic ? (out << to_string(noPublishToPublic)) : (out << "<null>"));
  out << ", " << "noPublishToBusinessLibrary="; (__isset.noPublishToBusinessLibrary ? (out << to_string(noPublishToBusinessLibrary)) : (out << "<null>"));
  out << ", " << "noCreateTags="; (__isset.noCreateTags ? (out << to_string(noCreateTags)) : (out << "<null>"));
  out << ", " << "noUpdateTags="; (__isset.noUpdateTags ? (out << to_string(noUpdateTags)) : (out << "<null>"));
  out << ", " << "noExpungeTags="; (__isset.noExpungeTags ? (out << to_string(noExpungeTags)) : (out << "<null>"));
  out << ", " << "noSetParentTag="; (__isset.noSetParentTag ? (out << to_string(noSetParentTag)) : (out << "<null>"));
  out << ", " << "noCreateSharedNotebooks="; (__isset.noCreateSharedNotebooks ? (out << to_string(noCreateSharedNotebooks)) : (out << "<null>"));
  out << ", " << "updateWhichSharedNotebookRestrictions="; (__isset.updateWhichSharedNotebookRestrictions ? (out << to_string(updateWhichSharedNotebookRestrictions)) : (out << "<null>"));
  out << ", " << "expungeWhichSharedNotebookRestrictions="; (__isset.expungeWhichSharedNotebookRestrictions ? (out << to_string(expungeWhichSharedNotebookRestrictions)) : (out << "<null>"));
  out << ", " << "noShareNotesWithBusiness="; (__isset.noShareNotesWithBusiness ? (out << to_string(noShareNotesWithBusiness)) : (out << "<null>"));
  out << ", " << "noRenameNotebook="; (__isset.noRenameNotebook ? (out << to_string(noRenameNotebook)) : (out << "<null>"));
  out << ")";
}


Notebook::~Notebook() throw() {
}


void Notebook::__set_guid(const Guid& val) {
  this->guid = val;
__isset.guid = true;
}

void Notebook::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void Notebook::__set_updateSequenceNum(const int32_t val) {
  this->updateSequenceNum = val;
__isset.updateSequenceNum = true;
}

void Notebook::__set_defaultNotebook(const bool val) {
  this->defaultNotebook = val;
__isset.defaultNotebook = true;
}

void Notebook::__set_serviceCreated(const Timestamp val) {
  this->serviceCreated = val;
__isset.serviceCreated = true;
}

void Notebook::__set_serviceUpdated(const Timestamp val) {
  this->serviceUpdated = val;
__isset.serviceUpdated = true;
}

void Notebook::__set_publishing(const Publishing& val) {
  this->publishing = val;
__isset.publishing = true;
}

void Notebook::__set_published(const bool val) {
  this->published = val;
__isset.published = true;
}

void Notebook::__set_stack(const std::string& val) {
  this->stack = val;
__isset.stack = true;
}

void Notebook::__set_sharedNotebookIds(const std::vector<int64_t> & val) {
  this->sharedNotebookIds = val;
__isset.sharedNotebookIds = true;
}

void Notebook::__set_sharedNotebooks(const std::vector<SharedNotebook> & val) {
  this->sharedNotebooks = val;
__isset.sharedNotebooks = true;
}

void Notebook::__set_businessNotebook(const BusinessNotebook& val) {
  this->businessNotebook = val;
__isset.businessNotebook = true;
}

void Notebook::__set_contact(const User& val) {
  this->contact = val;
__isset.contact = true;
}

void Notebook::__set_restrictions(const NotebookRestrictions& val) {
  this->restrictions = val;
__isset.restrictions = true;
}

void Notebook::__set_recipientSettings(const NotebookRecipientSettings& val) {
  this->recipientSettings = val;
__isset.recipientSettings = true;
}

uint32_t Notebook::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guid);
          this->__isset.guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->updateSequenceNum);
          this->__isset.updateSequenceNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->defaultNotebook);
          this->__isset.defaultNotebook = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceCreated);
          this->__isset.serviceCreated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceUpdated);
          this->__isset.serviceUpdated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->publishing.read(iprot);
          this->__isset.publishing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->published);
          this->__isset.published = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stack);
          this->__isset.stack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sharedNotebookIds.clear();
            uint32_t _size125;
            ::apache::thrift::protocol::TType _etype128;
            xfer += iprot->readListBegin(_etype128, _size125);
            this->sharedNotebookIds.resize(_size125);
            uint32_t _i129;
            for (_i129 = 0; _i129 < _size125; ++_i129)
            {
              xfer += iprot->readI64(this->sharedNotebookIds[_i129]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sharedNotebookIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sharedNotebooks.clear();
            uint32_t _size130;
            ::apache::thrift::protocol::TType _etype133;
            xfer += iprot->readListBegin(_etype133, _size130);
            this->sharedNotebooks.resize(_size130);
            uint32_t _i134;
            for (_i134 = 0; _i134 < _size130; ++_i134)
            {
              xfer += this->sharedNotebooks[_i134].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sharedNotebooks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->businessNotebook.read(iprot);
          this->__isset.businessNotebook = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->contact.read(iprot);
          this->__isset.contact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->restrictions.read(iprot);
          this->__isset.restrictions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->recipientSettings.read(iprot);
          this->__isset.recipientSettings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Notebook::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Notebook");

  if (this->__isset.guid) {
    xfer += oprot->writeFieldBegin("guid", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updateSequenceNum) {
    xfer += oprot->writeFieldBegin("updateSequenceNum", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->updateSequenceNum);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.defaultNotebook) {
    xfer += oprot->writeFieldBegin("defaultNotebook", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->defaultNotebook);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serviceCreated) {
    xfer += oprot->writeFieldBegin("serviceCreated", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->serviceCreated);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serviceUpdated) {
    xfer += oprot->writeFieldBegin("serviceUpdated", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->serviceUpdated);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.publishing) {
    xfer += oprot->writeFieldBegin("publishing", ::apache::thrift::protocol::T_STRUCT, 10);
    xfer += this->publishing.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.published) {
    xfer += oprot->writeFieldBegin("published", ::apache::thrift::protocol::T_BOOL, 11);
    xfer += oprot->writeBool(this->published);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stack) {
    xfer += oprot->writeFieldBegin("stack", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->stack);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sharedNotebookIds) {
    xfer += oprot->writeFieldBegin("sharedNotebookIds", ::apache::thrift::protocol::T_LIST, 13);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->sharedNotebookIds.size()));
      std::vector<int64_t> ::const_iterator _iter135;
      for (_iter135 = this->sharedNotebookIds.begin(); _iter135 != this->sharedNotebookIds.end(); ++_iter135)
      {
        xfer += oprot->writeI64((*_iter135));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sharedNotebooks) {
    xfer += oprot->writeFieldBegin("sharedNotebooks", ::apache::thrift::protocol::T_LIST, 14);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sharedNotebooks.size()));
      std::vector<SharedNotebook> ::const_iterator _iter136;
      for (_iter136 = this->sharedNotebooks.begin(); _iter136 != this->sharedNotebooks.end(); ++_iter136)
      {
        xfer += (*_iter136).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.businessNotebook) {
    xfer += oprot->writeFieldBegin("businessNotebook", ::apache::thrift::protocol::T_STRUCT, 15);
    xfer += this->businessNotebook.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contact) {
    xfer += oprot->writeFieldBegin("contact", ::apache::thrift::protocol::T_STRUCT, 16);
    xfer += this->contact.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.restrictions) {
    xfer += oprot->writeFieldBegin("restrictions", ::apache::thrift::protocol::T_STRUCT, 17);
    xfer += this->restrictions.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recipientSettings) {
    xfer += oprot->writeFieldBegin("recipientSettings", ::apache::thrift::protocol::T_STRUCT, 18);
    xfer += this->recipientSettings.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Notebook &a, Notebook &b) {
  using ::std::swap;
  swap(a.guid, b.guid);
  swap(a.name, b.name);
  swap(a.updateSequenceNum, b.updateSequenceNum);
  swap(a.defaultNotebook, b.defaultNotebook);
  swap(a.serviceCreated, b.serviceCreated);
  swap(a.serviceUpdated, b.serviceUpdated);
  swap(a.publishing, b.publishing);
  swap(a.published, b.published);
  swap(a.stack, b.stack);
  swap(a.sharedNotebookIds, b.sharedNotebookIds);
  swap(a.sharedNotebooks, b.sharedNotebooks);
  swap(a.businessNotebook, b.businessNotebook);
  swap(a.contact, b.contact);
  swap(a.restrictions, b.restrictions);
  swap(a.recipientSettings, b.recipientSettings);
  swap(a.__isset, b.__isset);
}

Notebook::Notebook(const Notebook& other137) {
  guid = other137.guid;
  name = other137.name;
  updateSequenceNum = other137.updateSequenceNum;
  defaultNotebook = other137.defaultNotebook;
  serviceCreated = other137.serviceCreated;
  serviceUpdated = other137.serviceUpdated;
  publishing = other137.publishing;
  published = other137.published;
  stack = other137.stack;
  sharedNotebookIds = other137.sharedNotebookIds;
  sharedNotebooks = other137.sharedNotebooks;
  businessNotebook = other137.businessNotebook;
  contact = other137.contact;
  restrictions = other137.restrictions;
  recipientSettings = other137.recipientSettings;
  __isset = other137.__isset;
}
Notebook& Notebook::operator=(const Notebook& other138) {
  guid = other138.guid;
  name = other138.name;
  updateSequenceNum = other138.updateSequenceNum;
  defaultNotebook = other138.defaultNotebook;
  serviceCreated = other138.serviceCreated;
  serviceUpdated = other138.serviceUpdated;
  publishing = other138.publishing;
  published = other138.published;
  stack = other138.stack;
  sharedNotebookIds = other138.sharedNotebookIds;
  sharedNotebooks = other138.sharedNotebooks;
  businessNotebook = other138.businessNotebook;
  contact = other138.contact;
  restrictions = other138.restrictions;
  recipientSettings = other138.recipientSettings;
  __isset = other138.__isset;
  return *this;
}
void Notebook::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Notebook(";
  out << "guid="; (__isset.guid ? (out << to_string(guid)) : (out << "<null>"));
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "updateSequenceNum="; (__isset.updateSequenceNum ? (out << to_string(updateSequenceNum)) : (out << "<null>"));
  out << ", " << "defaultNotebook="; (__isset.defaultNotebook ? (out << to_string(defaultNotebook)) : (out << "<null>"));
  out << ", " << "serviceCreated="; (__isset.serviceCreated ? (out << to_string(serviceCreated)) : (out << "<null>"));
  out << ", " << "serviceUpdated="; (__isset.serviceUpdated ? (out << to_string(serviceUpdated)) : (out << "<null>"));
  out << ", " << "publishing="; (__isset.publishing ? (out << to_string(publishing)) : (out << "<null>"));
  out << ", " << "published="; (__isset.published ? (out << to_string(published)) : (out << "<null>"));
  out << ", " << "stack="; (__isset.stack ? (out << to_string(stack)) : (out << "<null>"));
  out << ", " << "sharedNotebookIds="; (__isset.sharedNotebookIds ? (out << to_string(sharedNotebookIds)) : (out << "<null>"));
  out << ", " << "sharedNotebooks="; (__isset.sharedNotebooks ? (out << to_string(sharedNotebooks)) : (out << "<null>"));
  out << ", " << "businessNotebook="; (__isset.businessNotebook ? (out << to_string(businessNotebook)) : (out << "<null>"));
  out << ", " << "contact="; (__isset.contact ? (out << to_string(contact)) : (out << "<null>"));
  out << ", " << "restrictions="; (__isset.restrictions ? (out << to_string(restrictions)) : (out << "<null>"));
  out << ", " << "recipientSettings="; (__isset.recipientSettings ? (out << to_string(recipientSettings)) : (out << "<null>"));
  out << ")";
}


LinkedNotebook::~LinkedNotebook() throw() {
}


void LinkedNotebook::__set_shareName(const std::string& val) {
  this->shareName = val;
__isset.shareName = true;
}

void LinkedNotebook::__set_username(const std::string& val) {
  this->username = val;
__isset.username = true;
}

void LinkedNotebook::__set_shardId(const std::string& val) {
  this->shardId = val;
__isset.shardId = true;
}

void LinkedNotebook::__set_sharedNotebookGlobalId(const std::string& val) {
  this->sharedNotebookGlobalId = val;
__isset.sharedNotebookGlobalId = true;
}

void LinkedNotebook::__set_uri(const std::string& val) {
  this->uri = val;
__isset.uri = true;
}

void LinkedNotebook::__set_guid(const Guid& val) {
  this->guid = val;
__isset.guid = true;
}

void LinkedNotebook::__set_updateSequenceNum(const int32_t val) {
  this->updateSequenceNum = val;
__isset.updateSequenceNum = true;
}

void LinkedNotebook::__set_noteStoreUrl(const std::string& val) {
  this->noteStoreUrl = val;
__isset.noteStoreUrl = true;
}

void LinkedNotebook::__set_webApiUrlPrefix(const std::string& val) {
  this->webApiUrlPrefix = val;
__isset.webApiUrlPrefix = true;
}

void LinkedNotebook::__set_stack(const std::string& val) {
  this->stack = val;
__isset.stack = true;
}

void LinkedNotebook::__set_businessId(const int32_t val) {
  this->businessId = val;
__isset.businessId = true;
}

uint32_t LinkedNotebook::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->shareName);
          this->__isset.shareName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->shardId);
          this->__isset.shardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sharedNotebookGlobalId);
          this->__isset.sharedNotebookGlobalId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uri);
          this->__isset.uri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guid);
          this->__isset.guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->updateSequenceNum);
          this->__isset.updateSequenceNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->noteStoreUrl);
          this->__isset.noteStoreUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->webApiUrlPrefix);
          this->__isset.webApiUrlPrefix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stack);
          this->__isset.stack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->businessId);
          this->__isset.businessId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LinkedNotebook::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LinkedNotebook");

  if (this->__isset.shareName) {
    xfer += oprot->writeFieldBegin("shareName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->shareName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.username) {
    xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->username);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shardId) {
    xfer += oprot->writeFieldBegin("shardId", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->shardId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sharedNotebookGlobalId) {
    xfer += oprot->writeFieldBegin("sharedNotebookGlobalId", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->sharedNotebookGlobalId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uri) {
    xfer += oprot->writeFieldBegin("uri", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->uri);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guid) {
    xfer += oprot->writeFieldBegin("guid", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updateSequenceNum) {
    xfer += oprot->writeFieldBegin("updateSequenceNum", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->updateSequenceNum);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noteStoreUrl) {
    xfer += oprot->writeFieldBegin("noteStoreUrl", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->noteStoreUrl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.webApiUrlPrefix) {
    xfer += oprot->writeFieldBegin("webApiUrlPrefix", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->webApiUrlPrefix);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stack) {
    xfer += oprot->writeFieldBegin("stack", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->stack);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.businessId) {
    xfer += oprot->writeFieldBegin("businessId", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->businessId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LinkedNotebook &a, LinkedNotebook &b) {
  using ::std::swap;
  swap(a.shareName, b.shareName);
  swap(a.username, b.username);
  swap(a.shardId, b.shardId);
  swap(a.sharedNotebookGlobalId, b.sharedNotebookGlobalId);
  swap(a.uri, b.uri);
  swap(a.guid, b.guid);
  swap(a.updateSequenceNum, b.updateSequenceNum);
  swap(a.noteStoreUrl, b.noteStoreUrl);
  swap(a.webApiUrlPrefix, b.webApiUrlPrefix);
  swap(a.stack, b.stack);
  swap(a.businessId, b.businessId);
  swap(a.__isset, b.__isset);
}

LinkedNotebook::LinkedNotebook(const LinkedNotebook& other139) {
  shareName = other139.shareName;
  username = other139.username;
  shardId = other139.shardId;
  sharedNotebookGlobalId = other139.sharedNotebookGlobalId;
  uri = other139.uri;
  guid = other139.guid;
  updateSequenceNum = other139.updateSequenceNum;
  noteStoreUrl = other139.noteStoreUrl;
  webApiUrlPrefix = other139.webApiUrlPrefix;
  stack = other139.stack;
  businessId = other139.businessId;
  __isset = other139.__isset;
}
LinkedNotebook& LinkedNotebook::operator=(const LinkedNotebook& other140) {
  shareName = other140.shareName;
  username = other140.username;
  shardId = other140.shardId;
  sharedNotebookGlobalId = other140.sharedNotebookGlobalId;
  uri = other140.uri;
  guid = other140.guid;
  updateSequenceNum = other140.updateSequenceNum;
  noteStoreUrl = other140.noteStoreUrl;
  webApiUrlPrefix = other140.webApiUrlPrefix;
  stack = other140.stack;
  businessId = other140.businessId;
  __isset = other140.__isset;
  return *this;
}
void LinkedNotebook::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LinkedNotebook(";
  out << "shareName="; (__isset.shareName ? (out << to_string(shareName)) : (out << "<null>"));
  out << ", " << "username="; (__isset.username ? (out << to_string(username)) : (out << "<null>"));
  out << ", " << "shardId="; (__isset.shardId ? (out << to_string(shardId)) : (out << "<null>"));
  out << ", " << "sharedNotebookGlobalId="; (__isset.sharedNotebookGlobalId ? (out << to_string(sharedNotebookGlobalId)) : (out << "<null>"));
  out << ", " << "uri="; (__isset.uri ? (out << to_string(uri)) : (out << "<null>"));
  out << ", " << "guid="; (__isset.guid ? (out << to_string(guid)) : (out << "<null>"));
  out << ", " << "updateSequenceNum="; (__isset.updateSequenceNum ? (out << to_string(updateSequenceNum)) : (out << "<null>"));
  out << ", " << "noteStoreUrl="; (__isset.noteStoreUrl ? (out << to_string(noteStoreUrl)) : (out << "<null>"));
  out << ", " << "webApiUrlPrefix="; (__isset.webApiUrlPrefix ? (out << to_string(webApiUrlPrefix)) : (out << "<null>"));
  out << ", " << "stack="; (__isset.stack ? (out << to_string(stack)) : (out << "<null>"));
  out << ", " << "businessId="; (__isset.businessId ? (out << to_string(businessId)) : (out << "<null>"));
  out << ")";
}


NotebookDescriptor::~NotebookDescriptor() throw() {
}


void NotebookDescriptor::__set_guid(const Guid& val) {
  this->guid = val;
__isset.guid = true;
}

void NotebookDescriptor::__set_notebookDisplayName(const std::string& val) {
  this->notebookDisplayName = val;
__isset.notebookDisplayName = true;
}

void NotebookDescriptor::__set_contactName(const std::string& val) {
  this->contactName = val;
__isset.contactName = true;
}

void NotebookDescriptor::__set_hasSharedNotebook(const bool val) {
  this->hasSharedNotebook = val;
__isset.hasSharedNotebook = true;
}

void NotebookDescriptor::__set_joinedUserCount(const int32_t val) {
  this->joinedUserCount = val;
__isset.joinedUserCount = true;
}

uint32_t NotebookDescriptor::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guid);
          this->__isset.guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notebookDisplayName);
          this->__isset.notebookDisplayName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contactName);
          this->__isset.contactName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasSharedNotebook);
          this->__isset.hasSharedNotebook = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->joinedUserCount);
          this->__isset.joinedUserCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NotebookDescriptor::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NotebookDescriptor");

  if (this->__isset.guid) {
    xfer += oprot->writeFieldBegin("guid", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.notebookDisplayName) {
    xfer += oprot->writeFieldBegin("notebookDisplayName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->notebookDisplayName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contactName) {
    xfer += oprot->writeFieldBegin("contactName", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->contactName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hasSharedNotebook) {
    xfer += oprot->writeFieldBegin("hasSharedNotebook", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->hasSharedNotebook);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.joinedUserCount) {
    xfer += oprot->writeFieldBegin("joinedUserCount", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->joinedUserCount);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotebookDescriptor &a, NotebookDescriptor &b) {
  using ::std::swap;
  swap(a.guid, b.guid);
  swap(a.notebookDisplayName, b.notebookDisplayName);
  swap(a.contactName, b.contactName);
  swap(a.hasSharedNotebook, b.hasSharedNotebook);
  swap(a.joinedUserCount, b.joinedUserCount);
  swap(a.__isset, b.__isset);
}

NotebookDescriptor::NotebookDescriptor(const NotebookDescriptor& other141) {
  guid = other141.guid;
  notebookDisplayName = other141.notebookDisplayName;
  contactName = other141.contactName;
  hasSharedNotebook = other141.hasSharedNotebook;
  joinedUserCount = other141.joinedUserCount;
  __isset = other141.__isset;
}
NotebookDescriptor& NotebookDescriptor::operator=(const NotebookDescriptor& other142) {
  guid = other142.guid;
  notebookDisplayName = other142.notebookDisplayName;
  contactName = other142.contactName;
  hasSharedNotebook = other142.hasSharedNotebook;
  joinedUserCount = other142.joinedUserCount;
  __isset = other142.__isset;
  return *this;
}
void NotebookDescriptor::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotebookDescriptor(";
  out << "guid="; (__isset.guid ? (out << to_string(guid)) : (out << "<null>"));
  out << ", " << "notebookDisplayName="; (__isset.notebookDisplayName ? (out << to_string(notebookDisplayName)) : (out << "<null>"));
  out << ", " << "contactName="; (__isset.contactName ? (out << to_string(contactName)) : (out << "<null>"));
  out << ", " << "hasSharedNotebook="; (__isset.hasSharedNotebook ? (out << to_string(hasSharedNotebook)) : (out << "<null>"));
  out << ", " << "joinedUserCount="; (__isset.joinedUserCount ? (out << to_string(joinedUserCount)) : (out << "<null>"));
  out << ")";
}


UserProfile::~UserProfile() throw() {
}


void UserProfile::__set_id(const UserID val) {
  this->id = val;
__isset.id = true;
}

void UserProfile::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void UserProfile::__set_email(const std::string& val) {
  this->email = val;
__isset.email = true;
}

void UserProfile::__set_username(const std::string& val) {
  this->username = val;
__isset.username = true;
}

void UserProfile::__set_attributes(const BusinessUserAttributes& val) {
  this->attributes = val;
__isset.attributes = true;
}

void UserProfile::__set_joined(const Timestamp val) {
  this->joined = val;
__isset.joined = true;
}

void UserProfile::__set_photoLastUpdated(const Timestamp val) {
  this->photoLastUpdated = val;
__isset.photoLastUpdated = true;
}

void UserProfile::__set_photoUrl(const std::string& val) {
  this->photoUrl = val;
__isset.photoUrl = true;
}

void UserProfile::__set_role(const BusinessUserRole::type val) {
  this->role = val;
__isset.role = true;
}

uint32_t UserProfile::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->attributes.read(iprot);
          this->__isset.attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->joined);
          this->__isset.joined = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->photoLastUpdated);
          this->__isset.photoLastUpdated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->photoUrl);
          this->__isset.photoUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast143;
          xfer += iprot->readI32(ecast143);
          this->role = (BusinessUserRole::type)ecast143;
          this->__isset.role = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserProfile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserProfile");

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.email) {
    xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->email);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.username) {
    xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->username);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributes) {
    xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->attributes.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.joined) {
    xfer += oprot->writeFieldBegin("joined", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->joined);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.photoLastUpdated) {
    xfer += oprot->writeFieldBegin("photoLastUpdated", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->photoLastUpdated);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.photoUrl) {
    xfer += oprot->writeFieldBegin("photoUrl", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->photoUrl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.role) {
    xfer += oprot->writeFieldBegin("role", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32((int32_t)this->role);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserProfile &a, UserProfile &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.email, b.email);
  swap(a.username, b.username);
  swap(a.attributes, b.attributes);
  swap(a.joined, b.joined);
  swap(a.photoLastUpdated, b.photoLastUpdated);
  swap(a.photoUrl, b.photoUrl);
  swap(a.role, b.role);
  swap(a.__isset, b.__isset);
}

UserProfile::UserProfile(const UserProfile& other144) {
  id = other144.id;
  name = other144.name;
  email = other144.email;
  username = other144.username;
  attributes = other144.attributes;
  joined = other144.joined;
  photoLastUpdated = other144.photoLastUpdated;
  photoUrl = other144.photoUrl;
  role = other144.role;
  __isset = other144.__isset;
}
UserProfile& UserProfile::operator=(const UserProfile& other145) {
  id = other145.id;
  name = other145.name;
  email = other145.email;
  username = other145.username;
  attributes = other145.attributes;
  joined = other145.joined;
  photoLastUpdated = other145.photoLastUpdated;
  photoUrl = other145.photoUrl;
  role = other145.role;
  __isset = other145.__isset;
  return *this;
}
void UserProfile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserProfile(";
  out << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "email="; (__isset.email ? (out << to_string(email)) : (out << "<null>"));
  out << ", " << "username="; (__isset.username ? (out << to_string(username)) : (out << "<null>"));
  out << ", " << "attributes="; (__isset.attributes ? (out << to_string(attributes)) : (out << "<null>"));
  out << ", " << "joined="; (__isset.joined ? (out << to_string(joined)) : (out << "<null>"));
  out << ", " << "photoLastUpdated="; (__isset.photoLastUpdated ? (out << to_string(photoLastUpdated)) : (out << "<null>"));
  out << ", " << "photoUrl="; (__isset.photoUrl ? (out << to_string(photoUrl)) : (out << "<null>"));
  out << ", " << "role="; (__isset.role ? (out << to_string(role)) : (out << "<null>"));
  out << ")";
}


RelatedContentImage::~RelatedContentImage() throw() {
}


void RelatedContentImage::__set_url(const std::string& val) {
  this->url = val;
__isset.url = true;
}

void RelatedContentImage::__set_width(const int32_t val) {
  this->width = val;
__isset.width = true;
}

void RelatedContentImage::__set_height(const int32_t val) {
  this->height = val;
__isset.height = true;
}

void RelatedContentImage::__set_pixelRatio(const double val) {
  this->pixelRatio = val;
__isset.pixelRatio = true;
}

void RelatedContentImage::__set_fileSize(const int32_t val) {
  this->fileSize = val;
__isset.fileSize = true;
}

uint32_t RelatedContentImage::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->width);
          this->__isset.width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->height);
          this->__isset.height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pixelRatio);
          this->__isset.pixelRatio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fileSize);
          this->__isset.fileSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RelatedContentImage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RelatedContentImage");

  if (this->__isset.url) {
    xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->url);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.width) {
    xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->width);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.height) {
    xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->height);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pixelRatio) {
    xfer += oprot->writeFieldBegin("pixelRatio", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->pixelRatio);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fileSize) {
    xfer += oprot->writeFieldBegin("fileSize", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->fileSize);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RelatedContentImage &a, RelatedContentImage &b) {
  using ::std::swap;
  swap(a.url, b.url);
  swap(a.width, b.width);
  swap(a.height, b.height);
  swap(a.pixelRatio, b.pixelRatio);
  swap(a.fileSize, b.fileSize);
  swap(a.__isset, b.__isset);
}

RelatedContentImage::RelatedContentImage(const RelatedContentImage& other146) {
  url = other146.url;
  width = other146.width;
  height = other146.height;
  pixelRatio = other146.pixelRatio;
  fileSize = other146.fileSize;
  __isset = other146.__isset;
}
RelatedContentImage& RelatedContentImage::operator=(const RelatedContentImage& other147) {
  url = other147.url;
  width = other147.width;
  height = other147.height;
  pixelRatio = other147.pixelRatio;
  fileSize = other147.fileSize;
  __isset = other147.__isset;
  return *this;
}
void RelatedContentImage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RelatedContentImage(";
  out << "url="; (__isset.url ? (out << to_string(url)) : (out << "<null>"));
  out << ", " << "width="; (__isset.width ? (out << to_string(width)) : (out << "<null>"));
  out << ", " << "height="; (__isset.height ? (out << to_string(height)) : (out << "<null>"));
  out << ", " << "pixelRatio="; (__isset.pixelRatio ? (out << to_string(pixelRatio)) : (out << "<null>"));
  out << ", " << "fileSize="; (__isset.fileSize ? (out << to_string(fileSize)) : (out << "<null>"));
  out << ")";
}


RelatedContent::~RelatedContent() throw() {
}


void RelatedContent::__set_contentId(const std::string& val) {
  this->contentId = val;
__isset.contentId = true;
}

void RelatedContent::__set_title(const std::string& val) {
  this->title = val;
__isset.title = true;
}

void RelatedContent::__set_url(const std::string& val) {
  this->url = val;
__isset.url = true;
}

void RelatedContent::__set_sourceId(const std::string& val) {
  this->sourceId = val;
__isset.sourceId = true;
}

void RelatedContent::__set_sourceUrl(const std::string& val) {
  this->sourceUrl = val;
__isset.sourceUrl = true;
}

void RelatedContent::__set_sourceFaviconUrl(const std::string& val) {
  this->sourceFaviconUrl = val;
__isset.sourceFaviconUrl = true;
}

void RelatedContent::__set_sourceName(const std::string& val) {
  this->sourceName = val;
__isset.sourceName = true;
}

void RelatedContent::__set_date(const Timestamp val) {
  this->date = val;
__isset.date = true;
}

void RelatedContent::__set_teaser(const std::string& val) {
  this->teaser = val;
__isset.teaser = true;
}

void RelatedContent::__set_thumbnails(const std::vector<RelatedContentImage> & val) {
  this->thumbnails = val;
__isset.thumbnails = true;
}

void RelatedContent::__set_contentType(const RelatedContentType::type val) {
  this->contentType = val;
__isset.contentType = true;
}

void RelatedContent::__set_accessType(const RelatedContentAccess::type val) {
  this->accessType = val;
__isset.accessType = true;
}

void RelatedContent::__set_visibleUrl(const std::string& val) {
  this->visibleUrl = val;
__isset.visibleUrl = true;
}

void RelatedContent::__set_clipUrl(const std::string& val) {
  this->clipUrl = val;
__isset.clipUrl = true;
}

void RelatedContent::__set_contact(const Contact& val) {
  this->contact = val;
__isset.contact = true;
}

void RelatedContent::__set_authors(const std::vector<std::string> & val) {
  this->authors = val;
__isset.authors = true;
}

uint32_t RelatedContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contentId);
          this->__isset.contentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sourceId);
          this->__isset.sourceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sourceUrl);
          this->__isset.sourceUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sourceFaviconUrl);
          this->__isset.sourceFaviconUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sourceName);
          this->__isset.sourceName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->date);
          this->__isset.date = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->teaser);
          this->__isset.teaser = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thumbnails.clear();
            uint32_t _size148;
            ::apache::thrift::protocol::TType _etype151;
            xfer += iprot->readListBegin(_etype151, _size148);
            this->thumbnails.resize(_size148);
            uint32_t _i152;
            for (_i152 = 0; _i152 < _size148; ++_i152)
            {
              xfer += this->thumbnails[_i152].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thumbnails = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast153;
          xfer += iprot->readI32(ecast153);
          this->contentType = (RelatedContentType::type)ecast153;
          this->__isset.contentType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast154;
          xfer += iprot->readI32(ecast154);
          this->accessType = (RelatedContentAccess::type)ecast154;
          this->__isset.accessType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->visibleUrl);
          this->__isset.visibleUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clipUrl);
          this->__isset.clipUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->contact.read(iprot);
          this->__isset.contact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->authors.clear();
            uint32_t _size155;
            ::apache::thrift::protocol::TType _etype158;
            xfer += iprot->readListBegin(_etype158, _size155);
            this->authors.resize(_size155);
            uint32_t _i159;
            for (_i159 = 0; _i159 < _size155; ++_i159)
            {
              xfer += iprot->readString(this->authors[_i159]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.authors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RelatedContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RelatedContent");

  if (this->__isset.contentId) {
    xfer += oprot->writeFieldBegin("contentId", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->contentId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.title) {
    xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->title);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.url) {
    xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->url);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sourceId) {
    xfer += oprot->writeFieldBegin("sourceId", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->sourceId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sourceUrl) {
    xfer += oprot->writeFieldBegin("sourceUrl", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->sourceUrl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sourceFaviconUrl) {
    xfer += oprot->writeFieldBegin("sourceFaviconUrl", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->sourceFaviconUrl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sourceName) {
    xfer += oprot->writeFieldBegin("sourceName", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->sourceName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.date) {
    xfer += oprot->writeFieldBegin("date", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->date);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.teaser) {
    xfer += oprot->writeFieldBegin("teaser", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->teaser);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.thumbnails) {
    xfer += oprot->writeFieldBegin("thumbnails", ::apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thumbnails.size()));
      std::vector<RelatedContentImage> ::const_iterator _iter160;
      for (_iter160 = this->thumbnails.begin(); _iter160 != this->thumbnails.end(); ++_iter160)
      {
        xfer += (*_iter160).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contentType) {
    xfer += oprot->writeFieldBegin("contentType", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32((int32_t)this->contentType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.accessType) {
    xfer += oprot->writeFieldBegin("accessType", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32((int32_t)this->accessType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.visibleUrl) {
    xfer += oprot->writeFieldBegin("visibleUrl", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->visibleUrl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.clipUrl) {
    xfer += oprot->writeFieldBegin("clipUrl", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->clipUrl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contact) {
    xfer += oprot->writeFieldBegin("contact", ::apache::thrift::protocol::T_STRUCT, 15);
    xfer += this->contact.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.authors) {
    xfer += oprot->writeFieldBegin("authors", ::apache::thrift::protocol::T_LIST, 16);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->authors.size()));
      std::vector<std::string> ::const_iterator _iter161;
      for (_iter161 = this->authors.begin(); _iter161 != this->authors.end(); ++_iter161)
      {
        xfer += oprot->writeString((*_iter161));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RelatedContent &a, RelatedContent &b) {
  using ::std::swap;
  swap(a.contentId, b.contentId);
  swap(a.title, b.title);
  swap(a.url, b.url);
  swap(a.sourceId, b.sourceId);
  swap(a.sourceUrl, b.sourceUrl);
  swap(a.sourceFaviconUrl, b.sourceFaviconUrl);
  swap(a.sourceName, b.sourceName);
  swap(a.date, b.date);
  swap(a.teaser, b.teaser);
  swap(a.thumbnails, b.thumbnails);
  swap(a.contentType, b.contentType);
  swap(a.accessType, b.accessType);
  swap(a.visibleUrl, b.visibleUrl);
  swap(a.clipUrl, b.clipUrl);
  swap(a.contact, b.contact);
  swap(a.authors, b.authors);
  swap(a.__isset, b.__isset);
}

RelatedContent::RelatedContent(const RelatedContent& other162) {
  contentId = other162.contentId;
  title = other162.title;
  url = other162.url;
  sourceId = other162.sourceId;
  sourceUrl = other162.sourceUrl;
  sourceFaviconUrl = other162.sourceFaviconUrl;
  sourceName = other162.sourceName;
  date = other162.date;
  teaser = other162.teaser;
  thumbnails = other162.thumbnails;
  contentType = other162.contentType;
  accessType = other162.accessType;
  visibleUrl = other162.visibleUrl;
  clipUrl = other162.clipUrl;
  contact = other162.contact;
  authors = other162.authors;
  __isset = other162.__isset;
}
RelatedContent& RelatedContent::operator=(const RelatedContent& other163) {
  contentId = other163.contentId;
  title = other163.title;
  url = other163.url;
  sourceId = other163.sourceId;
  sourceUrl = other163.sourceUrl;
  sourceFaviconUrl = other163.sourceFaviconUrl;
  sourceName = other163.sourceName;
  date = other163.date;
  teaser = other163.teaser;
  thumbnails = other163.thumbnails;
  contentType = other163.contentType;
  accessType = other163.accessType;
  visibleUrl = other163.visibleUrl;
  clipUrl = other163.clipUrl;
  contact = other163.contact;
  authors = other163.authors;
  __isset = other163.__isset;
  return *this;
}
void RelatedContent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RelatedContent(";
  out << "contentId="; (__isset.contentId ? (out << to_string(contentId)) : (out << "<null>"));
  out << ", " << "title="; (__isset.title ? (out << to_string(title)) : (out << "<null>"));
  out << ", " << "url="; (__isset.url ? (out << to_string(url)) : (out << "<null>"));
  out << ", " << "sourceId="; (__isset.sourceId ? (out << to_string(sourceId)) : (out << "<null>"));
  out << ", " << "sourceUrl="; (__isset.sourceUrl ? (out << to_string(sourceUrl)) : (out << "<null>"));
  out << ", " << "sourceFaviconUrl="; (__isset.sourceFaviconUrl ? (out << to_string(sourceFaviconUrl)) : (out << "<null>"));
  out << ", " << "sourceName="; (__isset.sourceName ? (out << to_string(sourceName)) : (out << "<null>"));
  out << ", " << "date="; (__isset.date ? (out << to_string(date)) : (out << "<null>"));
  out << ", " << "teaser="; (__isset.teaser ? (out << to_string(teaser)) : (out << "<null>"));
  out << ", " << "thumbnails="; (__isset.thumbnails ? (out << to_string(thumbnails)) : (out << "<null>"));
  out << ", " << "contentType="; (__isset.contentType ? (out << to_string(contentType)) : (out << "<null>"));
  out << ", " << "accessType="; (__isset.accessType ? (out << to_string(accessType)) : (out << "<null>"));
  out << ", " << "visibleUrl="; (__isset.visibleUrl ? (out << to_string(visibleUrl)) : (out << "<null>"));
  out << ", " << "clipUrl="; (__isset.clipUrl ? (out << to_string(clipUrl)) : (out << "<null>"));
  out << ", " << "contact="; (__isset.contact ? (out << to_string(contact)) : (out << "<null>"));
  out << ", " << "authors="; (__isset.authors ? (out << to_string(authors)) : (out << "<null>"));
  out << ")";
}


BusinessInvitation::~BusinessInvitation() throw() {
}


void BusinessInvitation::__set_businessId(const int32_t val) {
  this->businessId = val;
__isset.businessId = true;
}

void BusinessInvitation::__set_email(const std::string& val) {
  this->email = val;
__isset.email = true;
}

void BusinessInvitation::__set_role(const BusinessUserRole::type val) {
  this->role = val;
__isset.role = true;
}

void BusinessInvitation::__set_status(const BusinessInvitationStatus::type val) {
  this->status = val;
__isset.status = true;
}

void BusinessInvitation::__set_requesterId(const UserID val) {
  this->requesterId = val;
__isset.requesterId = true;
}

void BusinessInvitation::__set_fromWorkChat(const bool val) {
  this->fromWorkChat = val;
__isset.fromWorkChat = true;
}

void BusinessInvitation::__set_created(const Timestamp val) {
  this->created = val;
__isset.created = true;
}

uint32_t BusinessInvitation::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->businessId);
          this->__isset.businessId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast164;
          xfer += iprot->readI32(ecast164);
          this->role = (BusinessUserRole::type)ecast164;
          this->__isset.role = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast165;
          xfer += iprot->readI32(ecast165);
          this->status = (BusinessInvitationStatus::type)ecast165;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->requesterId);
          this->__isset.requesterId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->fromWorkChat);
          this->__isset.fromWorkChat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->created);
          this->__isset.created = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BusinessInvitation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BusinessInvitation");

  if (this->__isset.businessId) {
    xfer += oprot->writeFieldBegin("businessId", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->businessId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.email) {
    xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->email);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.role) {
    xfer += oprot->writeFieldBegin("role", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->role);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.requesterId) {
    xfer += oprot->writeFieldBegin("requesterId", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->requesterId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fromWorkChat) {
    xfer += oprot->writeFieldBegin("fromWorkChat", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->fromWorkChat);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.created) {
    xfer += oprot->writeFieldBegin("created", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->created);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BusinessInvitation &a, BusinessInvitation &b) {
  using ::std::swap;
  swap(a.businessId, b.businessId);
  swap(a.email, b.email);
  swap(a.role, b.role);
  swap(a.status, b.status);
  swap(a.requesterId, b.requesterId);
  swap(a.fromWorkChat, b.fromWorkChat);
  swap(a.created, b.created);
  swap(a.__isset, b.__isset);
}

BusinessInvitation::BusinessInvitation(const BusinessInvitation& other166) {
  businessId = other166.businessId;
  email = other166.email;
  role = other166.role;
  status = other166.status;
  requesterId = other166.requesterId;
  fromWorkChat = other166.fromWorkChat;
  created = other166.created;
  __isset = other166.__isset;
}
BusinessInvitation& BusinessInvitation::operator=(const BusinessInvitation& other167) {
  businessId = other167.businessId;
  email = other167.email;
  role = other167.role;
  status = other167.status;
  requesterId = other167.requesterId;
  fromWorkChat = other167.fromWorkChat;
  created = other167.created;
  __isset = other167.__isset;
  return *this;
}
void BusinessInvitation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BusinessInvitation(";
  out << "businessId="; (__isset.businessId ? (out << to_string(businessId)) : (out << "<null>"));
  out << ", " << "email="; (__isset.email ? (out << to_string(email)) : (out << "<null>"));
  out << ", " << "role="; (__isset.role ? (out << to_string(role)) : (out << "<null>"));
  out << ", " << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ", " << "requesterId="; (__isset.requesterId ? (out << to_string(requesterId)) : (out << "<null>"));
  out << ", " << "fromWorkChat="; (__isset.fromWorkChat ? (out << to_string(fromWorkChat)) : (out << "<null>"));
  out << ", " << "created="; (__isset.created ? (out << to_string(created)) : (out << "<null>"));
  out << ")";
}


UserIdentity::~UserIdentity() throw() {
}


void UserIdentity::__set_type(const UserIdentityType::type val) {
  this->type = val;
__isset.type = true;
}

void UserIdentity::__set_stringIdentifier(const std::string& val) {
  this->stringIdentifier = val;
__isset.stringIdentifier = true;
}

void UserIdentity::__set_longIdentifier(const int64_t val) {
  this->longIdentifier = val;
__isset.longIdentifier = true;
}

uint32_t UserIdentity::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast168;
          xfer += iprot->readI32(ecast168);
          this->type = (UserIdentityType::type)ecast168;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stringIdentifier);
          this->__isset.stringIdentifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->longIdentifier);
          this->__isset.longIdentifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserIdentity::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserIdentity");

  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stringIdentifier) {
    xfer += oprot->writeFieldBegin("stringIdentifier", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->stringIdentifier);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.longIdentifier) {
    xfer += oprot->writeFieldBegin("longIdentifier", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->longIdentifier);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserIdentity &a, UserIdentity &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.stringIdentifier, b.stringIdentifier);
  swap(a.longIdentifier, b.longIdentifier);
  swap(a.__isset, b.__isset);
}

UserIdentity::UserIdentity(const UserIdentity& other169) {
  type = other169.type;
  stringIdentifier = other169.stringIdentifier;
  longIdentifier = other169.longIdentifier;
  __isset = other169.__isset;
}
UserIdentity& UserIdentity::operator=(const UserIdentity& other170) {
  type = other170.type;
  stringIdentifier = other170.stringIdentifier;
  longIdentifier = other170.longIdentifier;
  __isset = other170.__isset;
  return *this;
}
void UserIdentity::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserIdentity(";
  out << "type="; (__isset.type ? (out << to_string(type)) : (out << "<null>"));
  out << ", " << "stringIdentifier="; (__isset.stringIdentifier ? (out << to_string(stringIdentifier)) : (out << "<null>"));
  out << ", " << "longIdentifier="; (__isset.longIdentifier ? (out << to_string(longIdentifier)) : (out << "<null>"));
  out << ")";
}

}} // namespace
