/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "UserStore_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace evernote { namespace edam {


PublicUserInfo::~PublicUserInfo() throw() {
}


void PublicUserInfo::__set_userId(const  ::evernote::edam::UserID val) {
  this->userId = val;
}

void PublicUserInfo::__set_serviceLevel(const  ::evernote::edam::ServiceLevel::type val) {
  this->serviceLevel = val;
__isset.serviceLevel = true;
}

void PublicUserInfo::__set_username(const std::string& val) {
  this->username = val;
__isset.username = true;
}

void PublicUserInfo::__set_noteStoreUrl(const std::string& val) {
  this->noteStoreUrl = val;
__isset.noteStoreUrl = true;
}

void PublicUserInfo::__set_webApiUrlPrefix(const std::string& val) {
  this->webApiUrlPrefix = val;
__isset.webApiUrlPrefix = true;
}

uint32_t PublicUserInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_userId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userId);
          isset_userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->serviceLevel = ( ::evernote::edam::ServiceLevel::type)ecast0;
          this->__isset.serviceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->noteStoreUrl);
          this->__isset.noteStoreUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->webApiUrlPrefix);
          this->__isset.webApiUrlPrefix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_userId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PublicUserInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PublicUserInfo");

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->userId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.username) {
    xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->username);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noteStoreUrl) {
    xfer += oprot->writeFieldBegin("noteStoreUrl", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->noteStoreUrl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.webApiUrlPrefix) {
    xfer += oprot->writeFieldBegin("webApiUrlPrefix", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->webApiUrlPrefix);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serviceLevel) {
    xfer += oprot->writeFieldBegin("serviceLevel", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32((int32_t)this->serviceLevel);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PublicUserInfo &a, PublicUserInfo &b) {
  using ::std::swap;
  swap(a.userId, b.userId);
  swap(a.serviceLevel, b.serviceLevel);
  swap(a.username, b.username);
  swap(a.noteStoreUrl, b.noteStoreUrl);
  swap(a.webApiUrlPrefix, b.webApiUrlPrefix);
  swap(a.__isset, b.__isset);
}

PublicUserInfo::PublicUserInfo(const PublicUserInfo& other1) {
  userId = other1.userId;
  serviceLevel = other1.serviceLevel;
  username = other1.username;
  noteStoreUrl = other1.noteStoreUrl;
  webApiUrlPrefix = other1.webApiUrlPrefix;
  __isset = other1.__isset;
}
PublicUserInfo& PublicUserInfo::operator=(const PublicUserInfo& other2) {
  userId = other2.userId;
  serviceLevel = other2.serviceLevel;
  username = other2.username;
  noteStoreUrl = other2.noteStoreUrl;
  webApiUrlPrefix = other2.webApiUrlPrefix;
  __isset = other2.__isset;
  return *this;
}
void PublicUserInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PublicUserInfo(";
  out << "userId=" << to_string(userId);
  out << ", " << "serviceLevel="; (__isset.serviceLevel ? (out << to_string(serviceLevel)) : (out << "<null>"));
  out << ", " << "username="; (__isset.username ? (out << to_string(username)) : (out << "<null>"));
  out << ", " << "noteStoreUrl="; (__isset.noteStoreUrl ? (out << to_string(noteStoreUrl)) : (out << "<null>"));
  out << ", " << "webApiUrlPrefix="; (__isset.webApiUrlPrefix ? (out << to_string(webApiUrlPrefix)) : (out << "<null>"));
  out << ")";
}


UserUrls::~UserUrls() throw() {
}


void UserUrls::__set_noteStoreUrl(const std::string& val) {
  this->noteStoreUrl = val;
__isset.noteStoreUrl = true;
}

void UserUrls::__set_webApiUrlPrefix(const std::string& val) {
  this->webApiUrlPrefix = val;
__isset.webApiUrlPrefix = true;
}

void UserUrls::__set_userStoreUrl(const std::string& val) {
  this->userStoreUrl = val;
__isset.userStoreUrl = true;
}

void UserUrls::__set_utilityUrl(const std::string& val) {
  this->utilityUrl = val;
__isset.utilityUrl = true;
}

void UserUrls::__set_messageStoreUrl(const std::string& val) {
  this->messageStoreUrl = val;
__isset.messageStoreUrl = true;
}

void UserUrls::__set_userWebSocketUrl(const std::string& val) {
  this->userWebSocketUrl = val;
__isset.userWebSocketUrl = true;
}

uint32_t UserUrls::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->noteStoreUrl);
          this->__isset.noteStoreUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->webApiUrlPrefix);
          this->__isset.webApiUrlPrefix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userStoreUrl);
          this->__isset.userStoreUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->utilityUrl);
          this->__isset.utilityUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageStoreUrl);
          this->__isset.messageStoreUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userWebSocketUrl);
          this->__isset.userWebSocketUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserUrls::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserUrls");

  if (this->__isset.noteStoreUrl) {
    xfer += oprot->writeFieldBegin("noteStoreUrl", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->noteStoreUrl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.webApiUrlPrefix) {
    xfer += oprot->writeFieldBegin("webApiUrlPrefix", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->webApiUrlPrefix);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userStoreUrl) {
    xfer += oprot->writeFieldBegin("userStoreUrl", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->userStoreUrl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.utilityUrl) {
    xfer += oprot->writeFieldBegin("utilityUrl", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->utilityUrl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.messageStoreUrl) {
    xfer += oprot->writeFieldBegin("messageStoreUrl", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->messageStoreUrl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userWebSocketUrl) {
    xfer += oprot->writeFieldBegin("userWebSocketUrl", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->userWebSocketUrl);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserUrls &a, UserUrls &b) {
  using ::std::swap;
  swap(a.noteStoreUrl, b.noteStoreUrl);
  swap(a.webApiUrlPrefix, b.webApiUrlPrefix);
  swap(a.userStoreUrl, b.userStoreUrl);
  swap(a.utilityUrl, b.utilityUrl);
  swap(a.messageStoreUrl, b.messageStoreUrl);
  swap(a.userWebSocketUrl, b.userWebSocketUrl);
  swap(a.__isset, b.__isset);
}

UserUrls::UserUrls(const UserUrls& other3) {
  noteStoreUrl = other3.noteStoreUrl;
  webApiUrlPrefix = other3.webApiUrlPrefix;
  userStoreUrl = other3.userStoreUrl;
  utilityUrl = other3.utilityUrl;
  messageStoreUrl = other3.messageStoreUrl;
  userWebSocketUrl = other3.userWebSocketUrl;
  __isset = other3.__isset;
}
UserUrls& UserUrls::operator=(const UserUrls& other4) {
  noteStoreUrl = other4.noteStoreUrl;
  webApiUrlPrefix = other4.webApiUrlPrefix;
  userStoreUrl = other4.userStoreUrl;
  utilityUrl = other4.utilityUrl;
  messageStoreUrl = other4.messageStoreUrl;
  userWebSocketUrl = other4.userWebSocketUrl;
  __isset = other4.__isset;
  return *this;
}
void UserUrls::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserUrls(";
  out << "noteStoreUrl="; (__isset.noteStoreUrl ? (out << to_string(noteStoreUrl)) : (out << "<null>"));
  out << ", " << "webApiUrlPrefix="; (__isset.webApiUrlPrefix ? (out << to_string(webApiUrlPrefix)) : (out << "<null>"));
  out << ", " << "userStoreUrl="; (__isset.userStoreUrl ? (out << to_string(userStoreUrl)) : (out << "<null>"));
  out << ", " << "utilityUrl="; (__isset.utilityUrl ? (out << to_string(utilityUrl)) : (out << "<null>"));
  out << ", " << "messageStoreUrl="; (__isset.messageStoreUrl ? (out << to_string(messageStoreUrl)) : (out << "<null>"));
  out << ", " << "userWebSocketUrl="; (__isset.userWebSocketUrl ? (out << to_string(userWebSocketUrl)) : (out << "<null>"));
  out << ")";
}


AuthenticationResult::~AuthenticationResult() throw() {
}


void AuthenticationResult::__set_currentTime(const  ::evernote::edam::Timestamp val) {
  this->currentTime = val;
}

void AuthenticationResult::__set_authenticationToken(const std::string& val) {
  this->authenticationToken = val;
}

void AuthenticationResult::__set_expiration(const  ::evernote::edam::Timestamp val) {
  this->expiration = val;
}

void AuthenticationResult::__set_user(const  ::evernote::edam::User& val) {
  this->user = val;
__isset.user = true;
}

void AuthenticationResult::__set_publicUserInfo(const PublicUserInfo& val) {
  this->publicUserInfo = val;
__isset.publicUserInfo = true;
}

void AuthenticationResult::__set_noteStoreUrl(const std::string& val) {
  this->noteStoreUrl = val;
__isset.noteStoreUrl = true;
}

void AuthenticationResult::__set_webApiUrlPrefix(const std::string& val) {
  this->webApiUrlPrefix = val;
__isset.webApiUrlPrefix = true;
}

void AuthenticationResult::__set_secondFactorRequired(const bool val) {
  this->secondFactorRequired = val;
__isset.secondFactorRequired = true;
}

void AuthenticationResult::__set_secondFactorDeliveryHint(const std::string& val) {
  this->secondFactorDeliveryHint = val;
__isset.secondFactorDeliveryHint = true;
}

void AuthenticationResult::__set_urls(const UserUrls& val) {
  this->urls = val;
__isset.urls = true;
}

uint32_t AuthenticationResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_currentTime = false;
  bool isset_authenticationToken = false;
  bool isset_expiration = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->currentTime);
          isset_currentTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authenticationToken);
          isset_authenticationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->expiration);
          isset_expiration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->user.read(iprot);
          this->__isset.user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->publicUserInfo.read(iprot);
          this->__isset.publicUserInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->noteStoreUrl);
          this->__isset.noteStoreUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->webApiUrlPrefix);
          this->__isset.webApiUrlPrefix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->secondFactorRequired);
          this->__isset.secondFactorRequired = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->secondFactorDeliveryHint);
          this->__isset.secondFactorDeliveryHint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->urls.read(iprot);
          this->__isset.urls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_currentTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_authenticationToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_expiration)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AuthenticationResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AuthenticationResult");

  xfer += oprot->writeFieldBegin("currentTime", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->currentTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("authenticationToken", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->authenticationToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expiration", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->expiration);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.user) {
    xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->user.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.publicUserInfo) {
    xfer += oprot->writeFieldBegin("publicUserInfo", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->publicUserInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noteStoreUrl) {
    xfer += oprot->writeFieldBegin("noteStoreUrl", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->noteStoreUrl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.webApiUrlPrefix) {
    xfer += oprot->writeFieldBegin("webApiUrlPrefix", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->webApiUrlPrefix);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.secondFactorRequired) {
    xfer += oprot->writeFieldBegin("secondFactorRequired", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->secondFactorRequired);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.secondFactorDeliveryHint) {
    xfer += oprot->writeFieldBegin("secondFactorDeliveryHint", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->secondFactorDeliveryHint);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.urls) {
    xfer += oprot->writeFieldBegin("urls", ::apache::thrift::protocol::T_STRUCT, 10);
    xfer += this->urls.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AuthenticationResult &a, AuthenticationResult &b) {
  using ::std::swap;
  swap(a.currentTime, b.currentTime);
  swap(a.authenticationToken, b.authenticationToken);
  swap(a.expiration, b.expiration);
  swap(a.user, b.user);
  swap(a.publicUserInfo, b.publicUserInfo);
  swap(a.noteStoreUrl, b.noteStoreUrl);
  swap(a.webApiUrlPrefix, b.webApiUrlPrefix);
  swap(a.secondFactorRequired, b.secondFactorRequired);
  swap(a.secondFactorDeliveryHint, b.secondFactorDeliveryHint);
  swap(a.urls, b.urls);
  swap(a.__isset, b.__isset);
}

AuthenticationResult::AuthenticationResult(const AuthenticationResult& other5) {
  currentTime = other5.currentTime;
  authenticationToken = other5.authenticationToken;
  expiration = other5.expiration;
  user = other5.user;
  publicUserInfo = other5.publicUserInfo;
  noteStoreUrl = other5.noteStoreUrl;
  webApiUrlPrefix = other5.webApiUrlPrefix;
  secondFactorRequired = other5.secondFactorRequired;
  secondFactorDeliveryHint = other5.secondFactorDeliveryHint;
  urls = other5.urls;
  __isset = other5.__isset;
}
AuthenticationResult& AuthenticationResult::operator=(const AuthenticationResult& other6) {
  currentTime = other6.currentTime;
  authenticationToken = other6.authenticationToken;
  expiration = other6.expiration;
  user = other6.user;
  publicUserInfo = other6.publicUserInfo;
  noteStoreUrl = other6.noteStoreUrl;
  webApiUrlPrefix = other6.webApiUrlPrefix;
  secondFactorRequired = other6.secondFactorRequired;
  secondFactorDeliveryHint = other6.secondFactorDeliveryHint;
  urls = other6.urls;
  __isset = other6.__isset;
  return *this;
}
void AuthenticationResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AuthenticationResult(";
  out << "currentTime=" << to_string(currentTime);
  out << ", " << "authenticationToken=" << to_string(authenticationToken);
  out << ", " << "expiration=" << to_string(expiration);
  out << ", " << "user="; (__isset.user ? (out << to_string(user)) : (out << "<null>"));
  out << ", " << "publicUserInfo="; (__isset.publicUserInfo ? (out << to_string(publicUserInfo)) : (out << "<null>"));
  out << ", " << "noteStoreUrl="; (__isset.noteStoreUrl ? (out << to_string(noteStoreUrl)) : (out << "<null>"));
  out << ", " << "webApiUrlPrefix="; (__isset.webApiUrlPrefix ? (out << to_string(webApiUrlPrefix)) : (out << "<null>"));
  out << ", " << "secondFactorRequired="; (__isset.secondFactorRequired ? (out << to_string(secondFactorRequired)) : (out << "<null>"));
  out << ", " << "secondFactorDeliveryHint="; (__isset.secondFactorDeliveryHint ? (out << to_string(secondFactorDeliveryHint)) : (out << "<null>"));
  out << ", " << "urls="; (__isset.urls ? (out << to_string(urls)) : (out << "<null>"));
  out << ")";
}


BootstrapSettings::~BootstrapSettings() throw() {
}


void BootstrapSettings::__set_serviceHost(const std::string& val) {
  this->serviceHost = val;
}

void BootstrapSettings::__set_marketingUrl(const std::string& val) {
  this->marketingUrl = val;
}

void BootstrapSettings::__set_supportUrl(const std::string& val) {
  this->supportUrl = val;
}

void BootstrapSettings::__set_accountEmailDomain(const std::string& val) {
  this->accountEmailDomain = val;
}

void BootstrapSettings::__set_enableFacebookSharing(const bool val) {
  this->enableFacebookSharing = val;
__isset.enableFacebookSharing = true;
}

void BootstrapSettings::__set_enableGiftSubscriptions(const bool val) {
  this->enableGiftSubscriptions = val;
__isset.enableGiftSubscriptions = true;
}

void BootstrapSettings::__set_enableSupportTickets(const bool val) {
  this->enableSupportTickets = val;
__isset.enableSupportTickets = true;
}

void BootstrapSettings::__set_enableSharedNotebooks(const bool val) {
  this->enableSharedNotebooks = val;
__isset.enableSharedNotebooks = true;
}

void BootstrapSettings::__set_enableSingleNoteSharing(const bool val) {
  this->enableSingleNoteSharing = val;
__isset.enableSingleNoteSharing = true;
}

void BootstrapSettings::__set_enableSponsoredAccounts(const bool val) {
  this->enableSponsoredAccounts = val;
__isset.enableSponsoredAccounts = true;
}

void BootstrapSettings::__set_enableTwitterSharing(const bool val) {
  this->enableTwitterSharing = val;
__isset.enableTwitterSharing = true;
}

void BootstrapSettings::__set_enableLinkedInSharing(const bool val) {
  this->enableLinkedInSharing = val;
__isset.enableLinkedInSharing = true;
}

void BootstrapSettings::__set_enablePublicNotebooks(const bool val) {
  this->enablePublicNotebooks = val;
__isset.enablePublicNotebooks = true;
}

void BootstrapSettings::__set_enableGoogle(const bool val) {
  this->enableGoogle = val;
__isset.enableGoogle = true;
}

uint32_t BootstrapSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_serviceHost = false;
  bool isset_marketingUrl = false;
  bool isset_supportUrl = false;
  bool isset_accountEmailDomain = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceHost);
          isset_serviceHost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->marketingUrl);
          isset_marketingUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->supportUrl);
          isset_supportUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->accountEmailDomain);
          isset_accountEmailDomain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableFacebookSharing);
          this->__isset.enableFacebookSharing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableGiftSubscriptions);
          this->__isset.enableGiftSubscriptions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableSupportTickets);
          this->__isset.enableSupportTickets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableSharedNotebooks);
          this->__isset.enableSharedNotebooks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableSingleNoteSharing);
          this->__isset.enableSingleNoteSharing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableSponsoredAccounts);
          this->__isset.enableSponsoredAccounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableTwitterSharing);
          this->__isset.enableTwitterSharing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableLinkedInSharing);
          this->__isset.enableLinkedInSharing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enablePublicNotebooks);
          this->__isset.enablePublicNotebooks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableGoogle);
          this->__isset.enableGoogle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_serviceHost)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_marketingUrl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_supportUrl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_accountEmailDomain)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BootstrapSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BootstrapSettings");

  xfer += oprot->writeFieldBegin("serviceHost", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->serviceHost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("marketingUrl", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->marketingUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("supportUrl", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->supportUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("accountEmailDomain", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->accountEmailDomain);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.enableFacebookSharing) {
    xfer += oprot->writeFieldBegin("enableFacebookSharing", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->enableFacebookSharing);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enableGiftSubscriptions) {
    xfer += oprot->writeFieldBegin("enableGiftSubscriptions", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->enableGiftSubscriptions);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enableSupportTickets) {
    xfer += oprot->writeFieldBegin("enableSupportTickets", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->enableSupportTickets);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enableSharedNotebooks) {
    xfer += oprot->writeFieldBegin("enableSharedNotebooks", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->enableSharedNotebooks);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enableSingleNoteSharing) {
    xfer += oprot->writeFieldBegin("enableSingleNoteSharing", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->enableSingleNoteSharing);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enableSponsoredAccounts) {
    xfer += oprot->writeFieldBegin("enableSponsoredAccounts", ::apache::thrift::protocol::T_BOOL, 10);
    xfer += oprot->writeBool(this->enableSponsoredAccounts);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enableTwitterSharing) {
    xfer += oprot->writeFieldBegin("enableTwitterSharing", ::apache::thrift::protocol::T_BOOL, 11);
    xfer += oprot->writeBool(this->enableTwitterSharing);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enableLinkedInSharing) {
    xfer += oprot->writeFieldBegin("enableLinkedInSharing", ::apache::thrift::protocol::T_BOOL, 12);
    xfer += oprot->writeBool(this->enableLinkedInSharing);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enablePublicNotebooks) {
    xfer += oprot->writeFieldBegin("enablePublicNotebooks", ::apache::thrift::protocol::T_BOOL, 13);
    xfer += oprot->writeBool(this->enablePublicNotebooks);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enableGoogle) {
    xfer += oprot->writeFieldBegin("enableGoogle", ::apache::thrift::protocol::T_BOOL, 16);
    xfer += oprot->writeBool(this->enableGoogle);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BootstrapSettings &a, BootstrapSettings &b) {
  using ::std::swap;
  swap(a.serviceHost, b.serviceHost);
  swap(a.marketingUrl, b.marketingUrl);
  swap(a.supportUrl, b.supportUrl);
  swap(a.accountEmailDomain, b.accountEmailDomain);
  swap(a.enableFacebookSharing, b.enableFacebookSharing);
  swap(a.enableGiftSubscriptions, b.enableGiftSubscriptions);
  swap(a.enableSupportTickets, b.enableSupportTickets);
  swap(a.enableSharedNotebooks, b.enableSharedNotebooks);
  swap(a.enableSingleNoteSharing, b.enableSingleNoteSharing);
  swap(a.enableSponsoredAccounts, b.enableSponsoredAccounts);
  swap(a.enableTwitterSharing, b.enableTwitterSharing);
  swap(a.enableLinkedInSharing, b.enableLinkedInSharing);
  swap(a.enablePublicNotebooks, b.enablePublicNotebooks);
  swap(a.enableGoogle, b.enableGoogle);
  swap(a.__isset, b.__isset);
}

BootstrapSettings::BootstrapSettings(const BootstrapSettings& other7) {
  serviceHost = other7.serviceHost;
  marketingUrl = other7.marketingUrl;
  supportUrl = other7.supportUrl;
  accountEmailDomain = other7.accountEmailDomain;
  enableFacebookSharing = other7.enableFacebookSharing;
  enableGiftSubscriptions = other7.enableGiftSubscriptions;
  enableSupportTickets = other7.enableSupportTickets;
  enableSharedNotebooks = other7.enableSharedNotebooks;
  enableSingleNoteSharing = other7.enableSingleNoteSharing;
  enableSponsoredAccounts = other7.enableSponsoredAccounts;
  enableTwitterSharing = other7.enableTwitterSharing;
  enableLinkedInSharing = other7.enableLinkedInSharing;
  enablePublicNotebooks = other7.enablePublicNotebooks;
  enableGoogle = other7.enableGoogle;
  __isset = other7.__isset;
}
BootstrapSettings& BootstrapSettings::operator=(const BootstrapSettings& other8) {
  serviceHost = other8.serviceHost;
  marketingUrl = other8.marketingUrl;
  supportUrl = other8.supportUrl;
  accountEmailDomain = other8.accountEmailDomain;
  enableFacebookSharing = other8.enableFacebookSharing;
  enableGiftSubscriptions = other8.enableGiftSubscriptions;
  enableSupportTickets = other8.enableSupportTickets;
  enableSharedNotebooks = other8.enableSharedNotebooks;
  enableSingleNoteSharing = other8.enableSingleNoteSharing;
  enableSponsoredAccounts = other8.enableSponsoredAccounts;
  enableTwitterSharing = other8.enableTwitterSharing;
  enableLinkedInSharing = other8.enableLinkedInSharing;
  enablePublicNotebooks = other8.enablePublicNotebooks;
  enableGoogle = other8.enableGoogle;
  __isset = other8.__isset;
  return *this;
}
void BootstrapSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BootstrapSettings(";
  out << "serviceHost=" << to_string(serviceHost);
  out << ", " << "marketingUrl=" << to_string(marketingUrl);
  out << ", " << "supportUrl=" << to_string(supportUrl);
  out << ", " << "accountEmailDomain=" << to_string(accountEmailDomain);
  out << ", " << "enableFacebookSharing="; (__isset.enableFacebookSharing ? (out << to_string(enableFacebookSharing)) : (out << "<null>"));
  out << ", " << "enableGiftSubscriptions="; (__isset.enableGiftSubscriptions ? (out << to_string(enableGiftSubscriptions)) : (out << "<null>"));
  out << ", " << "enableSupportTickets="; (__isset.enableSupportTickets ? (out << to_string(enableSupportTickets)) : (out << "<null>"));
  out << ", " << "enableSharedNotebooks="; (__isset.enableSharedNotebooks ? (out << to_string(enableSharedNotebooks)) : (out << "<null>"));
  out << ", " << "enableSingleNoteSharing="; (__isset.enableSingleNoteSharing ? (out << to_string(enableSingleNoteSharing)) : (out << "<null>"));
  out << ", " << "enableSponsoredAccounts="; (__isset.enableSponsoredAccounts ? (out << to_string(enableSponsoredAccounts)) : (out << "<null>"));
  out << ", " << "enableTwitterSharing="; (__isset.enableTwitterSharing ? (out << to_string(enableTwitterSharing)) : (out << "<null>"));
  out << ", " << "enableLinkedInSharing="; (__isset.enableLinkedInSharing ? (out << to_string(enableLinkedInSharing)) : (out << "<null>"));
  out << ", " << "enablePublicNotebooks="; (__isset.enablePublicNotebooks ? (out << to_string(enablePublicNotebooks)) : (out << "<null>"));
  out << ", " << "enableGoogle="; (__isset.enableGoogle ? (out << to_string(enableGoogle)) : (out << "<null>"));
  out << ")";
}


BootstrapProfile::~BootstrapProfile() throw() {
}


void BootstrapProfile::__set_name(const std::string& val) {
  this->name = val;
}

void BootstrapProfile::__set_settings(const BootstrapSettings& val) {
  this->settings = val;
}

uint32_t BootstrapProfile::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_settings = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->settings.read(iprot);
          isset_settings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_settings)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BootstrapProfile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BootstrapProfile");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("settings", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->settings.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BootstrapProfile &a, BootstrapProfile &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.settings, b.settings);
}

BootstrapProfile::BootstrapProfile(const BootstrapProfile& other9) {
  name = other9.name;
  settings = other9.settings;
}
BootstrapProfile& BootstrapProfile::operator=(const BootstrapProfile& other10) {
  name = other10.name;
  settings = other10.settings;
  return *this;
}
void BootstrapProfile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BootstrapProfile(";
  out << "name=" << to_string(name);
  out << ", " << "settings=" << to_string(settings);
  out << ")";
}


BootstrapInfo::~BootstrapInfo() throw() {
}


void BootstrapInfo::__set_profiles(const std::vector<BootstrapProfile> & val) {
  this->profiles = val;
}

uint32_t BootstrapInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_profiles = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->profiles.clear();
            uint32_t _size11;
            ::apache::thrift::protocol::TType _etype14;
            xfer += iprot->readListBegin(_etype14, _size11);
            this->profiles.resize(_size11);
            uint32_t _i15;
            for (_i15 = 0; _i15 < _size11; ++_i15)
            {
              xfer += this->profiles[_i15].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_profiles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_profiles)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BootstrapInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BootstrapInfo");

  xfer += oprot->writeFieldBegin("profiles", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->profiles.size()));
    std::vector<BootstrapProfile> ::const_iterator _iter16;
    for (_iter16 = this->profiles.begin(); _iter16 != this->profiles.end(); ++_iter16)
    {
      xfer += (*_iter16).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BootstrapInfo &a, BootstrapInfo &b) {
  using ::std::swap;
  swap(a.profiles, b.profiles);
}

BootstrapInfo::BootstrapInfo(const BootstrapInfo& other17) {
  profiles = other17.profiles;
}
BootstrapInfo& BootstrapInfo::operator=(const BootstrapInfo& other18) {
  profiles = other18.profiles;
  return *this;
}
void BootstrapInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BootstrapInfo(";
  out << "profiles=" << to_string(profiles);
  out << ")";
}

}} // namespace
