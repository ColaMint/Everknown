/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Types_TYPES_H
#define Types_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Limits_types.h"


namespace evernote { namespace edam {

struct PrivilegeLevel {
  enum type {
    NORMAL = 1,
    PREMIUM = 3,
    VIP = 5,
    MANAGER = 7,
    SUPPORT = 8,
    ADMIN = 9
  };
};

extern const std::map<int, const char*> _PrivilegeLevel_VALUES_TO_NAMES;

struct ServiceLevel {
  enum type {
    BASIC = 1,
    PLUS = 2,
    PREMIUM = 3
  };
};

extern const std::map<int, const char*> _ServiceLevel_VALUES_TO_NAMES;

struct QueryFormat {
  enum type {
    USER = 1,
    SEXP = 2
  };
};

extern const std::map<int, const char*> _QueryFormat_VALUES_TO_NAMES;

struct NoteSortOrder {
  enum type {
    CREATED = 1,
    UPDATED = 2,
    RELEVANCE = 3,
    UPDATE_SEQUENCE_NUMBER = 4,
    TITLE = 5
  };
};

extern const std::map<int, const char*> _NoteSortOrder_VALUES_TO_NAMES;

struct PremiumOrderStatus {
  enum type {
    NONE = 0,
    PENDING = 1,
    ACTIVE = 2,
    FAILED = 3,
    CANCELLATION_PENDING = 4,
    CANCELED = 5
  };
};

extern const std::map<int, const char*> _PremiumOrderStatus_VALUES_TO_NAMES;

struct SharedNotebookPrivilegeLevel {
  enum type {
    READ_NOTEBOOK = 0,
    MODIFY_NOTEBOOK_PLUS_ACTIVITY = 1,
    READ_NOTEBOOK_PLUS_ACTIVITY = 2,
    GROUP = 3,
    FULL_ACCESS = 4,
    BUSINESS_FULL_ACCESS = 5
  };
};

extern const std::map<int, const char*> _SharedNotebookPrivilegeLevel_VALUES_TO_NAMES;

struct SharedNotePrivilegeLevel {
  enum type {
    READ_NOTE = 0,
    MODIFY_NOTE = 1,
    FULL_ACCESS = 2
  };
};

extern const std::map<int, const char*> _SharedNotePrivilegeLevel_VALUES_TO_NAMES;

struct SponsoredGroupRole {
  enum type {
    GROUP_MEMBER = 1,
    GROUP_ADMIN = 2,
    GROUP_OWNER = 3
  };
};

extern const std::map<int, const char*> _SponsoredGroupRole_VALUES_TO_NAMES;

struct BusinessUserRole {
  enum type {
    ADMIN = 1,
    NORMAL = 2
  };
};

extern const std::map<int, const char*> _BusinessUserRole_VALUES_TO_NAMES;

struct SharedNotebookInstanceRestrictions {
  enum type {
    ASSIGNED = 1,
    NO_SHARED_NOTEBOOKS = 2
  };
};

extern const std::map<int, const char*> _SharedNotebookInstanceRestrictions_VALUES_TO_NAMES;

struct ReminderEmailConfig {
  enum type {
    DO_NOT_SEND = 1,
    SEND_DAILY_EMAIL = 2
  };
};

extern const std::map<int, const char*> _ReminderEmailConfig_VALUES_TO_NAMES;

struct BusinessInvitationStatus {
  enum type {
    APPROVED = 0,
    REQUESTED = 1,
    REDEEMED = 2
  };
};

extern const std::map<int, const char*> _BusinessInvitationStatus_VALUES_TO_NAMES;

struct ContactType {
  enum type {
    EVERNOTE = 1,
    SMS = 2,
    FACEBOOK = 3,
    EMAIL = 4,
    TWITTER = 5,
    LINKEDIN = 6
  };
};

extern const std::map<int, const char*> _ContactType_VALUES_TO_NAMES;

struct RelatedContentType {
  enum type {
    NEWS_ARTICLE = 1,
    PROFILE_PERSON = 2,
    PROFILE_ORGANIZATION = 3,
    REFERENCE_MATERIAL = 4
  };
};

extern const std::map<int, const char*> _RelatedContentType_VALUES_TO_NAMES;

struct RelatedContentAccess {
  enum type {
    NOT_ACCESSIBLE = 0,
    DIRECT_LINK_ACCESS_OK = 1,
    DIRECT_LINK_LOGIN_REQUIRED = 2,
    DIRECT_LINK_EMBEDDED_VIEW = 3
  };
};

extern const std::map<int, const char*> _RelatedContentAccess_VALUES_TO_NAMES;

struct UserIdentityType {
  enum type {
    EVERNOTE_USERID = 1,
    EMAIL = 2,
    IDENTITYID = 3
  };
};

extern const std::map<int, const char*> _UserIdentityType_VALUES_TO_NAMES;

typedef int64_t InvalidationSequenceNumber;

typedef int64_t IdentityID;

typedef int32_t UserID;

typedef std::string Guid;

typedef int64_t Timestamp;

typedef int64_t MessageEventID;

typedef int64_t MessageThreadID;

class Data;

class UserAttributes;

class BusinessUserAttributes;

class Accounting;

class BusinessUserInfo;

class AccountLimits;

class User;

class Contact;

class Identity;

class Tag;

class LazyMap;

class ResourceAttributes;

class Resource;

class NoteAttributes;

class SharedNote;

class NoteRestrictions;

class NoteLimits;

class Note;

class Publishing;

class BusinessNotebook;

class SavedSearchScope;

class SavedSearch;

class SharedNotebookRecipientSettings;

class NotebookRecipientSettings;

class SharedNotebook;

class NotebookRestrictions;

class Notebook;

class LinkedNotebook;

class NotebookDescriptor;

class UserProfile;

class RelatedContentImage;

class RelatedContent;

class BusinessInvitation;

class UserIdentity;

typedef struct _Data__isset {
  _Data__isset() : bodyHash(false), size(false), body(false) {}
  bool bodyHash :1;
  bool size :1;
  bool body :1;
} _Data__isset;

class Data {
 public:

  Data(const Data&);
  Data& operator=(const Data&);
  Data() : bodyHash(), size(0), body() {
  }

  virtual ~Data() throw();
  std::string bodyHash;
  int32_t size;
  std::string body;

  _Data__isset __isset;

  void __set_bodyHash(const std::string& val);

  void __set_size(const int32_t val);

  void __set_body(const std::string& val);

  bool operator == (const Data & rhs) const
  {
    if (__isset.bodyHash != rhs.__isset.bodyHash)
      return false;
    else if (__isset.bodyHash && !(bodyHash == rhs.bodyHash))
      return false;
    if (__isset.size != rhs.__isset.size)
      return false;
    else if (__isset.size && !(size == rhs.size))
      return false;
    if (__isset.body != rhs.__isset.body)
      return false;
    else if (__isset.body && !(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const Data &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Data & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Data &a, Data &b);

inline std::ostream& operator<<(std::ostream& out, const Data& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UserAttributes__isset {
  _UserAttributes__isset() : defaultLocationName(false), defaultLatitude(false), defaultLongitude(false), preactivation(false), viewedPromotions(false), incomingEmailAddress(false), recentMailedAddresses(false), comments(false), dateAgreedToTermsOfService(false), maxReferrals(false), referralCount(false), refererCode(false), sentEmailDate(false), sentEmailCount(false), dailyEmailLimit(false), emailOptOutDate(false), partnerEmailOptInDate(false), preferredLanguage(false), preferredCountry(false), clipFullPage(false), twitterUserName(false), twitterId(false), groupName(false), recognitionLanguage(false), referralProof(false), educationalDiscount(false), businessAddress(false), hideSponsorBilling(false), useEmailAutoFiling(false), reminderEmailConfig(false), emailAddressLastConfirmed(false), passwordUpdated(false), salesforcePushEnabled(false), shouldLogClientEvent(false) {}
  bool defaultLocationName :1;
  bool defaultLatitude :1;
  bool defaultLongitude :1;
  bool preactivation :1;
  bool viewedPromotions :1;
  bool incomingEmailAddress :1;
  bool recentMailedAddresses :1;
  bool comments :1;
  bool dateAgreedToTermsOfService :1;
  bool maxReferrals :1;
  bool referralCount :1;
  bool refererCode :1;
  bool sentEmailDate :1;
  bool sentEmailCount :1;
  bool dailyEmailLimit :1;
  bool emailOptOutDate :1;
  bool partnerEmailOptInDate :1;
  bool preferredLanguage :1;
  bool preferredCountry :1;
  bool clipFullPage :1;
  bool twitterUserName :1;
  bool twitterId :1;
  bool groupName :1;
  bool recognitionLanguage :1;
  bool referralProof :1;
  bool educationalDiscount :1;
  bool businessAddress :1;
  bool hideSponsorBilling :1;
  bool useEmailAutoFiling :1;
  bool reminderEmailConfig :1;
  bool emailAddressLastConfirmed :1;
  bool passwordUpdated :1;
  bool salesforcePushEnabled :1;
  bool shouldLogClientEvent :1;
} _UserAttributes__isset;

class UserAttributes {
 public:

  UserAttributes(const UserAttributes&);
  UserAttributes& operator=(const UserAttributes&);
  UserAttributes() : defaultLocationName(), defaultLatitude(0), defaultLongitude(0), preactivation(0), incomingEmailAddress(), comments(), dateAgreedToTermsOfService(0), maxReferrals(0), referralCount(0), refererCode(), sentEmailDate(0), sentEmailCount(0), dailyEmailLimit(0), emailOptOutDate(0), partnerEmailOptInDate(0), preferredLanguage(), preferredCountry(), clipFullPage(0), twitterUserName(), twitterId(), groupName(), recognitionLanguage(), referralProof(), educationalDiscount(0), businessAddress(), hideSponsorBilling(0), useEmailAutoFiling(0), reminderEmailConfig((ReminderEmailConfig::type)0), emailAddressLastConfirmed(0), passwordUpdated(0), salesforcePushEnabled(0), shouldLogClientEvent(0) {
  }

  virtual ~UserAttributes() throw();
  std::string defaultLocationName;
  double defaultLatitude;
  double defaultLongitude;
  bool preactivation;
  std::vector<std::string>  viewedPromotions;
  std::string incomingEmailAddress;
  std::vector<std::string>  recentMailedAddresses;
  std::string comments;
  Timestamp dateAgreedToTermsOfService;
  int32_t maxReferrals;
  int32_t referralCount;
  std::string refererCode;
  Timestamp sentEmailDate;
  int32_t sentEmailCount;
  int32_t dailyEmailLimit;
  Timestamp emailOptOutDate;
  Timestamp partnerEmailOptInDate;
  std::string preferredLanguage;
  std::string preferredCountry;
  bool clipFullPage;
  std::string twitterUserName;
  std::string twitterId;
  std::string groupName;
  std::string recognitionLanguage;
  std::string referralProof;
  bool educationalDiscount;
  std::string businessAddress;
  bool hideSponsorBilling;
  bool useEmailAutoFiling;
  ReminderEmailConfig::type reminderEmailConfig;
  Timestamp emailAddressLastConfirmed;
  Timestamp passwordUpdated;
  bool salesforcePushEnabled;
  bool shouldLogClientEvent;

  _UserAttributes__isset __isset;

  void __set_defaultLocationName(const std::string& val);

  void __set_defaultLatitude(const double val);

  void __set_defaultLongitude(const double val);

  void __set_preactivation(const bool val);

  void __set_viewedPromotions(const std::vector<std::string> & val);

  void __set_incomingEmailAddress(const std::string& val);

  void __set_recentMailedAddresses(const std::vector<std::string> & val);

  void __set_comments(const std::string& val);

  void __set_dateAgreedToTermsOfService(const Timestamp val);

  void __set_maxReferrals(const int32_t val);

  void __set_referralCount(const int32_t val);

  void __set_refererCode(const std::string& val);

  void __set_sentEmailDate(const Timestamp val);

  void __set_sentEmailCount(const int32_t val);

  void __set_dailyEmailLimit(const int32_t val);

  void __set_emailOptOutDate(const Timestamp val);

  void __set_partnerEmailOptInDate(const Timestamp val);

  void __set_preferredLanguage(const std::string& val);

  void __set_preferredCountry(const std::string& val);

  void __set_clipFullPage(const bool val);

  void __set_twitterUserName(const std::string& val);

  void __set_twitterId(const std::string& val);

  void __set_groupName(const std::string& val);

  void __set_recognitionLanguage(const std::string& val);

  void __set_referralProof(const std::string& val);

  void __set_educationalDiscount(const bool val);

  void __set_businessAddress(const std::string& val);

  void __set_hideSponsorBilling(const bool val);

  void __set_useEmailAutoFiling(const bool val);

  void __set_reminderEmailConfig(const ReminderEmailConfig::type val);

  void __set_emailAddressLastConfirmed(const Timestamp val);

  void __set_passwordUpdated(const Timestamp val);

  void __set_salesforcePushEnabled(const bool val);

  void __set_shouldLogClientEvent(const bool val);

  bool operator == (const UserAttributes & rhs) const
  {
    if (__isset.defaultLocationName != rhs.__isset.defaultLocationName)
      return false;
    else if (__isset.defaultLocationName && !(defaultLocationName == rhs.defaultLocationName))
      return false;
    if (__isset.defaultLatitude != rhs.__isset.defaultLatitude)
      return false;
    else if (__isset.defaultLatitude && !(defaultLatitude == rhs.defaultLatitude))
      return false;
    if (__isset.defaultLongitude != rhs.__isset.defaultLongitude)
      return false;
    else if (__isset.defaultLongitude && !(defaultLongitude == rhs.defaultLongitude))
      return false;
    if (__isset.preactivation != rhs.__isset.preactivation)
      return false;
    else if (__isset.preactivation && !(preactivation == rhs.preactivation))
      return false;
    if (__isset.viewedPromotions != rhs.__isset.viewedPromotions)
      return false;
    else if (__isset.viewedPromotions && !(viewedPromotions == rhs.viewedPromotions))
      return false;
    if (__isset.incomingEmailAddress != rhs.__isset.incomingEmailAddress)
      return false;
    else if (__isset.incomingEmailAddress && !(incomingEmailAddress == rhs.incomingEmailAddress))
      return false;
    if (__isset.recentMailedAddresses != rhs.__isset.recentMailedAddresses)
      return false;
    else if (__isset.recentMailedAddresses && !(recentMailedAddresses == rhs.recentMailedAddresses))
      return false;
    if (__isset.comments != rhs.__isset.comments)
      return false;
    else if (__isset.comments && !(comments == rhs.comments))
      return false;
    if (__isset.dateAgreedToTermsOfService != rhs.__isset.dateAgreedToTermsOfService)
      return false;
    else if (__isset.dateAgreedToTermsOfService && !(dateAgreedToTermsOfService == rhs.dateAgreedToTermsOfService))
      return false;
    if (__isset.maxReferrals != rhs.__isset.maxReferrals)
      return false;
    else if (__isset.maxReferrals && !(maxReferrals == rhs.maxReferrals))
      return false;
    if (__isset.referralCount != rhs.__isset.referralCount)
      return false;
    else if (__isset.referralCount && !(referralCount == rhs.referralCount))
      return false;
    if (__isset.refererCode != rhs.__isset.refererCode)
      return false;
    else if (__isset.refererCode && !(refererCode == rhs.refererCode))
      return false;
    if (__isset.sentEmailDate != rhs.__isset.sentEmailDate)
      return false;
    else if (__isset.sentEmailDate && !(sentEmailDate == rhs.sentEmailDate))
      return false;
    if (__isset.sentEmailCount != rhs.__isset.sentEmailCount)
      return false;
    else if (__isset.sentEmailCount && !(sentEmailCount == rhs.sentEmailCount))
      return false;
    if (__isset.dailyEmailLimit != rhs.__isset.dailyEmailLimit)
      return false;
    else if (__isset.dailyEmailLimit && !(dailyEmailLimit == rhs.dailyEmailLimit))
      return false;
    if (__isset.emailOptOutDate != rhs.__isset.emailOptOutDate)
      return false;
    else if (__isset.emailOptOutDate && !(emailOptOutDate == rhs.emailOptOutDate))
      return false;
    if (__isset.partnerEmailOptInDate != rhs.__isset.partnerEmailOptInDate)
      return false;
    else if (__isset.partnerEmailOptInDate && !(partnerEmailOptInDate == rhs.partnerEmailOptInDate))
      return false;
    if (__isset.preferredLanguage != rhs.__isset.preferredLanguage)
      return false;
    else if (__isset.preferredLanguage && !(preferredLanguage == rhs.preferredLanguage))
      return false;
    if (__isset.preferredCountry != rhs.__isset.preferredCountry)
      return false;
    else if (__isset.preferredCountry && !(preferredCountry == rhs.preferredCountry))
      return false;
    if (__isset.clipFullPage != rhs.__isset.clipFullPage)
      return false;
    else if (__isset.clipFullPage && !(clipFullPage == rhs.clipFullPage))
      return false;
    if (__isset.twitterUserName != rhs.__isset.twitterUserName)
      return false;
    else if (__isset.twitterUserName && !(twitterUserName == rhs.twitterUserName))
      return false;
    if (__isset.twitterId != rhs.__isset.twitterId)
      return false;
    else if (__isset.twitterId && !(twitterId == rhs.twitterId))
      return false;
    if (__isset.groupName != rhs.__isset.groupName)
      return false;
    else if (__isset.groupName && !(groupName == rhs.groupName))
      return false;
    if (__isset.recognitionLanguage != rhs.__isset.recognitionLanguage)
      return false;
    else if (__isset.recognitionLanguage && !(recognitionLanguage == rhs.recognitionLanguage))
      return false;
    if (__isset.referralProof != rhs.__isset.referralProof)
      return false;
    else if (__isset.referralProof && !(referralProof == rhs.referralProof))
      return false;
    if (__isset.educationalDiscount != rhs.__isset.educationalDiscount)
      return false;
    else if (__isset.educationalDiscount && !(educationalDiscount == rhs.educationalDiscount))
      return false;
    if (__isset.businessAddress != rhs.__isset.businessAddress)
      return false;
    else if (__isset.businessAddress && !(businessAddress == rhs.businessAddress))
      return false;
    if (__isset.hideSponsorBilling != rhs.__isset.hideSponsorBilling)
      return false;
    else if (__isset.hideSponsorBilling && !(hideSponsorBilling == rhs.hideSponsorBilling))
      return false;
    if (__isset.useEmailAutoFiling != rhs.__isset.useEmailAutoFiling)
      return false;
    else if (__isset.useEmailAutoFiling && !(useEmailAutoFiling == rhs.useEmailAutoFiling))
      return false;
    if (__isset.reminderEmailConfig != rhs.__isset.reminderEmailConfig)
      return false;
    else if (__isset.reminderEmailConfig && !(reminderEmailConfig == rhs.reminderEmailConfig))
      return false;
    if (__isset.emailAddressLastConfirmed != rhs.__isset.emailAddressLastConfirmed)
      return false;
    else if (__isset.emailAddressLastConfirmed && !(emailAddressLastConfirmed == rhs.emailAddressLastConfirmed))
      return false;
    if (__isset.passwordUpdated != rhs.__isset.passwordUpdated)
      return false;
    else if (__isset.passwordUpdated && !(passwordUpdated == rhs.passwordUpdated))
      return false;
    if (__isset.salesforcePushEnabled != rhs.__isset.salesforcePushEnabled)
      return false;
    else if (__isset.salesforcePushEnabled && !(salesforcePushEnabled == rhs.salesforcePushEnabled))
      return false;
    if (__isset.shouldLogClientEvent != rhs.__isset.shouldLogClientEvent)
      return false;
    else if (__isset.shouldLogClientEvent && !(shouldLogClientEvent == rhs.shouldLogClientEvent))
      return false;
    return true;
  }
  bool operator != (const UserAttributes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserAttributes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserAttributes &a, UserAttributes &b);

inline std::ostream& operator<<(std::ostream& out, const UserAttributes& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _BusinessUserAttributes__isset {
  _BusinessUserAttributes__isset() : title(false), location(false), department(false), mobilePhone(false), linkedInProfileUrl(false), workPhone(false), companyStartDate(false) {}
  bool title :1;
  bool location :1;
  bool department :1;
  bool mobilePhone :1;
  bool linkedInProfileUrl :1;
  bool workPhone :1;
  bool companyStartDate :1;
} _BusinessUserAttributes__isset;

class BusinessUserAttributes {
 public:

  BusinessUserAttributes(const BusinessUserAttributes&);
  BusinessUserAttributes& operator=(const BusinessUserAttributes&);
  BusinessUserAttributes() : title(), location(), department(), mobilePhone(), linkedInProfileUrl(), workPhone(), companyStartDate(0) {
  }

  virtual ~BusinessUserAttributes() throw();
  std::string title;
  std::string location;
  std::string department;
  std::string mobilePhone;
  std::string linkedInProfileUrl;
  std::string workPhone;
  Timestamp companyStartDate;

  _BusinessUserAttributes__isset __isset;

  void __set_title(const std::string& val);

  void __set_location(const std::string& val);

  void __set_department(const std::string& val);

  void __set_mobilePhone(const std::string& val);

  void __set_linkedInProfileUrl(const std::string& val);

  void __set_workPhone(const std::string& val);

  void __set_companyStartDate(const Timestamp val);

  bool operator == (const BusinessUserAttributes & rhs) const
  {
    if (__isset.title != rhs.__isset.title)
      return false;
    else if (__isset.title && !(title == rhs.title))
      return false;
    if (__isset.location != rhs.__isset.location)
      return false;
    else if (__isset.location && !(location == rhs.location))
      return false;
    if (__isset.department != rhs.__isset.department)
      return false;
    else if (__isset.department && !(department == rhs.department))
      return false;
    if (__isset.mobilePhone != rhs.__isset.mobilePhone)
      return false;
    else if (__isset.mobilePhone && !(mobilePhone == rhs.mobilePhone))
      return false;
    if (__isset.linkedInProfileUrl != rhs.__isset.linkedInProfileUrl)
      return false;
    else if (__isset.linkedInProfileUrl && !(linkedInProfileUrl == rhs.linkedInProfileUrl))
      return false;
    if (__isset.workPhone != rhs.__isset.workPhone)
      return false;
    else if (__isset.workPhone && !(workPhone == rhs.workPhone))
      return false;
    if (__isset.companyStartDate != rhs.__isset.companyStartDate)
      return false;
    else if (__isset.companyStartDate && !(companyStartDate == rhs.companyStartDate))
      return false;
    return true;
  }
  bool operator != (const BusinessUserAttributes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BusinessUserAttributes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BusinessUserAttributes &a, BusinessUserAttributes &b);

inline std::ostream& operator<<(std::ostream& out, const BusinessUserAttributes& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Accounting__isset {
  _Accounting__isset() : uploadLimitEnd(false), uploadLimitNextMonth(false), premiumServiceStatus(false), premiumOrderNumber(false), premiumCommerceService(false), premiumServiceStart(false), premiumServiceSKU(false), lastSuccessfulCharge(false), lastFailedCharge(false), lastFailedChargeReason(false), nextPaymentDue(false), premiumLockUntil(false), updated(false), premiumSubscriptionNumber(false), lastRequestedCharge(false), currency(false), unitPrice(false), businessId(false), businessName(false), businessRole(false), unitDiscount(false), nextChargeDate(false), availablePoints(false) {}
  bool uploadLimitEnd :1;
  bool uploadLimitNextMonth :1;
  bool premiumServiceStatus :1;
  bool premiumOrderNumber :1;
  bool premiumCommerceService :1;
  bool premiumServiceStart :1;
  bool premiumServiceSKU :1;
  bool lastSuccessfulCharge :1;
  bool lastFailedCharge :1;
  bool lastFailedChargeReason :1;
  bool nextPaymentDue :1;
  bool premiumLockUntil :1;
  bool updated :1;
  bool premiumSubscriptionNumber :1;
  bool lastRequestedCharge :1;
  bool currency :1;
  bool unitPrice :1;
  bool businessId :1;
  bool businessName :1;
  bool businessRole :1;
  bool unitDiscount :1;
  bool nextChargeDate :1;
  bool availablePoints :1;
} _Accounting__isset;

class Accounting {
 public:

  Accounting(const Accounting&);
  Accounting& operator=(const Accounting&);
  Accounting() : uploadLimitEnd(0), uploadLimitNextMonth(0), premiumServiceStatus((PremiumOrderStatus::type)0), premiumOrderNumber(), premiumCommerceService(), premiumServiceStart(0), premiumServiceSKU(), lastSuccessfulCharge(0), lastFailedCharge(0), lastFailedChargeReason(), nextPaymentDue(0), premiumLockUntil(0), updated(0), premiumSubscriptionNumber(), lastRequestedCharge(0), currency(), unitPrice(0), businessId(0), businessName(), businessRole((BusinessUserRole::type)0), unitDiscount(0), nextChargeDate(0), availablePoints(0) {
  }

  virtual ~Accounting() throw();
  Timestamp uploadLimitEnd;
  int64_t uploadLimitNextMonth;
  PremiumOrderStatus::type premiumServiceStatus;
  std::string premiumOrderNumber;
  std::string premiumCommerceService;
  Timestamp premiumServiceStart;
  std::string premiumServiceSKU;
  Timestamp lastSuccessfulCharge;
  Timestamp lastFailedCharge;
  std::string lastFailedChargeReason;
  Timestamp nextPaymentDue;
  Timestamp premiumLockUntil;
  Timestamp updated;
  std::string premiumSubscriptionNumber;
  Timestamp lastRequestedCharge;
  std::string currency;
  int32_t unitPrice;
  int32_t businessId;
  std::string businessName;
  BusinessUserRole::type businessRole;
  int32_t unitDiscount;
  Timestamp nextChargeDate;
  int32_t availablePoints;

  _Accounting__isset __isset;

  void __set_uploadLimitEnd(const Timestamp val);

  void __set_uploadLimitNextMonth(const int64_t val);

  void __set_premiumServiceStatus(const PremiumOrderStatus::type val);

  void __set_premiumOrderNumber(const std::string& val);

  void __set_premiumCommerceService(const std::string& val);

  void __set_premiumServiceStart(const Timestamp val);

  void __set_premiumServiceSKU(const std::string& val);

  void __set_lastSuccessfulCharge(const Timestamp val);

  void __set_lastFailedCharge(const Timestamp val);

  void __set_lastFailedChargeReason(const std::string& val);

  void __set_nextPaymentDue(const Timestamp val);

  void __set_premiumLockUntil(const Timestamp val);

  void __set_updated(const Timestamp val);

  void __set_premiumSubscriptionNumber(const std::string& val);

  void __set_lastRequestedCharge(const Timestamp val);

  void __set_currency(const std::string& val);

  void __set_unitPrice(const int32_t val);

  void __set_businessId(const int32_t val);

  void __set_businessName(const std::string& val);

  void __set_businessRole(const BusinessUserRole::type val);

  void __set_unitDiscount(const int32_t val);

  void __set_nextChargeDate(const Timestamp val);

  void __set_availablePoints(const int32_t val);

  bool operator == (const Accounting & rhs) const
  {
    if (__isset.uploadLimitEnd != rhs.__isset.uploadLimitEnd)
      return false;
    else if (__isset.uploadLimitEnd && !(uploadLimitEnd == rhs.uploadLimitEnd))
      return false;
    if (__isset.uploadLimitNextMonth != rhs.__isset.uploadLimitNextMonth)
      return false;
    else if (__isset.uploadLimitNextMonth && !(uploadLimitNextMonth == rhs.uploadLimitNextMonth))
      return false;
    if (__isset.premiumServiceStatus != rhs.__isset.premiumServiceStatus)
      return false;
    else if (__isset.premiumServiceStatus && !(premiumServiceStatus == rhs.premiumServiceStatus))
      return false;
    if (__isset.premiumOrderNumber != rhs.__isset.premiumOrderNumber)
      return false;
    else if (__isset.premiumOrderNumber && !(premiumOrderNumber == rhs.premiumOrderNumber))
      return false;
    if (__isset.premiumCommerceService != rhs.__isset.premiumCommerceService)
      return false;
    else if (__isset.premiumCommerceService && !(premiumCommerceService == rhs.premiumCommerceService))
      return false;
    if (__isset.premiumServiceStart != rhs.__isset.premiumServiceStart)
      return false;
    else if (__isset.premiumServiceStart && !(premiumServiceStart == rhs.premiumServiceStart))
      return false;
    if (__isset.premiumServiceSKU != rhs.__isset.premiumServiceSKU)
      return false;
    else if (__isset.premiumServiceSKU && !(premiumServiceSKU == rhs.premiumServiceSKU))
      return false;
    if (__isset.lastSuccessfulCharge != rhs.__isset.lastSuccessfulCharge)
      return false;
    else if (__isset.lastSuccessfulCharge && !(lastSuccessfulCharge == rhs.lastSuccessfulCharge))
      return false;
    if (__isset.lastFailedCharge != rhs.__isset.lastFailedCharge)
      return false;
    else if (__isset.lastFailedCharge && !(lastFailedCharge == rhs.lastFailedCharge))
      return false;
    if (__isset.lastFailedChargeReason != rhs.__isset.lastFailedChargeReason)
      return false;
    else if (__isset.lastFailedChargeReason && !(lastFailedChargeReason == rhs.lastFailedChargeReason))
      return false;
    if (__isset.nextPaymentDue != rhs.__isset.nextPaymentDue)
      return false;
    else if (__isset.nextPaymentDue && !(nextPaymentDue == rhs.nextPaymentDue))
      return false;
    if (__isset.premiumLockUntil != rhs.__isset.premiumLockUntil)
      return false;
    else if (__isset.premiumLockUntil && !(premiumLockUntil == rhs.premiumLockUntil))
      return false;
    if (__isset.updated != rhs.__isset.updated)
      return false;
    else if (__isset.updated && !(updated == rhs.updated))
      return false;
    if (__isset.premiumSubscriptionNumber != rhs.__isset.premiumSubscriptionNumber)
      return false;
    else if (__isset.premiumSubscriptionNumber && !(premiumSubscriptionNumber == rhs.premiumSubscriptionNumber))
      return false;
    if (__isset.lastRequestedCharge != rhs.__isset.lastRequestedCharge)
      return false;
    else if (__isset.lastRequestedCharge && !(lastRequestedCharge == rhs.lastRequestedCharge))
      return false;
    if (__isset.currency != rhs.__isset.currency)
      return false;
    else if (__isset.currency && !(currency == rhs.currency))
      return false;
    if (__isset.unitPrice != rhs.__isset.unitPrice)
      return false;
    else if (__isset.unitPrice && !(unitPrice == rhs.unitPrice))
      return false;
    if (__isset.businessId != rhs.__isset.businessId)
      return false;
    else if (__isset.businessId && !(businessId == rhs.businessId))
      return false;
    if (__isset.businessName != rhs.__isset.businessName)
      return false;
    else if (__isset.businessName && !(businessName == rhs.businessName))
      return false;
    if (__isset.businessRole != rhs.__isset.businessRole)
      return false;
    else if (__isset.businessRole && !(businessRole == rhs.businessRole))
      return false;
    if (__isset.unitDiscount != rhs.__isset.unitDiscount)
      return false;
    else if (__isset.unitDiscount && !(unitDiscount == rhs.unitDiscount))
      return false;
    if (__isset.nextChargeDate != rhs.__isset.nextChargeDate)
      return false;
    else if (__isset.nextChargeDate && !(nextChargeDate == rhs.nextChargeDate))
      return false;
    if (__isset.availablePoints != rhs.__isset.availablePoints)
      return false;
    else if (__isset.availablePoints && !(availablePoints == rhs.availablePoints))
      return false;
    return true;
  }
  bool operator != (const Accounting &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Accounting & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Accounting &a, Accounting &b);

inline std::ostream& operator<<(std::ostream& out, const Accounting& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _BusinessUserInfo__isset {
  _BusinessUserInfo__isset() : businessId(false), businessName(false), role(false), email(false), updated(false) {}
  bool businessId :1;
  bool businessName :1;
  bool role :1;
  bool email :1;
  bool updated :1;
} _BusinessUserInfo__isset;

class BusinessUserInfo {
 public:

  BusinessUserInfo(const BusinessUserInfo&);
  BusinessUserInfo& operator=(const BusinessUserInfo&);
  BusinessUserInfo() : businessId(0), businessName(), role((BusinessUserRole::type)0), email(), updated(0) {
  }

  virtual ~BusinessUserInfo() throw();
  int32_t businessId;
  std::string businessName;
  BusinessUserRole::type role;
  std::string email;
  Timestamp updated;

  _BusinessUserInfo__isset __isset;

  void __set_businessId(const int32_t val);

  void __set_businessName(const std::string& val);

  void __set_role(const BusinessUserRole::type val);

  void __set_email(const std::string& val);

  void __set_updated(const Timestamp val);

  bool operator == (const BusinessUserInfo & rhs) const
  {
    if (__isset.businessId != rhs.__isset.businessId)
      return false;
    else if (__isset.businessId && !(businessId == rhs.businessId))
      return false;
    if (__isset.businessName != rhs.__isset.businessName)
      return false;
    else if (__isset.businessName && !(businessName == rhs.businessName))
      return false;
    if (__isset.role != rhs.__isset.role)
      return false;
    else if (__isset.role && !(role == rhs.role))
      return false;
    if (__isset.email != rhs.__isset.email)
      return false;
    else if (__isset.email && !(email == rhs.email))
      return false;
    if (__isset.updated != rhs.__isset.updated)
      return false;
    else if (__isset.updated && !(updated == rhs.updated))
      return false;
    return true;
  }
  bool operator != (const BusinessUserInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BusinessUserInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BusinessUserInfo &a, BusinessUserInfo &b);

inline std::ostream& operator<<(std::ostream& out, const BusinessUserInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _AccountLimits__isset {
  _AccountLimits__isset() : userMailLimitDaily(false), noteSizeMax(false), resourceSizeMax(false), userLinkedNotebookMax(false), uploadLimit(false), userNoteCountMax(false), userNotebookCountMax(false), userTagCountMax(false), noteTagCountMax(false), userSavedSearchesMax(false), noteResourceCountMax(false) {}
  bool userMailLimitDaily :1;
  bool noteSizeMax :1;
  bool resourceSizeMax :1;
  bool userLinkedNotebookMax :1;
  bool uploadLimit :1;
  bool userNoteCountMax :1;
  bool userNotebookCountMax :1;
  bool userTagCountMax :1;
  bool noteTagCountMax :1;
  bool userSavedSearchesMax :1;
  bool noteResourceCountMax :1;
} _AccountLimits__isset;

class AccountLimits {
 public:

  AccountLimits(const AccountLimits&);
  AccountLimits& operator=(const AccountLimits&);
  AccountLimits() : userMailLimitDaily(0), noteSizeMax(0), resourceSizeMax(0), userLinkedNotebookMax(0), uploadLimit(0), userNoteCountMax(0), userNotebookCountMax(0), userTagCountMax(0), noteTagCountMax(0), userSavedSearchesMax(0), noteResourceCountMax(0) {
  }

  virtual ~AccountLimits() throw();
  int32_t userMailLimitDaily;
  int64_t noteSizeMax;
  int64_t resourceSizeMax;
  int32_t userLinkedNotebookMax;
  int64_t uploadLimit;
  int32_t userNoteCountMax;
  int32_t userNotebookCountMax;
  int32_t userTagCountMax;
  int32_t noteTagCountMax;
  int32_t userSavedSearchesMax;
  int32_t noteResourceCountMax;

  _AccountLimits__isset __isset;

  void __set_userMailLimitDaily(const int32_t val);

  void __set_noteSizeMax(const int64_t val);

  void __set_resourceSizeMax(const int64_t val);

  void __set_userLinkedNotebookMax(const int32_t val);

  void __set_uploadLimit(const int64_t val);

  void __set_userNoteCountMax(const int32_t val);

  void __set_userNotebookCountMax(const int32_t val);

  void __set_userTagCountMax(const int32_t val);

  void __set_noteTagCountMax(const int32_t val);

  void __set_userSavedSearchesMax(const int32_t val);

  void __set_noteResourceCountMax(const int32_t val);

  bool operator == (const AccountLimits & rhs) const
  {
    if (__isset.userMailLimitDaily != rhs.__isset.userMailLimitDaily)
      return false;
    else if (__isset.userMailLimitDaily && !(userMailLimitDaily == rhs.userMailLimitDaily))
      return false;
    if (__isset.noteSizeMax != rhs.__isset.noteSizeMax)
      return false;
    else if (__isset.noteSizeMax && !(noteSizeMax == rhs.noteSizeMax))
      return false;
    if (__isset.resourceSizeMax != rhs.__isset.resourceSizeMax)
      return false;
    else if (__isset.resourceSizeMax && !(resourceSizeMax == rhs.resourceSizeMax))
      return false;
    if (__isset.userLinkedNotebookMax != rhs.__isset.userLinkedNotebookMax)
      return false;
    else if (__isset.userLinkedNotebookMax && !(userLinkedNotebookMax == rhs.userLinkedNotebookMax))
      return false;
    if (__isset.uploadLimit != rhs.__isset.uploadLimit)
      return false;
    else if (__isset.uploadLimit && !(uploadLimit == rhs.uploadLimit))
      return false;
    if (__isset.userNoteCountMax != rhs.__isset.userNoteCountMax)
      return false;
    else if (__isset.userNoteCountMax && !(userNoteCountMax == rhs.userNoteCountMax))
      return false;
    if (__isset.userNotebookCountMax != rhs.__isset.userNotebookCountMax)
      return false;
    else if (__isset.userNotebookCountMax && !(userNotebookCountMax == rhs.userNotebookCountMax))
      return false;
    if (__isset.userTagCountMax != rhs.__isset.userTagCountMax)
      return false;
    else if (__isset.userTagCountMax && !(userTagCountMax == rhs.userTagCountMax))
      return false;
    if (__isset.noteTagCountMax != rhs.__isset.noteTagCountMax)
      return false;
    else if (__isset.noteTagCountMax && !(noteTagCountMax == rhs.noteTagCountMax))
      return false;
    if (__isset.userSavedSearchesMax != rhs.__isset.userSavedSearchesMax)
      return false;
    else if (__isset.userSavedSearchesMax && !(userSavedSearchesMax == rhs.userSavedSearchesMax))
      return false;
    if (__isset.noteResourceCountMax != rhs.__isset.noteResourceCountMax)
      return false;
    else if (__isset.noteResourceCountMax && !(noteResourceCountMax == rhs.noteResourceCountMax))
      return false;
    return true;
  }
  bool operator != (const AccountLimits &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccountLimits & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AccountLimits &a, AccountLimits &b);

inline std::ostream& operator<<(std::ostream& out, const AccountLimits& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _User__isset {
  _User__isset() : id(false), username(false), email(false), name(false), timezone(false), privilege(false), serviceLevel(false), created(false), updated(false), deleted(false), active(false), shardId(false), attributes(false), accounting(false), businessUserInfo(false), photoUrl(false), photoLastUpdated(false), accountLimits(false) {}
  bool id :1;
  bool username :1;
  bool email :1;
  bool name :1;
  bool timezone :1;
  bool privilege :1;
  bool serviceLevel :1;
  bool created :1;
  bool updated :1;
  bool deleted :1;
  bool active :1;
  bool shardId :1;
  bool attributes :1;
  bool accounting :1;
  bool businessUserInfo :1;
  bool photoUrl :1;
  bool photoLastUpdated :1;
  bool accountLimits :1;
} _User__isset;

class User {
 public:

  User(const User&);
  User& operator=(const User&);
  User() : id(0), username(), email(), name(), timezone(), privilege((PrivilegeLevel::type)0), serviceLevel((ServiceLevel::type)0), created(0), updated(0), deleted(0), active(0), shardId(), photoUrl(), photoLastUpdated(0) {
  }

  virtual ~User() throw();
  UserID id;
  std::string username;
  std::string email;
  std::string name;
  std::string timezone;
  PrivilegeLevel::type privilege;
  ServiceLevel::type serviceLevel;
  Timestamp created;
  Timestamp updated;
  Timestamp deleted;
  bool active;
  std::string shardId;
  UserAttributes attributes;
  Accounting accounting;
  BusinessUserInfo businessUserInfo;
  std::string photoUrl;
  Timestamp photoLastUpdated;
  AccountLimits accountLimits;

  _User__isset __isset;

  void __set_id(const UserID val);

  void __set_username(const std::string& val);

  void __set_email(const std::string& val);

  void __set_name(const std::string& val);

  void __set_timezone(const std::string& val);

  void __set_privilege(const PrivilegeLevel::type val);

  void __set_serviceLevel(const ServiceLevel::type val);

  void __set_created(const Timestamp val);

  void __set_updated(const Timestamp val);

  void __set_deleted(const Timestamp val);

  void __set_active(const bool val);

  void __set_shardId(const std::string& val);

  void __set_attributes(const UserAttributes& val);

  void __set_accounting(const Accounting& val);

  void __set_businessUserInfo(const BusinessUserInfo& val);

  void __set_photoUrl(const std::string& val);

  void __set_photoLastUpdated(const Timestamp val);

  void __set_accountLimits(const AccountLimits& val);

  bool operator == (const User & rhs) const
  {
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.username != rhs.__isset.username)
      return false;
    else if (__isset.username && !(username == rhs.username))
      return false;
    if (__isset.email != rhs.__isset.email)
      return false;
    else if (__isset.email && !(email == rhs.email))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.timezone != rhs.__isset.timezone)
      return false;
    else if (__isset.timezone && !(timezone == rhs.timezone))
      return false;
    if (__isset.privilege != rhs.__isset.privilege)
      return false;
    else if (__isset.privilege && !(privilege == rhs.privilege))
      return false;
    if (__isset.serviceLevel != rhs.__isset.serviceLevel)
      return false;
    else if (__isset.serviceLevel && !(serviceLevel == rhs.serviceLevel))
      return false;
    if (__isset.created != rhs.__isset.created)
      return false;
    else if (__isset.created && !(created == rhs.created))
      return false;
    if (__isset.updated != rhs.__isset.updated)
      return false;
    else if (__isset.updated && !(updated == rhs.updated))
      return false;
    if (__isset.deleted != rhs.__isset.deleted)
      return false;
    else if (__isset.deleted && !(deleted == rhs.deleted))
      return false;
    if (__isset.active != rhs.__isset.active)
      return false;
    else if (__isset.active && !(active == rhs.active))
      return false;
    if (__isset.shardId != rhs.__isset.shardId)
      return false;
    else if (__isset.shardId && !(shardId == rhs.shardId))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.accounting != rhs.__isset.accounting)
      return false;
    else if (__isset.accounting && !(accounting == rhs.accounting))
      return false;
    if (__isset.businessUserInfo != rhs.__isset.businessUserInfo)
      return false;
    else if (__isset.businessUserInfo && !(businessUserInfo == rhs.businessUserInfo))
      return false;
    if (__isset.photoUrl != rhs.__isset.photoUrl)
      return false;
    else if (__isset.photoUrl && !(photoUrl == rhs.photoUrl))
      return false;
    if (__isset.photoLastUpdated != rhs.__isset.photoLastUpdated)
      return false;
    else if (__isset.photoLastUpdated && !(photoLastUpdated == rhs.photoLastUpdated))
      return false;
    if (__isset.accountLimits != rhs.__isset.accountLimits)
      return false;
    else if (__isset.accountLimits && !(accountLimits == rhs.accountLimits))
      return false;
    return true;
  }
  bool operator != (const User &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(User &a, User &b);

inline std::ostream& operator<<(std::ostream& out, const User& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Contact__isset {
  _Contact__isset() : name(false), id(false), type(false), photoUrl(false), photoLastUpdated(false), messagingPermit(false), messagingPermitExpires(false) {}
  bool name :1;
  bool id :1;
  bool type :1;
  bool photoUrl :1;
  bool photoLastUpdated :1;
  bool messagingPermit :1;
  bool messagingPermitExpires :1;
} _Contact__isset;

class Contact {
 public:

  Contact(const Contact&);
  Contact& operator=(const Contact&);
  Contact() : name(), id(), type((ContactType::type)0), photoUrl(), photoLastUpdated(0), messagingPermit(), messagingPermitExpires(0) {
  }

  virtual ~Contact() throw();
  std::string name;
  std::string id;
  ContactType::type type;
  std::string photoUrl;
  Timestamp photoLastUpdated;
  std::string messagingPermit;
  Timestamp messagingPermitExpires;

  _Contact__isset __isset;

  void __set_name(const std::string& val);

  void __set_id(const std::string& val);

  void __set_type(const ContactType::type val);

  void __set_photoUrl(const std::string& val);

  void __set_photoLastUpdated(const Timestamp val);

  void __set_messagingPermit(const std::string& val);

  void __set_messagingPermitExpires(const Timestamp val);

  bool operator == (const Contact & rhs) const
  {
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.photoUrl != rhs.__isset.photoUrl)
      return false;
    else if (__isset.photoUrl && !(photoUrl == rhs.photoUrl))
      return false;
    if (__isset.photoLastUpdated != rhs.__isset.photoLastUpdated)
      return false;
    else if (__isset.photoLastUpdated && !(photoLastUpdated == rhs.photoLastUpdated))
      return false;
    if (__isset.messagingPermit != rhs.__isset.messagingPermit)
      return false;
    else if (__isset.messagingPermit && !(messagingPermit == rhs.messagingPermit))
      return false;
    if (__isset.messagingPermitExpires != rhs.__isset.messagingPermitExpires)
      return false;
    else if (__isset.messagingPermitExpires && !(messagingPermitExpires == rhs.messagingPermitExpires))
      return false;
    return true;
  }
  bool operator != (const Contact &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Contact & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Contact &a, Contact &b);

inline std::ostream& operator<<(std::ostream& out, const Contact& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Identity__isset {
  _Identity__isset() : contact(false), userId(false), deactivated(false), sameBusiness(false), blocked(false), userConnected(false), eventId(false) {}
  bool contact :1;
  bool userId :1;
  bool deactivated :1;
  bool sameBusiness :1;
  bool blocked :1;
  bool userConnected :1;
  bool eventId :1;
} _Identity__isset;

class Identity {
 public:

  Identity(const Identity&);
  Identity& operator=(const Identity&);
  Identity() : id(0), userId(0), deactivated(0), sameBusiness(0), blocked(0), userConnected(0), eventId(0) {
  }

  virtual ~Identity() throw();
  IdentityID id;
  Contact contact;
  UserID userId;
  bool deactivated;
  bool sameBusiness;
  bool blocked;
  bool userConnected;
  MessageEventID eventId;

  _Identity__isset __isset;

  void __set_id(const IdentityID val);

  void __set_contact(const Contact& val);

  void __set_userId(const UserID val);

  void __set_deactivated(const bool val);

  void __set_sameBusiness(const bool val);

  void __set_blocked(const bool val);

  void __set_userConnected(const bool val);

  void __set_eventId(const MessageEventID val);

  bool operator == (const Identity & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (__isset.contact != rhs.__isset.contact)
      return false;
    else if (__isset.contact && !(contact == rhs.contact))
      return false;
    if (__isset.userId != rhs.__isset.userId)
      return false;
    else if (__isset.userId && !(userId == rhs.userId))
      return false;
    if (__isset.deactivated != rhs.__isset.deactivated)
      return false;
    else if (__isset.deactivated && !(deactivated == rhs.deactivated))
      return false;
    if (__isset.sameBusiness != rhs.__isset.sameBusiness)
      return false;
    else if (__isset.sameBusiness && !(sameBusiness == rhs.sameBusiness))
      return false;
    if (__isset.blocked != rhs.__isset.blocked)
      return false;
    else if (__isset.blocked && !(blocked == rhs.blocked))
      return false;
    if (__isset.userConnected != rhs.__isset.userConnected)
      return false;
    else if (__isset.userConnected && !(userConnected == rhs.userConnected))
      return false;
    if (__isset.eventId != rhs.__isset.eventId)
      return false;
    else if (__isset.eventId && !(eventId == rhs.eventId))
      return false;
    return true;
  }
  bool operator != (const Identity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Identity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Identity &a, Identity &b);

inline std::ostream& operator<<(std::ostream& out, const Identity& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Tag__isset {
  _Tag__isset() : guid(false), name(false), parentGuid(false), updateSequenceNum(false) {}
  bool guid :1;
  bool name :1;
  bool parentGuid :1;
  bool updateSequenceNum :1;
} _Tag__isset;

class Tag {
 public:

  Tag(const Tag&);
  Tag& operator=(const Tag&);
  Tag() : guid(), name(), parentGuid(), updateSequenceNum(0) {
  }

  virtual ~Tag() throw();
  Guid guid;
  std::string name;
  Guid parentGuid;
  int32_t updateSequenceNum;

  _Tag__isset __isset;

  void __set_guid(const Guid& val);

  void __set_name(const std::string& val);

  void __set_parentGuid(const Guid& val);

  void __set_updateSequenceNum(const int32_t val);

  bool operator == (const Tag & rhs) const
  {
    if (__isset.guid != rhs.__isset.guid)
      return false;
    else if (__isset.guid && !(guid == rhs.guid))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.parentGuid != rhs.__isset.parentGuid)
      return false;
    else if (__isset.parentGuid && !(parentGuid == rhs.parentGuid))
      return false;
    if (__isset.updateSequenceNum != rhs.__isset.updateSequenceNum)
      return false;
    else if (__isset.updateSequenceNum && !(updateSequenceNum == rhs.updateSequenceNum))
      return false;
    return true;
  }
  bool operator != (const Tag &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tag & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Tag &a, Tag &b);

inline std::ostream& operator<<(std::ostream& out, const Tag& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _LazyMap__isset {
  _LazyMap__isset() : keysOnly(false), fullMap(false) {}
  bool keysOnly :1;
  bool fullMap :1;
} _LazyMap__isset;

class LazyMap {
 public:

  LazyMap(const LazyMap&);
  LazyMap& operator=(const LazyMap&);
  LazyMap() {
  }

  virtual ~LazyMap() throw();
  std::set<std::string>  keysOnly;
  std::map<std::string, std::string>  fullMap;

  _LazyMap__isset __isset;

  void __set_keysOnly(const std::set<std::string> & val);

  void __set_fullMap(const std::map<std::string, std::string> & val);

  bool operator == (const LazyMap & rhs) const
  {
    if (__isset.keysOnly != rhs.__isset.keysOnly)
      return false;
    else if (__isset.keysOnly && !(keysOnly == rhs.keysOnly))
      return false;
    if (__isset.fullMap != rhs.__isset.fullMap)
      return false;
    else if (__isset.fullMap && !(fullMap == rhs.fullMap))
      return false;
    return true;
  }
  bool operator != (const LazyMap &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LazyMap & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LazyMap &a, LazyMap &b);

inline std::ostream& operator<<(std::ostream& out, const LazyMap& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ResourceAttributes__isset {
  _ResourceAttributes__isset() : sourceURL(false), timestamp(false), latitude(false), longitude(false), altitude(false), cameraMake(false), cameraModel(false), clientWillIndex(false), recoType(false), fileName(false), attachment(false), applicationData(false) {}
  bool sourceURL :1;
  bool timestamp :1;
  bool latitude :1;
  bool longitude :1;
  bool altitude :1;
  bool cameraMake :1;
  bool cameraModel :1;
  bool clientWillIndex :1;
  bool recoType :1;
  bool fileName :1;
  bool attachment :1;
  bool applicationData :1;
} _ResourceAttributes__isset;

class ResourceAttributes {
 public:

  ResourceAttributes(const ResourceAttributes&);
  ResourceAttributes& operator=(const ResourceAttributes&);
  ResourceAttributes() : sourceURL(), timestamp(0), latitude(0), longitude(0), altitude(0), cameraMake(), cameraModel(), clientWillIndex(0), recoType(), fileName(), attachment(0) {
  }

  virtual ~ResourceAttributes() throw();
  std::string sourceURL;
  Timestamp timestamp;
  double latitude;
  double longitude;
  double altitude;
  std::string cameraMake;
  std::string cameraModel;
  bool clientWillIndex;
  std::string recoType;
  std::string fileName;
  bool attachment;
  LazyMap applicationData;

  _ResourceAttributes__isset __isset;

  void __set_sourceURL(const std::string& val);

  void __set_timestamp(const Timestamp val);

  void __set_latitude(const double val);

  void __set_longitude(const double val);

  void __set_altitude(const double val);

  void __set_cameraMake(const std::string& val);

  void __set_cameraModel(const std::string& val);

  void __set_clientWillIndex(const bool val);

  void __set_recoType(const std::string& val);

  void __set_fileName(const std::string& val);

  void __set_attachment(const bool val);

  void __set_applicationData(const LazyMap& val);

  bool operator == (const ResourceAttributes & rhs) const
  {
    if (__isset.sourceURL != rhs.__isset.sourceURL)
      return false;
    else if (__isset.sourceURL && !(sourceURL == rhs.sourceURL))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.latitude != rhs.__isset.latitude)
      return false;
    else if (__isset.latitude && !(latitude == rhs.latitude))
      return false;
    if (__isset.longitude != rhs.__isset.longitude)
      return false;
    else if (__isset.longitude && !(longitude == rhs.longitude))
      return false;
    if (__isset.altitude != rhs.__isset.altitude)
      return false;
    else if (__isset.altitude && !(altitude == rhs.altitude))
      return false;
    if (__isset.cameraMake != rhs.__isset.cameraMake)
      return false;
    else if (__isset.cameraMake && !(cameraMake == rhs.cameraMake))
      return false;
    if (__isset.cameraModel != rhs.__isset.cameraModel)
      return false;
    else if (__isset.cameraModel && !(cameraModel == rhs.cameraModel))
      return false;
    if (__isset.clientWillIndex != rhs.__isset.clientWillIndex)
      return false;
    else if (__isset.clientWillIndex && !(clientWillIndex == rhs.clientWillIndex))
      return false;
    if (__isset.recoType != rhs.__isset.recoType)
      return false;
    else if (__isset.recoType && !(recoType == rhs.recoType))
      return false;
    if (__isset.fileName != rhs.__isset.fileName)
      return false;
    else if (__isset.fileName && !(fileName == rhs.fileName))
      return false;
    if (__isset.attachment != rhs.__isset.attachment)
      return false;
    else if (__isset.attachment && !(attachment == rhs.attachment))
      return false;
    if (__isset.applicationData != rhs.__isset.applicationData)
      return false;
    else if (__isset.applicationData && !(applicationData == rhs.applicationData))
      return false;
    return true;
  }
  bool operator != (const ResourceAttributes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResourceAttributes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ResourceAttributes &a, ResourceAttributes &b);

inline std::ostream& operator<<(std::ostream& out, const ResourceAttributes& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Resource__isset {
  _Resource__isset() : guid(false), noteGuid(false), data(false), mime(false), width(false), height(false), duration(false), active(false), recognition(false), attributes(false), updateSequenceNum(false), alternateData(false) {}
  bool guid :1;
  bool noteGuid :1;
  bool data :1;
  bool mime :1;
  bool width :1;
  bool height :1;
  bool duration :1;
  bool active :1;
  bool recognition :1;
  bool attributes :1;
  bool updateSequenceNum :1;
  bool alternateData :1;
} _Resource__isset;

class Resource {
 public:

  Resource(const Resource&);
  Resource& operator=(const Resource&);
  Resource() : guid(), noteGuid(), mime(), width(0), height(0), duration(0), active(0), updateSequenceNum(0) {
  }

  virtual ~Resource() throw();
  Guid guid;
  Guid noteGuid;
  Data data;
  std::string mime;
  int16_t width;
  int16_t height;
  int16_t duration;
  bool active;
  Data recognition;
  ResourceAttributes attributes;
  int32_t updateSequenceNum;
  Data alternateData;

  _Resource__isset __isset;

  void __set_guid(const Guid& val);

  void __set_noteGuid(const Guid& val);

  void __set_data(const Data& val);

  void __set_mime(const std::string& val);

  void __set_width(const int16_t val);

  void __set_height(const int16_t val);

  void __set_duration(const int16_t val);

  void __set_active(const bool val);

  void __set_recognition(const Data& val);

  void __set_attributes(const ResourceAttributes& val);

  void __set_updateSequenceNum(const int32_t val);

  void __set_alternateData(const Data& val);

  bool operator == (const Resource & rhs) const
  {
    if (__isset.guid != rhs.__isset.guid)
      return false;
    else if (__isset.guid && !(guid == rhs.guid))
      return false;
    if (__isset.noteGuid != rhs.__isset.noteGuid)
      return false;
    else if (__isset.noteGuid && !(noteGuid == rhs.noteGuid))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    if (__isset.mime != rhs.__isset.mime)
      return false;
    else if (__isset.mime && !(mime == rhs.mime))
      return false;
    if (__isset.width != rhs.__isset.width)
      return false;
    else if (__isset.width && !(width == rhs.width))
      return false;
    if (__isset.height != rhs.__isset.height)
      return false;
    else if (__isset.height && !(height == rhs.height))
      return false;
    if (__isset.duration != rhs.__isset.duration)
      return false;
    else if (__isset.duration && !(duration == rhs.duration))
      return false;
    if (__isset.active != rhs.__isset.active)
      return false;
    else if (__isset.active && !(active == rhs.active))
      return false;
    if (__isset.recognition != rhs.__isset.recognition)
      return false;
    else if (__isset.recognition && !(recognition == rhs.recognition))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.updateSequenceNum != rhs.__isset.updateSequenceNum)
      return false;
    else if (__isset.updateSequenceNum && !(updateSequenceNum == rhs.updateSequenceNum))
      return false;
    if (__isset.alternateData != rhs.__isset.alternateData)
      return false;
    else if (__isset.alternateData && !(alternateData == rhs.alternateData))
      return false;
    return true;
  }
  bool operator != (const Resource &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Resource & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Resource &a, Resource &b);

inline std::ostream& operator<<(std::ostream& out, const Resource& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _NoteAttributes__isset {
  _NoteAttributes__isset() : subjectDate(false), latitude(false), longitude(false), altitude(false), author(false), source(false), sourceURL(false), sourceApplication(false), shareDate(false), reminderOrder(false), reminderDoneTime(false), reminderTime(false), placeName(false), contentClass(false), applicationData(false), lastEditedBy(false), classifications(false), creatorId(false), lastEditorId(false), sharedWithBusiness(false), conflictSourceNoteGuid(false), noteTitleQuality(false) {}
  bool subjectDate :1;
  bool latitude :1;
  bool longitude :1;
  bool altitude :1;
  bool author :1;
  bool source :1;
  bool sourceURL :1;
  bool sourceApplication :1;
  bool shareDate :1;
  bool reminderOrder :1;
  bool reminderDoneTime :1;
  bool reminderTime :1;
  bool placeName :1;
  bool contentClass :1;
  bool applicationData :1;
  bool lastEditedBy :1;
  bool classifications :1;
  bool creatorId :1;
  bool lastEditorId :1;
  bool sharedWithBusiness :1;
  bool conflictSourceNoteGuid :1;
  bool noteTitleQuality :1;
} _NoteAttributes__isset;

class NoteAttributes {
 public:

  NoteAttributes(const NoteAttributes&);
  NoteAttributes& operator=(const NoteAttributes&);
  NoteAttributes() : subjectDate(0), latitude(0), longitude(0), altitude(0), author(), source(), sourceURL(), sourceApplication(), shareDate(0), reminderOrder(0), reminderDoneTime(0), reminderTime(0), placeName(), contentClass(), lastEditedBy(), creatorId(0), lastEditorId(0), sharedWithBusiness(0), conflictSourceNoteGuid(), noteTitleQuality(0) {
  }

  virtual ~NoteAttributes() throw();
  Timestamp subjectDate;
  double latitude;
  double longitude;
  double altitude;
  std::string author;
  std::string source;
  std::string sourceURL;
  std::string sourceApplication;
  Timestamp shareDate;
  int64_t reminderOrder;
  Timestamp reminderDoneTime;
  Timestamp reminderTime;
  std::string placeName;
  std::string contentClass;
  LazyMap applicationData;
  std::string lastEditedBy;
  std::map<std::string, std::string>  classifications;
  UserID creatorId;
  UserID lastEditorId;
  bool sharedWithBusiness;
  Guid conflictSourceNoteGuid;
  int32_t noteTitleQuality;

  _NoteAttributes__isset __isset;

  void __set_subjectDate(const Timestamp val);

  void __set_latitude(const double val);

  void __set_longitude(const double val);

  void __set_altitude(const double val);

  void __set_author(const std::string& val);

  void __set_source(const std::string& val);

  void __set_sourceURL(const std::string& val);

  void __set_sourceApplication(const std::string& val);

  void __set_shareDate(const Timestamp val);

  void __set_reminderOrder(const int64_t val);

  void __set_reminderDoneTime(const Timestamp val);

  void __set_reminderTime(const Timestamp val);

  void __set_placeName(const std::string& val);

  void __set_contentClass(const std::string& val);

  void __set_applicationData(const LazyMap& val);

  void __set_lastEditedBy(const std::string& val);

  void __set_classifications(const std::map<std::string, std::string> & val);

  void __set_creatorId(const UserID val);

  void __set_lastEditorId(const UserID val);

  void __set_sharedWithBusiness(const bool val);

  void __set_conflictSourceNoteGuid(const Guid& val);

  void __set_noteTitleQuality(const int32_t val);

  bool operator == (const NoteAttributes & rhs) const
  {
    if (__isset.subjectDate != rhs.__isset.subjectDate)
      return false;
    else if (__isset.subjectDate && !(subjectDate == rhs.subjectDate))
      return false;
    if (__isset.latitude != rhs.__isset.latitude)
      return false;
    else if (__isset.latitude && !(latitude == rhs.latitude))
      return false;
    if (__isset.longitude != rhs.__isset.longitude)
      return false;
    else if (__isset.longitude && !(longitude == rhs.longitude))
      return false;
    if (__isset.altitude != rhs.__isset.altitude)
      return false;
    else if (__isset.altitude && !(altitude == rhs.altitude))
      return false;
    if (__isset.author != rhs.__isset.author)
      return false;
    else if (__isset.author && !(author == rhs.author))
      return false;
    if (__isset.source != rhs.__isset.source)
      return false;
    else if (__isset.source && !(source == rhs.source))
      return false;
    if (__isset.sourceURL != rhs.__isset.sourceURL)
      return false;
    else if (__isset.sourceURL && !(sourceURL == rhs.sourceURL))
      return false;
    if (__isset.sourceApplication != rhs.__isset.sourceApplication)
      return false;
    else if (__isset.sourceApplication && !(sourceApplication == rhs.sourceApplication))
      return false;
    if (__isset.shareDate != rhs.__isset.shareDate)
      return false;
    else if (__isset.shareDate && !(shareDate == rhs.shareDate))
      return false;
    if (__isset.reminderOrder != rhs.__isset.reminderOrder)
      return false;
    else if (__isset.reminderOrder && !(reminderOrder == rhs.reminderOrder))
      return false;
    if (__isset.reminderDoneTime != rhs.__isset.reminderDoneTime)
      return false;
    else if (__isset.reminderDoneTime && !(reminderDoneTime == rhs.reminderDoneTime))
      return false;
    if (__isset.reminderTime != rhs.__isset.reminderTime)
      return false;
    else if (__isset.reminderTime && !(reminderTime == rhs.reminderTime))
      return false;
    if (__isset.placeName != rhs.__isset.placeName)
      return false;
    else if (__isset.placeName && !(placeName == rhs.placeName))
      return false;
    if (__isset.contentClass != rhs.__isset.contentClass)
      return false;
    else if (__isset.contentClass && !(contentClass == rhs.contentClass))
      return false;
    if (__isset.applicationData != rhs.__isset.applicationData)
      return false;
    else if (__isset.applicationData && !(applicationData == rhs.applicationData))
      return false;
    if (__isset.lastEditedBy != rhs.__isset.lastEditedBy)
      return false;
    else if (__isset.lastEditedBy && !(lastEditedBy == rhs.lastEditedBy))
      return false;
    if (__isset.classifications != rhs.__isset.classifications)
      return false;
    else if (__isset.classifications && !(classifications == rhs.classifications))
      return false;
    if (__isset.creatorId != rhs.__isset.creatorId)
      return false;
    else if (__isset.creatorId && !(creatorId == rhs.creatorId))
      return false;
    if (__isset.lastEditorId != rhs.__isset.lastEditorId)
      return false;
    else if (__isset.lastEditorId && !(lastEditorId == rhs.lastEditorId))
      return false;
    if (__isset.sharedWithBusiness != rhs.__isset.sharedWithBusiness)
      return false;
    else if (__isset.sharedWithBusiness && !(sharedWithBusiness == rhs.sharedWithBusiness))
      return false;
    if (__isset.conflictSourceNoteGuid != rhs.__isset.conflictSourceNoteGuid)
      return false;
    else if (__isset.conflictSourceNoteGuid && !(conflictSourceNoteGuid == rhs.conflictSourceNoteGuid))
      return false;
    if (__isset.noteTitleQuality != rhs.__isset.noteTitleQuality)
      return false;
    else if (__isset.noteTitleQuality && !(noteTitleQuality == rhs.noteTitleQuality))
      return false;
    return true;
  }
  bool operator != (const NoteAttributes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NoteAttributes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NoteAttributes &a, NoteAttributes &b);

inline std::ostream& operator<<(std::ostream& out, const NoteAttributes& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SharedNote__isset {
  _SharedNote__isset() : sharerUserID(false), recipientIdentity(false), privilege(false), serviceCreated(false), serviceUpdated(false), serviceAssigned(false) {}
  bool sharerUserID :1;
  bool recipientIdentity :1;
  bool privilege :1;
  bool serviceCreated :1;
  bool serviceUpdated :1;
  bool serviceAssigned :1;
} _SharedNote__isset;

class SharedNote {
 public:

  SharedNote(const SharedNote&);
  SharedNote& operator=(const SharedNote&);
  SharedNote() : sharerUserID(0), privilege((SharedNotePrivilegeLevel::type)0), serviceCreated(0), serviceUpdated(0), serviceAssigned(0) {
  }

  virtual ~SharedNote() throw();
  UserID sharerUserID;
  Identity recipientIdentity;
  SharedNotePrivilegeLevel::type privilege;
  Timestamp serviceCreated;
  Timestamp serviceUpdated;
  Timestamp serviceAssigned;

  _SharedNote__isset __isset;

  void __set_sharerUserID(const UserID val);

  void __set_recipientIdentity(const Identity& val);

  void __set_privilege(const SharedNotePrivilegeLevel::type val);

  void __set_serviceCreated(const Timestamp val);

  void __set_serviceUpdated(const Timestamp val);

  void __set_serviceAssigned(const Timestamp val);

  bool operator == (const SharedNote & rhs) const
  {
    if (__isset.sharerUserID != rhs.__isset.sharerUserID)
      return false;
    else if (__isset.sharerUserID && !(sharerUserID == rhs.sharerUserID))
      return false;
    if (__isset.recipientIdentity != rhs.__isset.recipientIdentity)
      return false;
    else if (__isset.recipientIdentity && !(recipientIdentity == rhs.recipientIdentity))
      return false;
    if (__isset.privilege != rhs.__isset.privilege)
      return false;
    else if (__isset.privilege && !(privilege == rhs.privilege))
      return false;
    if (__isset.serviceCreated != rhs.__isset.serviceCreated)
      return false;
    else if (__isset.serviceCreated && !(serviceCreated == rhs.serviceCreated))
      return false;
    if (__isset.serviceUpdated != rhs.__isset.serviceUpdated)
      return false;
    else if (__isset.serviceUpdated && !(serviceUpdated == rhs.serviceUpdated))
      return false;
    if (__isset.serviceAssigned != rhs.__isset.serviceAssigned)
      return false;
    else if (__isset.serviceAssigned && !(serviceAssigned == rhs.serviceAssigned))
      return false;
    return true;
  }
  bool operator != (const SharedNote &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SharedNote & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SharedNote &a, SharedNote &b);

inline std::ostream& operator<<(std::ostream& out, const SharedNote& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _NoteRestrictions__isset {
  _NoteRestrictions__isset() : noUpdateTitle(false), noUpdateContent(false), noEmail(false), noShare(false), noSharePublicly(false) {}
  bool noUpdateTitle :1;
  bool noUpdateContent :1;
  bool noEmail :1;
  bool noShare :1;
  bool noSharePublicly :1;
} _NoteRestrictions__isset;

class NoteRestrictions {
 public:

  NoteRestrictions(const NoteRestrictions&);
  NoteRestrictions& operator=(const NoteRestrictions&);
  NoteRestrictions() : noUpdateTitle(0), noUpdateContent(0), noEmail(0), noShare(0), noSharePublicly(0) {
  }

  virtual ~NoteRestrictions() throw();
  bool noUpdateTitle;
  bool noUpdateContent;
  bool noEmail;
  bool noShare;
  bool noSharePublicly;

  _NoteRestrictions__isset __isset;

  void __set_noUpdateTitle(const bool val);

  void __set_noUpdateContent(const bool val);

  void __set_noEmail(const bool val);

  void __set_noShare(const bool val);

  void __set_noSharePublicly(const bool val);

  bool operator == (const NoteRestrictions & rhs) const
  {
    if (__isset.noUpdateTitle != rhs.__isset.noUpdateTitle)
      return false;
    else if (__isset.noUpdateTitle && !(noUpdateTitle == rhs.noUpdateTitle))
      return false;
    if (__isset.noUpdateContent != rhs.__isset.noUpdateContent)
      return false;
    else if (__isset.noUpdateContent && !(noUpdateContent == rhs.noUpdateContent))
      return false;
    if (__isset.noEmail != rhs.__isset.noEmail)
      return false;
    else if (__isset.noEmail && !(noEmail == rhs.noEmail))
      return false;
    if (__isset.noShare != rhs.__isset.noShare)
      return false;
    else if (__isset.noShare && !(noShare == rhs.noShare))
      return false;
    if (__isset.noSharePublicly != rhs.__isset.noSharePublicly)
      return false;
    else if (__isset.noSharePublicly && !(noSharePublicly == rhs.noSharePublicly))
      return false;
    return true;
  }
  bool operator != (const NoteRestrictions &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NoteRestrictions & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NoteRestrictions &a, NoteRestrictions &b);

inline std::ostream& operator<<(std::ostream& out, const NoteRestrictions& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _NoteLimits__isset {
  _NoteLimits__isset() : noteResourceCountMax(false), uploadLimit(false), resourceSizeMax(false), noteSizeMax(false), uploaded(false) {}
  bool noteResourceCountMax :1;
  bool uploadLimit :1;
  bool resourceSizeMax :1;
  bool noteSizeMax :1;
  bool uploaded :1;
} _NoteLimits__isset;

class NoteLimits {
 public:

  NoteLimits(const NoteLimits&);
  NoteLimits& operator=(const NoteLimits&);
  NoteLimits() : noteResourceCountMax(0), uploadLimit(0), resourceSizeMax(0), noteSizeMax(0), uploaded(0) {
  }

  virtual ~NoteLimits() throw();
  int32_t noteResourceCountMax;
  int64_t uploadLimit;
  int64_t resourceSizeMax;
  int64_t noteSizeMax;
  int64_t uploaded;

  _NoteLimits__isset __isset;

  void __set_noteResourceCountMax(const int32_t val);

  void __set_uploadLimit(const int64_t val);

  void __set_resourceSizeMax(const int64_t val);

  void __set_noteSizeMax(const int64_t val);

  void __set_uploaded(const int64_t val);

  bool operator == (const NoteLimits & rhs) const
  {
    if (__isset.noteResourceCountMax != rhs.__isset.noteResourceCountMax)
      return false;
    else if (__isset.noteResourceCountMax && !(noteResourceCountMax == rhs.noteResourceCountMax))
      return false;
    if (__isset.uploadLimit != rhs.__isset.uploadLimit)
      return false;
    else if (__isset.uploadLimit && !(uploadLimit == rhs.uploadLimit))
      return false;
    if (__isset.resourceSizeMax != rhs.__isset.resourceSizeMax)
      return false;
    else if (__isset.resourceSizeMax && !(resourceSizeMax == rhs.resourceSizeMax))
      return false;
    if (__isset.noteSizeMax != rhs.__isset.noteSizeMax)
      return false;
    else if (__isset.noteSizeMax && !(noteSizeMax == rhs.noteSizeMax))
      return false;
    if (__isset.uploaded != rhs.__isset.uploaded)
      return false;
    else if (__isset.uploaded && !(uploaded == rhs.uploaded))
      return false;
    return true;
  }
  bool operator != (const NoteLimits &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NoteLimits & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NoteLimits &a, NoteLimits &b);

inline std::ostream& operator<<(std::ostream& out, const NoteLimits& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Note__isset {
  _Note__isset() : guid(false), title(false), content(false), contentHash(false), contentLength(false), created(false), updated(false), deleted(false), active(false), updateSequenceNum(false), notebookGuid(false), tagGuids(false), resources(false), attributes(false), tagNames(false), sharedNotes(false), restrictions(false), limits(false) {}
  bool guid :1;
  bool title :1;
  bool content :1;
  bool contentHash :1;
  bool contentLength :1;
  bool created :1;
  bool updated :1;
  bool deleted :1;
  bool active :1;
  bool updateSequenceNum :1;
  bool notebookGuid :1;
  bool tagGuids :1;
  bool resources :1;
  bool attributes :1;
  bool tagNames :1;
  bool sharedNotes :1;
  bool restrictions :1;
  bool limits :1;
} _Note__isset;

class Note {
 public:

  Note(const Note&);
  Note& operator=(const Note&);
  Note() : guid(), title(), content(), contentHash(), contentLength(0), created(0), updated(0), deleted(0), active(0), updateSequenceNum(0), notebookGuid() {
  }

  virtual ~Note() throw();
  Guid guid;
  std::string title;
  std::string content;
  std::string contentHash;
  int32_t contentLength;
  Timestamp created;
  Timestamp updated;
  Timestamp deleted;
  bool active;
  int32_t updateSequenceNum;
  std::string notebookGuid;
  std::vector<Guid>  tagGuids;
  std::vector<Resource>  resources;
  NoteAttributes attributes;
  std::vector<std::string>  tagNames;
  std::vector<SharedNote>  sharedNotes;
  NoteRestrictions restrictions;
  NoteLimits limits;

  _Note__isset __isset;

  void __set_guid(const Guid& val);

  void __set_title(const std::string& val);

  void __set_content(const std::string& val);

  void __set_contentHash(const std::string& val);

  void __set_contentLength(const int32_t val);

  void __set_created(const Timestamp val);

  void __set_updated(const Timestamp val);

  void __set_deleted(const Timestamp val);

  void __set_active(const bool val);

  void __set_updateSequenceNum(const int32_t val);

  void __set_notebookGuid(const std::string& val);

  void __set_tagGuids(const std::vector<Guid> & val);

  void __set_resources(const std::vector<Resource> & val);

  void __set_attributes(const NoteAttributes& val);

  void __set_tagNames(const std::vector<std::string> & val);

  void __set_sharedNotes(const std::vector<SharedNote> & val);

  void __set_restrictions(const NoteRestrictions& val);

  void __set_limits(const NoteLimits& val);

  bool operator == (const Note & rhs) const
  {
    if (__isset.guid != rhs.__isset.guid)
      return false;
    else if (__isset.guid && !(guid == rhs.guid))
      return false;
    if (__isset.title != rhs.__isset.title)
      return false;
    else if (__isset.title && !(title == rhs.title))
      return false;
    if (__isset.content != rhs.__isset.content)
      return false;
    else if (__isset.content && !(content == rhs.content))
      return false;
    if (__isset.contentHash != rhs.__isset.contentHash)
      return false;
    else if (__isset.contentHash && !(contentHash == rhs.contentHash))
      return false;
    if (__isset.contentLength != rhs.__isset.contentLength)
      return false;
    else if (__isset.contentLength && !(contentLength == rhs.contentLength))
      return false;
    if (__isset.created != rhs.__isset.created)
      return false;
    else if (__isset.created && !(created == rhs.created))
      return false;
    if (__isset.updated != rhs.__isset.updated)
      return false;
    else if (__isset.updated && !(updated == rhs.updated))
      return false;
    if (__isset.deleted != rhs.__isset.deleted)
      return false;
    else if (__isset.deleted && !(deleted == rhs.deleted))
      return false;
    if (__isset.active != rhs.__isset.active)
      return false;
    else if (__isset.active && !(active == rhs.active))
      return false;
    if (__isset.updateSequenceNum != rhs.__isset.updateSequenceNum)
      return false;
    else if (__isset.updateSequenceNum && !(updateSequenceNum == rhs.updateSequenceNum))
      return false;
    if (__isset.notebookGuid != rhs.__isset.notebookGuid)
      return false;
    else if (__isset.notebookGuid && !(notebookGuid == rhs.notebookGuid))
      return false;
    if (__isset.tagGuids != rhs.__isset.tagGuids)
      return false;
    else if (__isset.tagGuids && !(tagGuids == rhs.tagGuids))
      return false;
    if (__isset.resources != rhs.__isset.resources)
      return false;
    else if (__isset.resources && !(resources == rhs.resources))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.tagNames != rhs.__isset.tagNames)
      return false;
    else if (__isset.tagNames && !(tagNames == rhs.tagNames))
      return false;
    if (__isset.sharedNotes != rhs.__isset.sharedNotes)
      return false;
    else if (__isset.sharedNotes && !(sharedNotes == rhs.sharedNotes))
      return false;
    if (__isset.restrictions != rhs.__isset.restrictions)
      return false;
    else if (__isset.restrictions && !(restrictions == rhs.restrictions))
      return false;
    if (__isset.limits != rhs.__isset.limits)
      return false;
    else if (__isset.limits && !(limits == rhs.limits))
      return false;
    return true;
  }
  bool operator != (const Note &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Note & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Note &a, Note &b);

inline std::ostream& operator<<(std::ostream& out, const Note& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Publishing__isset {
  _Publishing__isset() : uri(false), order(false), ascending(false), publicDescription(false) {}
  bool uri :1;
  bool order :1;
  bool ascending :1;
  bool publicDescription :1;
} _Publishing__isset;

class Publishing {
 public:

  Publishing(const Publishing&);
  Publishing& operator=(const Publishing&);
  Publishing() : uri(), order((NoteSortOrder::type)0), ascending(0), publicDescription() {
  }

  virtual ~Publishing() throw();
  std::string uri;
  NoteSortOrder::type order;
  bool ascending;
  std::string publicDescription;

  _Publishing__isset __isset;

  void __set_uri(const std::string& val);

  void __set_order(const NoteSortOrder::type val);

  void __set_ascending(const bool val);

  void __set_publicDescription(const std::string& val);

  bool operator == (const Publishing & rhs) const
  {
    if (__isset.uri != rhs.__isset.uri)
      return false;
    else if (__isset.uri && !(uri == rhs.uri))
      return false;
    if (__isset.order != rhs.__isset.order)
      return false;
    else if (__isset.order && !(order == rhs.order))
      return false;
    if (__isset.ascending != rhs.__isset.ascending)
      return false;
    else if (__isset.ascending && !(ascending == rhs.ascending))
      return false;
    if (__isset.publicDescription != rhs.__isset.publicDescription)
      return false;
    else if (__isset.publicDescription && !(publicDescription == rhs.publicDescription))
      return false;
    return true;
  }
  bool operator != (const Publishing &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Publishing & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Publishing &a, Publishing &b);

inline std::ostream& operator<<(std::ostream& out, const Publishing& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _BusinessNotebook__isset {
  _BusinessNotebook__isset() : notebookDescription(false), privilege(false), recommended(false) {}
  bool notebookDescription :1;
  bool privilege :1;
  bool recommended :1;
} _BusinessNotebook__isset;

class BusinessNotebook {
 public:

  BusinessNotebook(const BusinessNotebook&);
  BusinessNotebook& operator=(const BusinessNotebook&);
  BusinessNotebook() : notebookDescription(), privilege((SharedNotebookPrivilegeLevel::type)0), recommended(0) {
  }

  virtual ~BusinessNotebook() throw();
  std::string notebookDescription;
  SharedNotebookPrivilegeLevel::type privilege;
  bool recommended;

  _BusinessNotebook__isset __isset;

  void __set_notebookDescription(const std::string& val);

  void __set_privilege(const SharedNotebookPrivilegeLevel::type val);

  void __set_recommended(const bool val);

  bool operator == (const BusinessNotebook & rhs) const
  {
    if (__isset.notebookDescription != rhs.__isset.notebookDescription)
      return false;
    else if (__isset.notebookDescription && !(notebookDescription == rhs.notebookDescription))
      return false;
    if (__isset.privilege != rhs.__isset.privilege)
      return false;
    else if (__isset.privilege && !(privilege == rhs.privilege))
      return false;
    if (__isset.recommended != rhs.__isset.recommended)
      return false;
    else if (__isset.recommended && !(recommended == rhs.recommended))
      return false;
    return true;
  }
  bool operator != (const BusinessNotebook &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BusinessNotebook & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BusinessNotebook &a, BusinessNotebook &b);

inline std::ostream& operator<<(std::ostream& out, const BusinessNotebook& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SavedSearchScope__isset {
  _SavedSearchScope__isset() : includeAccount(false), includePersonalLinkedNotebooks(false), includeBusinessLinkedNotebooks(false) {}
  bool includeAccount :1;
  bool includePersonalLinkedNotebooks :1;
  bool includeBusinessLinkedNotebooks :1;
} _SavedSearchScope__isset;

class SavedSearchScope {
 public:

  SavedSearchScope(const SavedSearchScope&);
  SavedSearchScope& operator=(const SavedSearchScope&);
  SavedSearchScope() : includeAccount(0), includePersonalLinkedNotebooks(0), includeBusinessLinkedNotebooks(0) {
  }

  virtual ~SavedSearchScope() throw();
  bool includeAccount;
  bool includePersonalLinkedNotebooks;
  bool includeBusinessLinkedNotebooks;

  _SavedSearchScope__isset __isset;

  void __set_includeAccount(const bool val);

  void __set_includePersonalLinkedNotebooks(const bool val);

  void __set_includeBusinessLinkedNotebooks(const bool val);

  bool operator == (const SavedSearchScope & rhs) const
  {
    if (__isset.includeAccount != rhs.__isset.includeAccount)
      return false;
    else if (__isset.includeAccount && !(includeAccount == rhs.includeAccount))
      return false;
    if (__isset.includePersonalLinkedNotebooks != rhs.__isset.includePersonalLinkedNotebooks)
      return false;
    else if (__isset.includePersonalLinkedNotebooks && !(includePersonalLinkedNotebooks == rhs.includePersonalLinkedNotebooks))
      return false;
    if (__isset.includeBusinessLinkedNotebooks != rhs.__isset.includeBusinessLinkedNotebooks)
      return false;
    else if (__isset.includeBusinessLinkedNotebooks && !(includeBusinessLinkedNotebooks == rhs.includeBusinessLinkedNotebooks))
      return false;
    return true;
  }
  bool operator != (const SavedSearchScope &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SavedSearchScope & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SavedSearchScope &a, SavedSearchScope &b);

inline std::ostream& operator<<(std::ostream& out, const SavedSearchScope& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SavedSearch__isset {
  _SavedSearch__isset() : guid(false), name(false), query(false), format(false), updateSequenceNum(false), scope(false) {}
  bool guid :1;
  bool name :1;
  bool query :1;
  bool format :1;
  bool updateSequenceNum :1;
  bool scope :1;
} _SavedSearch__isset;

class SavedSearch {
 public:

  SavedSearch(const SavedSearch&);
  SavedSearch& operator=(const SavedSearch&);
  SavedSearch() : guid(), name(), query(), format((QueryFormat::type)0), updateSequenceNum(0) {
  }

  virtual ~SavedSearch() throw();
  Guid guid;
  std::string name;
  std::string query;
  QueryFormat::type format;
  int32_t updateSequenceNum;
  SavedSearchScope scope;

  _SavedSearch__isset __isset;

  void __set_guid(const Guid& val);

  void __set_name(const std::string& val);

  void __set_query(const std::string& val);

  void __set_format(const QueryFormat::type val);

  void __set_updateSequenceNum(const int32_t val);

  void __set_scope(const SavedSearchScope& val);

  bool operator == (const SavedSearch & rhs) const
  {
    if (__isset.guid != rhs.__isset.guid)
      return false;
    else if (__isset.guid && !(guid == rhs.guid))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.query != rhs.__isset.query)
      return false;
    else if (__isset.query && !(query == rhs.query))
      return false;
    if (__isset.format != rhs.__isset.format)
      return false;
    else if (__isset.format && !(format == rhs.format))
      return false;
    if (__isset.updateSequenceNum != rhs.__isset.updateSequenceNum)
      return false;
    else if (__isset.updateSequenceNum && !(updateSequenceNum == rhs.updateSequenceNum))
      return false;
    if (__isset.scope != rhs.__isset.scope)
      return false;
    else if (__isset.scope && !(scope == rhs.scope))
      return false;
    return true;
  }
  bool operator != (const SavedSearch &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SavedSearch & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SavedSearch &a, SavedSearch &b);

inline std::ostream& operator<<(std::ostream& out, const SavedSearch& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SharedNotebookRecipientSettings__isset {
  _SharedNotebookRecipientSettings__isset() : reminderNotifyEmail(false), reminderNotifyInApp(false) {}
  bool reminderNotifyEmail :1;
  bool reminderNotifyInApp :1;
} _SharedNotebookRecipientSettings__isset;

class SharedNotebookRecipientSettings {
 public:

  SharedNotebookRecipientSettings(const SharedNotebookRecipientSettings&);
  SharedNotebookRecipientSettings& operator=(const SharedNotebookRecipientSettings&);
  SharedNotebookRecipientSettings() : reminderNotifyEmail(0), reminderNotifyInApp(0) {
  }

  virtual ~SharedNotebookRecipientSettings() throw();
  bool reminderNotifyEmail;
  bool reminderNotifyInApp;

  _SharedNotebookRecipientSettings__isset __isset;

  void __set_reminderNotifyEmail(const bool val);

  void __set_reminderNotifyInApp(const bool val);

  bool operator == (const SharedNotebookRecipientSettings & rhs) const
  {
    if (__isset.reminderNotifyEmail != rhs.__isset.reminderNotifyEmail)
      return false;
    else if (__isset.reminderNotifyEmail && !(reminderNotifyEmail == rhs.reminderNotifyEmail))
      return false;
    if (__isset.reminderNotifyInApp != rhs.__isset.reminderNotifyInApp)
      return false;
    else if (__isset.reminderNotifyInApp && !(reminderNotifyInApp == rhs.reminderNotifyInApp))
      return false;
    return true;
  }
  bool operator != (const SharedNotebookRecipientSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SharedNotebookRecipientSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SharedNotebookRecipientSettings &a, SharedNotebookRecipientSettings &b);

inline std::ostream& operator<<(std::ostream& out, const SharedNotebookRecipientSettings& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _NotebookRecipientSettings__isset {
  _NotebookRecipientSettings__isset() : reminderNotifyEmail(false), reminderNotifyInApp(false), inMyList(false), stack(false) {}
  bool reminderNotifyEmail :1;
  bool reminderNotifyInApp :1;
  bool inMyList :1;
  bool stack :1;
} _NotebookRecipientSettings__isset;

class NotebookRecipientSettings {
 public:

  NotebookRecipientSettings(const NotebookRecipientSettings&);
  NotebookRecipientSettings& operator=(const NotebookRecipientSettings&);
  NotebookRecipientSettings() : reminderNotifyEmail(0), reminderNotifyInApp(0), inMyList(0), stack() {
  }

  virtual ~NotebookRecipientSettings() throw();
  bool reminderNotifyEmail;
  bool reminderNotifyInApp;
  bool inMyList;
  std::string stack;

  _NotebookRecipientSettings__isset __isset;

  void __set_reminderNotifyEmail(const bool val);

  void __set_reminderNotifyInApp(const bool val);

  void __set_inMyList(const bool val);

  void __set_stack(const std::string& val);

  bool operator == (const NotebookRecipientSettings & rhs) const
  {
    if (__isset.reminderNotifyEmail != rhs.__isset.reminderNotifyEmail)
      return false;
    else if (__isset.reminderNotifyEmail && !(reminderNotifyEmail == rhs.reminderNotifyEmail))
      return false;
    if (__isset.reminderNotifyInApp != rhs.__isset.reminderNotifyInApp)
      return false;
    else if (__isset.reminderNotifyInApp && !(reminderNotifyInApp == rhs.reminderNotifyInApp))
      return false;
    if (__isset.inMyList != rhs.__isset.inMyList)
      return false;
    else if (__isset.inMyList && !(inMyList == rhs.inMyList))
      return false;
    if (__isset.stack != rhs.__isset.stack)
      return false;
    else if (__isset.stack && !(stack == rhs.stack))
      return false;
    return true;
  }
  bool operator != (const NotebookRecipientSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotebookRecipientSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NotebookRecipientSettings &a, NotebookRecipientSettings &b);

inline std::ostream& operator<<(std::ostream& out, const NotebookRecipientSettings& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SharedNotebook__isset {
  _SharedNotebook__isset() : id(false), userId(false), notebookGuid(false), email(false), recipientIdentityId(false), notebookModifiable(false), serviceCreated(false), serviceUpdated(false), globalId(false), username(false), privilege(false), recipientSettings(false), sharerUserId(false), recipientUsername(false), recipientUserId(false), serviceAssigned(false) {}
  bool id :1;
  bool userId :1;
  bool notebookGuid :1;
  bool email :1;
  bool recipientIdentityId :1;
  bool notebookModifiable :1;
  bool serviceCreated :1;
  bool serviceUpdated :1;
  bool globalId :1;
  bool username :1;
  bool privilege :1;
  bool recipientSettings :1;
  bool sharerUserId :1;
  bool recipientUsername :1;
  bool recipientUserId :1;
  bool serviceAssigned :1;
} _SharedNotebook__isset;

class SharedNotebook {
 public:

  SharedNotebook(const SharedNotebook&);
  SharedNotebook& operator=(const SharedNotebook&);
  SharedNotebook() : id(0), userId(0), notebookGuid(), email(), recipientIdentityId(0), notebookModifiable(0), serviceCreated(0), serviceUpdated(0), globalId(), username(), privilege((SharedNotebookPrivilegeLevel::type)0), sharerUserId(0), recipientUsername(), recipientUserId(0), serviceAssigned(0) {
  }

  virtual ~SharedNotebook() throw();
  int64_t id;
  UserID userId;
  Guid notebookGuid;
  std::string email;
  IdentityID recipientIdentityId;
  bool notebookModifiable;
  Timestamp serviceCreated;
  Timestamp serviceUpdated;
  std::string globalId;
  std::string username;
  SharedNotebookPrivilegeLevel::type privilege;
  SharedNotebookRecipientSettings recipientSettings;
  UserID sharerUserId;
  std::string recipientUsername;
  UserID recipientUserId;
  Timestamp serviceAssigned;

  _SharedNotebook__isset __isset;

  void __set_id(const int64_t val);

  void __set_userId(const UserID val);

  void __set_notebookGuid(const Guid& val);

  void __set_email(const std::string& val);

  void __set_recipientIdentityId(const IdentityID val);

  void __set_notebookModifiable(const bool val);

  void __set_serviceCreated(const Timestamp val);

  void __set_serviceUpdated(const Timestamp val);

  void __set_globalId(const std::string& val);

  void __set_username(const std::string& val);

  void __set_privilege(const SharedNotebookPrivilegeLevel::type val);

  void __set_recipientSettings(const SharedNotebookRecipientSettings& val);

  void __set_sharerUserId(const UserID val);

  void __set_recipientUsername(const std::string& val);

  void __set_recipientUserId(const UserID val);

  void __set_serviceAssigned(const Timestamp val);

  bool operator == (const SharedNotebook & rhs) const
  {
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.userId != rhs.__isset.userId)
      return false;
    else if (__isset.userId && !(userId == rhs.userId))
      return false;
    if (__isset.notebookGuid != rhs.__isset.notebookGuid)
      return false;
    else if (__isset.notebookGuid && !(notebookGuid == rhs.notebookGuid))
      return false;
    if (__isset.email != rhs.__isset.email)
      return false;
    else if (__isset.email && !(email == rhs.email))
      return false;
    if (__isset.recipientIdentityId != rhs.__isset.recipientIdentityId)
      return false;
    else if (__isset.recipientIdentityId && !(recipientIdentityId == rhs.recipientIdentityId))
      return false;
    if (__isset.notebookModifiable != rhs.__isset.notebookModifiable)
      return false;
    else if (__isset.notebookModifiable && !(notebookModifiable == rhs.notebookModifiable))
      return false;
    if (__isset.serviceCreated != rhs.__isset.serviceCreated)
      return false;
    else if (__isset.serviceCreated && !(serviceCreated == rhs.serviceCreated))
      return false;
    if (__isset.serviceUpdated != rhs.__isset.serviceUpdated)
      return false;
    else if (__isset.serviceUpdated && !(serviceUpdated == rhs.serviceUpdated))
      return false;
    if (__isset.globalId != rhs.__isset.globalId)
      return false;
    else if (__isset.globalId && !(globalId == rhs.globalId))
      return false;
    if (__isset.username != rhs.__isset.username)
      return false;
    else if (__isset.username && !(username == rhs.username))
      return false;
    if (__isset.privilege != rhs.__isset.privilege)
      return false;
    else if (__isset.privilege && !(privilege == rhs.privilege))
      return false;
    if (__isset.recipientSettings != rhs.__isset.recipientSettings)
      return false;
    else if (__isset.recipientSettings && !(recipientSettings == rhs.recipientSettings))
      return false;
    if (__isset.sharerUserId != rhs.__isset.sharerUserId)
      return false;
    else if (__isset.sharerUserId && !(sharerUserId == rhs.sharerUserId))
      return false;
    if (__isset.recipientUsername != rhs.__isset.recipientUsername)
      return false;
    else if (__isset.recipientUsername && !(recipientUsername == rhs.recipientUsername))
      return false;
    if (__isset.recipientUserId != rhs.__isset.recipientUserId)
      return false;
    else if (__isset.recipientUserId && !(recipientUserId == rhs.recipientUserId))
      return false;
    if (__isset.serviceAssigned != rhs.__isset.serviceAssigned)
      return false;
    else if (__isset.serviceAssigned && !(serviceAssigned == rhs.serviceAssigned))
      return false;
    return true;
  }
  bool operator != (const SharedNotebook &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SharedNotebook & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SharedNotebook &a, SharedNotebook &b);

inline std::ostream& operator<<(std::ostream& out, const SharedNotebook& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _NotebookRestrictions__isset {
  _NotebookRestrictions__isset() : noReadNotes(false), noCreateNotes(false), noUpdateNotes(false), noExpungeNotes(false), noShareNotes(false), noEmailNotes(false), noSendMessageToRecipients(false), noUpdateNotebook(false), noExpungeNotebook(false), noSetDefaultNotebook(false), noSetNotebookStack(false), noPublishToPublic(false), noPublishToBusinessLibrary(false), noCreateTags(false), noUpdateTags(false), noExpungeTags(false), noSetParentTag(false), noCreateSharedNotebooks(false), updateWhichSharedNotebookRestrictions(false), expungeWhichSharedNotebookRestrictions(false), noShareNotesWithBusiness(false), noRenameNotebook(false) {}
  bool noReadNotes :1;
  bool noCreateNotes :1;
  bool noUpdateNotes :1;
  bool noExpungeNotes :1;
  bool noShareNotes :1;
  bool noEmailNotes :1;
  bool noSendMessageToRecipients :1;
  bool noUpdateNotebook :1;
  bool noExpungeNotebook :1;
  bool noSetDefaultNotebook :1;
  bool noSetNotebookStack :1;
  bool noPublishToPublic :1;
  bool noPublishToBusinessLibrary :1;
  bool noCreateTags :1;
  bool noUpdateTags :1;
  bool noExpungeTags :1;
  bool noSetParentTag :1;
  bool noCreateSharedNotebooks :1;
  bool updateWhichSharedNotebookRestrictions :1;
  bool expungeWhichSharedNotebookRestrictions :1;
  bool noShareNotesWithBusiness :1;
  bool noRenameNotebook :1;
} _NotebookRestrictions__isset;

class NotebookRestrictions {
 public:

  NotebookRestrictions(const NotebookRestrictions&);
  NotebookRestrictions& operator=(const NotebookRestrictions&);
  NotebookRestrictions() : noReadNotes(0), noCreateNotes(0), noUpdateNotes(0), noExpungeNotes(0), noShareNotes(0), noEmailNotes(0), noSendMessageToRecipients(0), noUpdateNotebook(0), noExpungeNotebook(0), noSetDefaultNotebook(0), noSetNotebookStack(0), noPublishToPublic(0), noPublishToBusinessLibrary(0), noCreateTags(0), noUpdateTags(0), noExpungeTags(0), noSetParentTag(0), noCreateSharedNotebooks(0), updateWhichSharedNotebookRestrictions((SharedNotebookInstanceRestrictions::type)0), expungeWhichSharedNotebookRestrictions((SharedNotebookInstanceRestrictions::type)0), noShareNotesWithBusiness(0), noRenameNotebook(0) {
  }

  virtual ~NotebookRestrictions() throw();
  bool noReadNotes;
  bool noCreateNotes;
  bool noUpdateNotes;
  bool noExpungeNotes;
  bool noShareNotes;
  bool noEmailNotes;
  bool noSendMessageToRecipients;
  bool noUpdateNotebook;
  bool noExpungeNotebook;
  bool noSetDefaultNotebook;
  bool noSetNotebookStack;
  bool noPublishToPublic;
  bool noPublishToBusinessLibrary;
  bool noCreateTags;
  bool noUpdateTags;
  bool noExpungeTags;
  bool noSetParentTag;
  bool noCreateSharedNotebooks;
  SharedNotebookInstanceRestrictions::type updateWhichSharedNotebookRestrictions;
  SharedNotebookInstanceRestrictions::type expungeWhichSharedNotebookRestrictions;
  bool noShareNotesWithBusiness;
  bool noRenameNotebook;

  _NotebookRestrictions__isset __isset;

  void __set_noReadNotes(const bool val);

  void __set_noCreateNotes(const bool val);

  void __set_noUpdateNotes(const bool val);

  void __set_noExpungeNotes(const bool val);

  void __set_noShareNotes(const bool val);

  void __set_noEmailNotes(const bool val);

  void __set_noSendMessageToRecipients(const bool val);

  void __set_noUpdateNotebook(const bool val);

  void __set_noExpungeNotebook(const bool val);

  void __set_noSetDefaultNotebook(const bool val);

  void __set_noSetNotebookStack(const bool val);

  void __set_noPublishToPublic(const bool val);

  void __set_noPublishToBusinessLibrary(const bool val);

  void __set_noCreateTags(const bool val);

  void __set_noUpdateTags(const bool val);

  void __set_noExpungeTags(const bool val);

  void __set_noSetParentTag(const bool val);

  void __set_noCreateSharedNotebooks(const bool val);

  void __set_updateWhichSharedNotebookRestrictions(const SharedNotebookInstanceRestrictions::type val);

  void __set_expungeWhichSharedNotebookRestrictions(const SharedNotebookInstanceRestrictions::type val);

  void __set_noShareNotesWithBusiness(const bool val);

  void __set_noRenameNotebook(const bool val);

  bool operator == (const NotebookRestrictions & rhs) const
  {
    if (__isset.noReadNotes != rhs.__isset.noReadNotes)
      return false;
    else if (__isset.noReadNotes && !(noReadNotes == rhs.noReadNotes))
      return false;
    if (__isset.noCreateNotes != rhs.__isset.noCreateNotes)
      return false;
    else if (__isset.noCreateNotes && !(noCreateNotes == rhs.noCreateNotes))
      return false;
    if (__isset.noUpdateNotes != rhs.__isset.noUpdateNotes)
      return false;
    else if (__isset.noUpdateNotes && !(noUpdateNotes == rhs.noUpdateNotes))
      return false;
    if (__isset.noExpungeNotes != rhs.__isset.noExpungeNotes)
      return false;
    else if (__isset.noExpungeNotes && !(noExpungeNotes == rhs.noExpungeNotes))
      return false;
    if (__isset.noShareNotes != rhs.__isset.noShareNotes)
      return false;
    else if (__isset.noShareNotes && !(noShareNotes == rhs.noShareNotes))
      return false;
    if (__isset.noEmailNotes != rhs.__isset.noEmailNotes)
      return false;
    else if (__isset.noEmailNotes && !(noEmailNotes == rhs.noEmailNotes))
      return false;
    if (__isset.noSendMessageToRecipients != rhs.__isset.noSendMessageToRecipients)
      return false;
    else if (__isset.noSendMessageToRecipients && !(noSendMessageToRecipients == rhs.noSendMessageToRecipients))
      return false;
    if (__isset.noUpdateNotebook != rhs.__isset.noUpdateNotebook)
      return false;
    else if (__isset.noUpdateNotebook && !(noUpdateNotebook == rhs.noUpdateNotebook))
      return false;
    if (__isset.noExpungeNotebook != rhs.__isset.noExpungeNotebook)
      return false;
    else if (__isset.noExpungeNotebook && !(noExpungeNotebook == rhs.noExpungeNotebook))
      return false;
    if (__isset.noSetDefaultNotebook != rhs.__isset.noSetDefaultNotebook)
      return false;
    else if (__isset.noSetDefaultNotebook && !(noSetDefaultNotebook == rhs.noSetDefaultNotebook))
      return false;
    if (__isset.noSetNotebookStack != rhs.__isset.noSetNotebookStack)
      return false;
    else if (__isset.noSetNotebookStack && !(noSetNotebookStack == rhs.noSetNotebookStack))
      return false;
    if (__isset.noPublishToPublic != rhs.__isset.noPublishToPublic)
      return false;
    else if (__isset.noPublishToPublic && !(noPublishToPublic == rhs.noPublishToPublic))
      return false;
    if (__isset.noPublishToBusinessLibrary != rhs.__isset.noPublishToBusinessLibrary)
      return false;
    else if (__isset.noPublishToBusinessLibrary && !(noPublishToBusinessLibrary == rhs.noPublishToBusinessLibrary))
      return false;
    if (__isset.noCreateTags != rhs.__isset.noCreateTags)
      return false;
    else if (__isset.noCreateTags && !(noCreateTags == rhs.noCreateTags))
      return false;
    if (__isset.noUpdateTags != rhs.__isset.noUpdateTags)
      return false;
    else if (__isset.noUpdateTags && !(noUpdateTags == rhs.noUpdateTags))
      return false;
    if (__isset.noExpungeTags != rhs.__isset.noExpungeTags)
      return false;
    else if (__isset.noExpungeTags && !(noExpungeTags == rhs.noExpungeTags))
      return false;
    if (__isset.noSetParentTag != rhs.__isset.noSetParentTag)
      return false;
    else if (__isset.noSetParentTag && !(noSetParentTag == rhs.noSetParentTag))
      return false;
    if (__isset.noCreateSharedNotebooks != rhs.__isset.noCreateSharedNotebooks)
      return false;
    else if (__isset.noCreateSharedNotebooks && !(noCreateSharedNotebooks == rhs.noCreateSharedNotebooks))
      return false;
    if (__isset.updateWhichSharedNotebookRestrictions != rhs.__isset.updateWhichSharedNotebookRestrictions)
      return false;
    else if (__isset.updateWhichSharedNotebookRestrictions && !(updateWhichSharedNotebookRestrictions == rhs.updateWhichSharedNotebookRestrictions))
      return false;
    if (__isset.expungeWhichSharedNotebookRestrictions != rhs.__isset.expungeWhichSharedNotebookRestrictions)
      return false;
    else if (__isset.expungeWhichSharedNotebookRestrictions && !(expungeWhichSharedNotebookRestrictions == rhs.expungeWhichSharedNotebookRestrictions))
      return false;
    if (__isset.noShareNotesWithBusiness != rhs.__isset.noShareNotesWithBusiness)
      return false;
    else if (__isset.noShareNotesWithBusiness && !(noShareNotesWithBusiness == rhs.noShareNotesWithBusiness))
      return false;
    if (__isset.noRenameNotebook != rhs.__isset.noRenameNotebook)
      return false;
    else if (__isset.noRenameNotebook && !(noRenameNotebook == rhs.noRenameNotebook))
      return false;
    return true;
  }
  bool operator != (const NotebookRestrictions &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotebookRestrictions & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NotebookRestrictions &a, NotebookRestrictions &b);

inline std::ostream& operator<<(std::ostream& out, const NotebookRestrictions& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Notebook__isset {
  _Notebook__isset() : guid(false), name(false), updateSequenceNum(false), defaultNotebook(false), serviceCreated(false), serviceUpdated(false), publishing(false), published(false), stack(false), sharedNotebookIds(false), sharedNotebooks(false), businessNotebook(false), contact(false), restrictions(false), recipientSettings(false) {}
  bool guid :1;
  bool name :1;
  bool updateSequenceNum :1;
  bool defaultNotebook :1;
  bool serviceCreated :1;
  bool serviceUpdated :1;
  bool publishing :1;
  bool published :1;
  bool stack :1;
  bool sharedNotebookIds :1;
  bool sharedNotebooks :1;
  bool businessNotebook :1;
  bool contact :1;
  bool restrictions :1;
  bool recipientSettings :1;
} _Notebook__isset;

class Notebook {
 public:

  Notebook(const Notebook&);
  Notebook& operator=(const Notebook&);
  Notebook() : guid(), name(), updateSequenceNum(0), defaultNotebook(0), serviceCreated(0), serviceUpdated(0), published(0), stack() {
  }

  virtual ~Notebook() throw();
  Guid guid;
  std::string name;
  int32_t updateSequenceNum;
  bool defaultNotebook;
  Timestamp serviceCreated;
  Timestamp serviceUpdated;
  Publishing publishing;
  bool published;
  std::string stack;
  std::vector<int64_t>  sharedNotebookIds;
  std::vector<SharedNotebook>  sharedNotebooks;
  BusinessNotebook businessNotebook;
  User contact;
  NotebookRestrictions restrictions;
  NotebookRecipientSettings recipientSettings;

  _Notebook__isset __isset;

  void __set_guid(const Guid& val);

  void __set_name(const std::string& val);

  void __set_updateSequenceNum(const int32_t val);

  void __set_defaultNotebook(const bool val);

  void __set_serviceCreated(const Timestamp val);

  void __set_serviceUpdated(const Timestamp val);

  void __set_publishing(const Publishing& val);

  void __set_published(const bool val);

  void __set_stack(const std::string& val);

  void __set_sharedNotebookIds(const std::vector<int64_t> & val);

  void __set_sharedNotebooks(const std::vector<SharedNotebook> & val);

  void __set_businessNotebook(const BusinessNotebook& val);

  void __set_contact(const User& val);

  void __set_restrictions(const NotebookRestrictions& val);

  void __set_recipientSettings(const NotebookRecipientSettings& val);

  bool operator == (const Notebook & rhs) const
  {
    if (__isset.guid != rhs.__isset.guid)
      return false;
    else if (__isset.guid && !(guid == rhs.guid))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.updateSequenceNum != rhs.__isset.updateSequenceNum)
      return false;
    else if (__isset.updateSequenceNum && !(updateSequenceNum == rhs.updateSequenceNum))
      return false;
    if (__isset.defaultNotebook != rhs.__isset.defaultNotebook)
      return false;
    else if (__isset.defaultNotebook && !(defaultNotebook == rhs.defaultNotebook))
      return false;
    if (__isset.serviceCreated != rhs.__isset.serviceCreated)
      return false;
    else if (__isset.serviceCreated && !(serviceCreated == rhs.serviceCreated))
      return false;
    if (__isset.serviceUpdated != rhs.__isset.serviceUpdated)
      return false;
    else if (__isset.serviceUpdated && !(serviceUpdated == rhs.serviceUpdated))
      return false;
    if (__isset.publishing != rhs.__isset.publishing)
      return false;
    else if (__isset.publishing && !(publishing == rhs.publishing))
      return false;
    if (__isset.published != rhs.__isset.published)
      return false;
    else if (__isset.published && !(published == rhs.published))
      return false;
    if (__isset.stack != rhs.__isset.stack)
      return false;
    else if (__isset.stack && !(stack == rhs.stack))
      return false;
    if (__isset.sharedNotebookIds != rhs.__isset.sharedNotebookIds)
      return false;
    else if (__isset.sharedNotebookIds && !(sharedNotebookIds == rhs.sharedNotebookIds))
      return false;
    if (__isset.sharedNotebooks != rhs.__isset.sharedNotebooks)
      return false;
    else if (__isset.sharedNotebooks && !(sharedNotebooks == rhs.sharedNotebooks))
      return false;
    if (__isset.businessNotebook != rhs.__isset.businessNotebook)
      return false;
    else if (__isset.businessNotebook && !(businessNotebook == rhs.businessNotebook))
      return false;
    if (__isset.contact != rhs.__isset.contact)
      return false;
    else if (__isset.contact && !(contact == rhs.contact))
      return false;
    if (__isset.restrictions != rhs.__isset.restrictions)
      return false;
    else if (__isset.restrictions && !(restrictions == rhs.restrictions))
      return false;
    if (__isset.recipientSettings != rhs.__isset.recipientSettings)
      return false;
    else if (__isset.recipientSettings && !(recipientSettings == rhs.recipientSettings))
      return false;
    return true;
  }
  bool operator != (const Notebook &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Notebook & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Notebook &a, Notebook &b);

inline std::ostream& operator<<(std::ostream& out, const Notebook& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _LinkedNotebook__isset {
  _LinkedNotebook__isset() : shareName(false), username(false), shardId(false), sharedNotebookGlobalId(false), uri(false), guid(false), updateSequenceNum(false), noteStoreUrl(false), webApiUrlPrefix(false), stack(false), businessId(false) {}
  bool shareName :1;
  bool username :1;
  bool shardId :1;
  bool sharedNotebookGlobalId :1;
  bool uri :1;
  bool guid :1;
  bool updateSequenceNum :1;
  bool noteStoreUrl :1;
  bool webApiUrlPrefix :1;
  bool stack :1;
  bool businessId :1;
} _LinkedNotebook__isset;

class LinkedNotebook {
 public:

  LinkedNotebook(const LinkedNotebook&);
  LinkedNotebook& operator=(const LinkedNotebook&);
  LinkedNotebook() : shareName(), username(), shardId(), sharedNotebookGlobalId(), uri(), guid(), updateSequenceNum(0), noteStoreUrl(), webApiUrlPrefix(), stack(), businessId(0) {
  }

  virtual ~LinkedNotebook() throw();
  std::string shareName;
  std::string username;
  std::string shardId;
  std::string sharedNotebookGlobalId;
  std::string uri;
  Guid guid;
  int32_t updateSequenceNum;
  std::string noteStoreUrl;
  std::string webApiUrlPrefix;
  std::string stack;
  int32_t businessId;

  _LinkedNotebook__isset __isset;

  void __set_shareName(const std::string& val);

  void __set_username(const std::string& val);

  void __set_shardId(const std::string& val);

  void __set_sharedNotebookGlobalId(const std::string& val);

  void __set_uri(const std::string& val);

  void __set_guid(const Guid& val);

  void __set_updateSequenceNum(const int32_t val);

  void __set_noteStoreUrl(const std::string& val);

  void __set_webApiUrlPrefix(const std::string& val);

  void __set_stack(const std::string& val);

  void __set_businessId(const int32_t val);

  bool operator == (const LinkedNotebook & rhs) const
  {
    if (__isset.shareName != rhs.__isset.shareName)
      return false;
    else if (__isset.shareName && !(shareName == rhs.shareName))
      return false;
    if (__isset.username != rhs.__isset.username)
      return false;
    else if (__isset.username && !(username == rhs.username))
      return false;
    if (__isset.shardId != rhs.__isset.shardId)
      return false;
    else if (__isset.shardId && !(shardId == rhs.shardId))
      return false;
    if (__isset.sharedNotebookGlobalId != rhs.__isset.sharedNotebookGlobalId)
      return false;
    else if (__isset.sharedNotebookGlobalId && !(sharedNotebookGlobalId == rhs.sharedNotebookGlobalId))
      return false;
    if (__isset.uri != rhs.__isset.uri)
      return false;
    else if (__isset.uri && !(uri == rhs.uri))
      return false;
    if (__isset.guid != rhs.__isset.guid)
      return false;
    else if (__isset.guid && !(guid == rhs.guid))
      return false;
    if (__isset.updateSequenceNum != rhs.__isset.updateSequenceNum)
      return false;
    else if (__isset.updateSequenceNum && !(updateSequenceNum == rhs.updateSequenceNum))
      return false;
    if (__isset.noteStoreUrl != rhs.__isset.noteStoreUrl)
      return false;
    else if (__isset.noteStoreUrl && !(noteStoreUrl == rhs.noteStoreUrl))
      return false;
    if (__isset.webApiUrlPrefix != rhs.__isset.webApiUrlPrefix)
      return false;
    else if (__isset.webApiUrlPrefix && !(webApiUrlPrefix == rhs.webApiUrlPrefix))
      return false;
    if (__isset.stack != rhs.__isset.stack)
      return false;
    else if (__isset.stack && !(stack == rhs.stack))
      return false;
    if (__isset.businessId != rhs.__isset.businessId)
      return false;
    else if (__isset.businessId && !(businessId == rhs.businessId))
      return false;
    return true;
  }
  bool operator != (const LinkedNotebook &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LinkedNotebook & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LinkedNotebook &a, LinkedNotebook &b);

inline std::ostream& operator<<(std::ostream& out, const LinkedNotebook& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _NotebookDescriptor__isset {
  _NotebookDescriptor__isset() : guid(false), notebookDisplayName(false), contactName(false), hasSharedNotebook(false), joinedUserCount(false) {}
  bool guid :1;
  bool notebookDisplayName :1;
  bool contactName :1;
  bool hasSharedNotebook :1;
  bool joinedUserCount :1;
} _NotebookDescriptor__isset;

class NotebookDescriptor {
 public:

  NotebookDescriptor(const NotebookDescriptor&);
  NotebookDescriptor& operator=(const NotebookDescriptor&);
  NotebookDescriptor() : guid(), notebookDisplayName(), contactName(), hasSharedNotebook(0), joinedUserCount(0) {
  }

  virtual ~NotebookDescriptor() throw();
  Guid guid;
  std::string notebookDisplayName;
  std::string contactName;
  bool hasSharedNotebook;
  int32_t joinedUserCount;

  _NotebookDescriptor__isset __isset;

  void __set_guid(const Guid& val);

  void __set_notebookDisplayName(const std::string& val);

  void __set_contactName(const std::string& val);

  void __set_hasSharedNotebook(const bool val);

  void __set_joinedUserCount(const int32_t val);

  bool operator == (const NotebookDescriptor & rhs) const
  {
    if (__isset.guid != rhs.__isset.guid)
      return false;
    else if (__isset.guid && !(guid == rhs.guid))
      return false;
    if (__isset.notebookDisplayName != rhs.__isset.notebookDisplayName)
      return false;
    else if (__isset.notebookDisplayName && !(notebookDisplayName == rhs.notebookDisplayName))
      return false;
    if (__isset.contactName != rhs.__isset.contactName)
      return false;
    else if (__isset.contactName && !(contactName == rhs.contactName))
      return false;
    if (__isset.hasSharedNotebook != rhs.__isset.hasSharedNotebook)
      return false;
    else if (__isset.hasSharedNotebook && !(hasSharedNotebook == rhs.hasSharedNotebook))
      return false;
    if (__isset.joinedUserCount != rhs.__isset.joinedUserCount)
      return false;
    else if (__isset.joinedUserCount && !(joinedUserCount == rhs.joinedUserCount))
      return false;
    return true;
  }
  bool operator != (const NotebookDescriptor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotebookDescriptor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NotebookDescriptor &a, NotebookDescriptor &b);

inline std::ostream& operator<<(std::ostream& out, const NotebookDescriptor& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UserProfile__isset {
  _UserProfile__isset() : id(false), name(false), email(false), username(false), attributes(false), joined(false), photoLastUpdated(false), photoUrl(false), role(false) {}
  bool id :1;
  bool name :1;
  bool email :1;
  bool username :1;
  bool attributes :1;
  bool joined :1;
  bool photoLastUpdated :1;
  bool photoUrl :1;
  bool role :1;
} _UserProfile__isset;

class UserProfile {
 public:

  UserProfile(const UserProfile&);
  UserProfile& operator=(const UserProfile&);
  UserProfile() : id(0), name(), email(), username(), joined(0), photoLastUpdated(0), photoUrl(), role((BusinessUserRole::type)0) {
  }

  virtual ~UserProfile() throw();
  UserID id;
  std::string name;
  std::string email;
  std::string username;
  BusinessUserAttributes attributes;
  Timestamp joined;
  Timestamp photoLastUpdated;
  std::string photoUrl;
  BusinessUserRole::type role;

  _UserProfile__isset __isset;

  void __set_id(const UserID val);

  void __set_name(const std::string& val);

  void __set_email(const std::string& val);

  void __set_username(const std::string& val);

  void __set_attributes(const BusinessUserAttributes& val);

  void __set_joined(const Timestamp val);

  void __set_photoLastUpdated(const Timestamp val);

  void __set_photoUrl(const std::string& val);

  void __set_role(const BusinessUserRole::type val);

  bool operator == (const UserProfile & rhs) const
  {
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.email != rhs.__isset.email)
      return false;
    else if (__isset.email && !(email == rhs.email))
      return false;
    if (__isset.username != rhs.__isset.username)
      return false;
    else if (__isset.username && !(username == rhs.username))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.joined != rhs.__isset.joined)
      return false;
    else if (__isset.joined && !(joined == rhs.joined))
      return false;
    if (__isset.photoLastUpdated != rhs.__isset.photoLastUpdated)
      return false;
    else if (__isset.photoLastUpdated && !(photoLastUpdated == rhs.photoLastUpdated))
      return false;
    if (__isset.photoUrl != rhs.__isset.photoUrl)
      return false;
    else if (__isset.photoUrl && !(photoUrl == rhs.photoUrl))
      return false;
    if (__isset.role != rhs.__isset.role)
      return false;
    else if (__isset.role && !(role == rhs.role))
      return false;
    return true;
  }
  bool operator != (const UserProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserProfile &a, UserProfile &b);

inline std::ostream& operator<<(std::ostream& out, const UserProfile& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RelatedContentImage__isset {
  _RelatedContentImage__isset() : url(false), width(false), height(false), pixelRatio(false), fileSize(false) {}
  bool url :1;
  bool width :1;
  bool height :1;
  bool pixelRatio :1;
  bool fileSize :1;
} _RelatedContentImage__isset;

class RelatedContentImage {
 public:

  RelatedContentImage(const RelatedContentImage&);
  RelatedContentImage& operator=(const RelatedContentImage&);
  RelatedContentImage() : url(), width(0), height(0), pixelRatio(0), fileSize(0) {
  }

  virtual ~RelatedContentImage() throw();
  std::string url;
  int32_t width;
  int32_t height;
  double pixelRatio;
  int32_t fileSize;

  _RelatedContentImage__isset __isset;

  void __set_url(const std::string& val);

  void __set_width(const int32_t val);

  void __set_height(const int32_t val);

  void __set_pixelRatio(const double val);

  void __set_fileSize(const int32_t val);

  bool operator == (const RelatedContentImage & rhs) const
  {
    if (__isset.url != rhs.__isset.url)
      return false;
    else if (__isset.url && !(url == rhs.url))
      return false;
    if (__isset.width != rhs.__isset.width)
      return false;
    else if (__isset.width && !(width == rhs.width))
      return false;
    if (__isset.height != rhs.__isset.height)
      return false;
    else if (__isset.height && !(height == rhs.height))
      return false;
    if (__isset.pixelRatio != rhs.__isset.pixelRatio)
      return false;
    else if (__isset.pixelRatio && !(pixelRatio == rhs.pixelRatio))
      return false;
    if (__isset.fileSize != rhs.__isset.fileSize)
      return false;
    else if (__isset.fileSize && !(fileSize == rhs.fileSize))
      return false;
    return true;
  }
  bool operator != (const RelatedContentImage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RelatedContentImage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RelatedContentImage &a, RelatedContentImage &b);

inline std::ostream& operator<<(std::ostream& out, const RelatedContentImage& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RelatedContent__isset {
  _RelatedContent__isset() : contentId(false), title(false), url(false), sourceId(false), sourceUrl(false), sourceFaviconUrl(false), sourceName(false), date(false), teaser(false), thumbnails(false), contentType(false), accessType(false), visibleUrl(false), clipUrl(false), contact(false), authors(false) {}
  bool contentId :1;
  bool title :1;
  bool url :1;
  bool sourceId :1;
  bool sourceUrl :1;
  bool sourceFaviconUrl :1;
  bool sourceName :1;
  bool date :1;
  bool teaser :1;
  bool thumbnails :1;
  bool contentType :1;
  bool accessType :1;
  bool visibleUrl :1;
  bool clipUrl :1;
  bool contact :1;
  bool authors :1;
} _RelatedContent__isset;

class RelatedContent {
 public:

  RelatedContent(const RelatedContent&);
  RelatedContent& operator=(const RelatedContent&);
  RelatedContent() : contentId(), title(), url(), sourceId(), sourceUrl(), sourceFaviconUrl(), sourceName(), date(0), teaser(), contentType((RelatedContentType::type)0), accessType((RelatedContentAccess::type)0), visibleUrl(), clipUrl() {
  }

  virtual ~RelatedContent() throw();
  std::string contentId;
  std::string title;
  std::string url;
  std::string sourceId;
  std::string sourceUrl;
  std::string sourceFaviconUrl;
  std::string sourceName;
  Timestamp date;
  std::string teaser;
  std::vector<RelatedContentImage>  thumbnails;
  RelatedContentType::type contentType;
  RelatedContentAccess::type accessType;
  std::string visibleUrl;
  std::string clipUrl;
  Contact contact;
  std::vector<std::string>  authors;

  _RelatedContent__isset __isset;

  void __set_contentId(const std::string& val);

  void __set_title(const std::string& val);

  void __set_url(const std::string& val);

  void __set_sourceId(const std::string& val);

  void __set_sourceUrl(const std::string& val);

  void __set_sourceFaviconUrl(const std::string& val);

  void __set_sourceName(const std::string& val);

  void __set_date(const Timestamp val);

  void __set_teaser(const std::string& val);

  void __set_thumbnails(const std::vector<RelatedContentImage> & val);

  void __set_contentType(const RelatedContentType::type val);

  void __set_accessType(const RelatedContentAccess::type val);

  void __set_visibleUrl(const std::string& val);

  void __set_clipUrl(const std::string& val);

  void __set_contact(const Contact& val);

  void __set_authors(const std::vector<std::string> & val);

  bool operator == (const RelatedContent & rhs) const
  {
    if (__isset.contentId != rhs.__isset.contentId)
      return false;
    else if (__isset.contentId && !(contentId == rhs.contentId))
      return false;
    if (__isset.title != rhs.__isset.title)
      return false;
    else if (__isset.title && !(title == rhs.title))
      return false;
    if (__isset.url != rhs.__isset.url)
      return false;
    else if (__isset.url && !(url == rhs.url))
      return false;
    if (__isset.sourceId != rhs.__isset.sourceId)
      return false;
    else if (__isset.sourceId && !(sourceId == rhs.sourceId))
      return false;
    if (__isset.sourceUrl != rhs.__isset.sourceUrl)
      return false;
    else if (__isset.sourceUrl && !(sourceUrl == rhs.sourceUrl))
      return false;
    if (__isset.sourceFaviconUrl != rhs.__isset.sourceFaviconUrl)
      return false;
    else if (__isset.sourceFaviconUrl && !(sourceFaviconUrl == rhs.sourceFaviconUrl))
      return false;
    if (__isset.sourceName != rhs.__isset.sourceName)
      return false;
    else if (__isset.sourceName && !(sourceName == rhs.sourceName))
      return false;
    if (__isset.date != rhs.__isset.date)
      return false;
    else if (__isset.date && !(date == rhs.date))
      return false;
    if (__isset.teaser != rhs.__isset.teaser)
      return false;
    else if (__isset.teaser && !(teaser == rhs.teaser))
      return false;
    if (__isset.thumbnails != rhs.__isset.thumbnails)
      return false;
    else if (__isset.thumbnails && !(thumbnails == rhs.thumbnails))
      return false;
    if (__isset.contentType != rhs.__isset.contentType)
      return false;
    else if (__isset.contentType && !(contentType == rhs.contentType))
      return false;
    if (__isset.accessType != rhs.__isset.accessType)
      return false;
    else if (__isset.accessType && !(accessType == rhs.accessType))
      return false;
    if (__isset.visibleUrl != rhs.__isset.visibleUrl)
      return false;
    else if (__isset.visibleUrl && !(visibleUrl == rhs.visibleUrl))
      return false;
    if (__isset.clipUrl != rhs.__isset.clipUrl)
      return false;
    else if (__isset.clipUrl && !(clipUrl == rhs.clipUrl))
      return false;
    if (__isset.contact != rhs.__isset.contact)
      return false;
    else if (__isset.contact && !(contact == rhs.contact))
      return false;
    if (__isset.authors != rhs.__isset.authors)
      return false;
    else if (__isset.authors && !(authors == rhs.authors))
      return false;
    return true;
  }
  bool operator != (const RelatedContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RelatedContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RelatedContent &a, RelatedContent &b);

inline std::ostream& operator<<(std::ostream& out, const RelatedContent& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _BusinessInvitation__isset {
  _BusinessInvitation__isset() : businessId(false), email(false), role(false), status(false), requesterId(false), fromWorkChat(false), created(false) {}
  bool businessId :1;
  bool email :1;
  bool role :1;
  bool status :1;
  bool requesterId :1;
  bool fromWorkChat :1;
  bool created :1;
} _BusinessInvitation__isset;

class BusinessInvitation {
 public:

  BusinessInvitation(const BusinessInvitation&);
  BusinessInvitation& operator=(const BusinessInvitation&);
  BusinessInvitation() : businessId(0), email(), role((BusinessUserRole::type)0), status((BusinessInvitationStatus::type)0), requesterId(0), fromWorkChat(0), created(0) {
  }

  virtual ~BusinessInvitation() throw();
  int32_t businessId;
  std::string email;
  BusinessUserRole::type role;
  BusinessInvitationStatus::type status;
  UserID requesterId;
  bool fromWorkChat;
  Timestamp created;

  _BusinessInvitation__isset __isset;

  void __set_businessId(const int32_t val);

  void __set_email(const std::string& val);

  void __set_role(const BusinessUserRole::type val);

  void __set_status(const BusinessInvitationStatus::type val);

  void __set_requesterId(const UserID val);

  void __set_fromWorkChat(const bool val);

  void __set_created(const Timestamp val);

  bool operator == (const BusinessInvitation & rhs) const
  {
    if (__isset.businessId != rhs.__isset.businessId)
      return false;
    else if (__isset.businessId && !(businessId == rhs.businessId))
      return false;
    if (__isset.email != rhs.__isset.email)
      return false;
    else if (__isset.email && !(email == rhs.email))
      return false;
    if (__isset.role != rhs.__isset.role)
      return false;
    else if (__isset.role && !(role == rhs.role))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    if (__isset.requesterId != rhs.__isset.requesterId)
      return false;
    else if (__isset.requesterId && !(requesterId == rhs.requesterId))
      return false;
    if (__isset.fromWorkChat != rhs.__isset.fromWorkChat)
      return false;
    else if (__isset.fromWorkChat && !(fromWorkChat == rhs.fromWorkChat))
      return false;
    if (__isset.created != rhs.__isset.created)
      return false;
    else if (__isset.created && !(created == rhs.created))
      return false;
    return true;
  }
  bool operator != (const BusinessInvitation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BusinessInvitation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BusinessInvitation &a, BusinessInvitation &b);

inline std::ostream& operator<<(std::ostream& out, const BusinessInvitation& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UserIdentity__isset {
  _UserIdentity__isset() : type(false), stringIdentifier(false), longIdentifier(false) {}
  bool type :1;
  bool stringIdentifier :1;
  bool longIdentifier :1;
} _UserIdentity__isset;

class UserIdentity {
 public:

  UserIdentity(const UserIdentity&);
  UserIdentity& operator=(const UserIdentity&);
  UserIdentity() : type((UserIdentityType::type)0), stringIdentifier(), longIdentifier(0) {
  }

  virtual ~UserIdentity() throw();
  UserIdentityType::type type;
  std::string stringIdentifier;
  int64_t longIdentifier;

  _UserIdentity__isset __isset;

  void __set_type(const UserIdentityType::type val);

  void __set_stringIdentifier(const std::string& val);

  void __set_longIdentifier(const int64_t val);

  bool operator == (const UserIdentity & rhs) const
  {
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.stringIdentifier != rhs.__isset.stringIdentifier)
      return false;
    else if (__isset.stringIdentifier && !(stringIdentifier == rhs.stringIdentifier))
      return false;
    if (__isset.longIdentifier != rhs.__isset.longIdentifier)
      return false;
    else if (__isset.longIdentifier && !(longIdentifier == rhs.longIdentifier))
      return false;
    return true;
  }
  bool operator != (const UserIdentity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserIdentity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserIdentity &a, UserIdentity &b);

inline std::ostream& operator<<(std::ostream& out, const UserIdentity& obj)
{
  obj.printTo(out);
  return out;
}

}} // namespace

#endif
