/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UserStore_TYPES_H
#define UserStore_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Types_types.h"
#include "Errors_types.h"


namespace evernote { namespace edam {

class PublicUserInfo;

class UserUrls;

class AuthenticationResult;

class BootstrapSettings;

class BootstrapProfile;

class BootstrapInfo;

typedef struct _PublicUserInfo__isset {
  _PublicUserInfo__isset() : serviceLevel(false), username(false), noteStoreUrl(false), webApiUrlPrefix(false) {}
  bool serviceLevel :1;
  bool username :1;
  bool noteStoreUrl :1;
  bool webApiUrlPrefix :1;
} _PublicUserInfo__isset;

class PublicUserInfo {
 public:

  PublicUserInfo(const PublicUserInfo&);
  PublicUserInfo& operator=(const PublicUserInfo&);
  PublicUserInfo() : userId(0), serviceLevel(( ::evernote::edam::ServiceLevel::type)0), username(), noteStoreUrl(), webApiUrlPrefix() {
  }

  virtual ~PublicUserInfo() throw();
   ::evernote::edam::UserID userId;
   ::evernote::edam::ServiceLevel::type serviceLevel;
  std::string username;
  std::string noteStoreUrl;
  std::string webApiUrlPrefix;

  _PublicUserInfo__isset __isset;

  void __set_userId(const  ::evernote::edam::UserID val);

  void __set_serviceLevel(const  ::evernote::edam::ServiceLevel::type val);

  void __set_username(const std::string& val);

  void __set_noteStoreUrl(const std::string& val);

  void __set_webApiUrlPrefix(const std::string& val);

  bool operator == (const PublicUserInfo & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (__isset.serviceLevel != rhs.__isset.serviceLevel)
      return false;
    else if (__isset.serviceLevel && !(serviceLevel == rhs.serviceLevel))
      return false;
    if (__isset.username != rhs.__isset.username)
      return false;
    else if (__isset.username && !(username == rhs.username))
      return false;
    if (__isset.noteStoreUrl != rhs.__isset.noteStoreUrl)
      return false;
    else if (__isset.noteStoreUrl && !(noteStoreUrl == rhs.noteStoreUrl))
      return false;
    if (__isset.webApiUrlPrefix != rhs.__isset.webApiUrlPrefix)
      return false;
    else if (__isset.webApiUrlPrefix && !(webApiUrlPrefix == rhs.webApiUrlPrefix))
      return false;
    return true;
  }
  bool operator != (const PublicUserInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PublicUserInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PublicUserInfo &a, PublicUserInfo &b);

inline std::ostream& operator<<(std::ostream& out, const PublicUserInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UserUrls__isset {
  _UserUrls__isset() : noteStoreUrl(false), webApiUrlPrefix(false), userStoreUrl(false), utilityUrl(false), messageStoreUrl(false), userWebSocketUrl(false) {}
  bool noteStoreUrl :1;
  bool webApiUrlPrefix :1;
  bool userStoreUrl :1;
  bool utilityUrl :1;
  bool messageStoreUrl :1;
  bool userWebSocketUrl :1;
} _UserUrls__isset;

class UserUrls {
 public:

  UserUrls(const UserUrls&);
  UserUrls& operator=(const UserUrls&);
  UserUrls() : noteStoreUrl(), webApiUrlPrefix(), userStoreUrl(), utilityUrl(), messageStoreUrl(), userWebSocketUrl() {
  }

  virtual ~UserUrls() throw();
  std::string noteStoreUrl;
  std::string webApiUrlPrefix;
  std::string userStoreUrl;
  std::string utilityUrl;
  std::string messageStoreUrl;
  std::string userWebSocketUrl;

  _UserUrls__isset __isset;

  void __set_noteStoreUrl(const std::string& val);

  void __set_webApiUrlPrefix(const std::string& val);

  void __set_userStoreUrl(const std::string& val);

  void __set_utilityUrl(const std::string& val);

  void __set_messageStoreUrl(const std::string& val);

  void __set_userWebSocketUrl(const std::string& val);

  bool operator == (const UserUrls & rhs) const
  {
    if (__isset.noteStoreUrl != rhs.__isset.noteStoreUrl)
      return false;
    else if (__isset.noteStoreUrl && !(noteStoreUrl == rhs.noteStoreUrl))
      return false;
    if (__isset.webApiUrlPrefix != rhs.__isset.webApiUrlPrefix)
      return false;
    else if (__isset.webApiUrlPrefix && !(webApiUrlPrefix == rhs.webApiUrlPrefix))
      return false;
    if (__isset.userStoreUrl != rhs.__isset.userStoreUrl)
      return false;
    else if (__isset.userStoreUrl && !(userStoreUrl == rhs.userStoreUrl))
      return false;
    if (__isset.utilityUrl != rhs.__isset.utilityUrl)
      return false;
    else if (__isset.utilityUrl && !(utilityUrl == rhs.utilityUrl))
      return false;
    if (__isset.messageStoreUrl != rhs.__isset.messageStoreUrl)
      return false;
    else if (__isset.messageStoreUrl && !(messageStoreUrl == rhs.messageStoreUrl))
      return false;
    if (__isset.userWebSocketUrl != rhs.__isset.userWebSocketUrl)
      return false;
    else if (__isset.userWebSocketUrl && !(userWebSocketUrl == rhs.userWebSocketUrl))
      return false;
    return true;
  }
  bool operator != (const UserUrls &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserUrls & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserUrls &a, UserUrls &b);

inline std::ostream& operator<<(std::ostream& out, const UserUrls& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _AuthenticationResult__isset {
  _AuthenticationResult__isset() : user(false), publicUserInfo(false), noteStoreUrl(false), webApiUrlPrefix(false), secondFactorRequired(false), secondFactorDeliveryHint(false), urls(false) {}
  bool user :1;
  bool publicUserInfo :1;
  bool noteStoreUrl :1;
  bool webApiUrlPrefix :1;
  bool secondFactorRequired :1;
  bool secondFactorDeliveryHint :1;
  bool urls :1;
} _AuthenticationResult__isset;

class AuthenticationResult {
 public:

  AuthenticationResult(const AuthenticationResult&);
  AuthenticationResult& operator=(const AuthenticationResult&);
  AuthenticationResult() : currentTime(0), authenticationToken(), expiration(0), noteStoreUrl(), webApiUrlPrefix(), secondFactorRequired(0), secondFactorDeliveryHint() {
  }

  virtual ~AuthenticationResult() throw();
   ::evernote::edam::Timestamp currentTime;
  std::string authenticationToken;
   ::evernote::edam::Timestamp expiration;
   ::evernote::edam::User user;
  PublicUserInfo publicUserInfo;
  std::string noteStoreUrl;
  std::string webApiUrlPrefix;
  bool secondFactorRequired;
  std::string secondFactorDeliveryHint;
  UserUrls urls;

  _AuthenticationResult__isset __isset;

  void __set_currentTime(const  ::evernote::edam::Timestamp val);

  void __set_authenticationToken(const std::string& val);

  void __set_expiration(const  ::evernote::edam::Timestamp val);

  void __set_user(const  ::evernote::edam::User& val);

  void __set_publicUserInfo(const PublicUserInfo& val);

  void __set_noteStoreUrl(const std::string& val);

  void __set_webApiUrlPrefix(const std::string& val);

  void __set_secondFactorRequired(const bool val);

  void __set_secondFactorDeliveryHint(const std::string& val);

  void __set_urls(const UserUrls& val);

  bool operator == (const AuthenticationResult & rhs) const
  {
    if (!(currentTime == rhs.currentTime))
      return false;
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(expiration == rhs.expiration))
      return false;
    if (__isset.user != rhs.__isset.user)
      return false;
    else if (__isset.user && !(user == rhs.user))
      return false;
    if (__isset.publicUserInfo != rhs.__isset.publicUserInfo)
      return false;
    else if (__isset.publicUserInfo && !(publicUserInfo == rhs.publicUserInfo))
      return false;
    if (__isset.noteStoreUrl != rhs.__isset.noteStoreUrl)
      return false;
    else if (__isset.noteStoreUrl && !(noteStoreUrl == rhs.noteStoreUrl))
      return false;
    if (__isset.webApiUrlPrefix != rhs.__isset.webApiUrlPrefix)
      return false;
    else if (__isset.webApiUrlPrefix && !(webApiUrlPrefix == rhs.webApiUrlPrefix))
      return false;
    if (__isset.secondFactorRequired != rhs.__isset.secondFactorRequired)
      return false;
    else if (__isset.secondFactorRequired && !(secondFactorRequired == rhs.secondFactorRequired))
      return false;
    if (__isset.secondFactorDeliveryHint != rhs.__isset.secondFactorDeliveryHint)
      return false;
    else if (__isset.secondFactorDeliveryHint && !(secondFactorDeliveryHint == rhs.secondFactorDeliveryHint))
      return false;
    if (__isset.urls != rhs.__isset.urls)
      return false;
    else if (__isset.urls && !(urls == rhs.urls))
      return false;
    return true;
  }
  bool operator != (const AuthenticationResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AuthenticationResult &a, AuthenticationResult &b);

inline std::ostream& operator<<(std::ostream& out, const AuthenticationResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _BootstrapSettings__isset {
  _BootstrapSettings__isset() : enableFacebookSharing(false), enableGiftSubscriptions(false), enableSupportTickets(false), enableSharedNotebooks(false), enableSingleNoteSharing(false), enableSponsoredAccounts(false), enableTwitterSharing(false), enableLinkedInSharing(false), enablePublicNotebooks(false), enableGoogle(false) {}
  bool enableFacebookSharing :1;
  bool enableGiftSubscriptions :1;
  bool enableSupportTickets :1;
  bool enableSharedNotebooks :1;
  bool enableSingleNoteSharing :1;
  bool enableSponsoredAccounts :1;
  bool enableTwitterSharing :1;
  bool enableLinkedInSharing :1;
  bool enablePublicNotebooks :1;
  bool enableGoogle :1;
} _BootstrapSettings__isset;

class BootstrapSettings {
 public:

  BootstrapSettings(const BootstrapSettings&);
  BootstrapSettings& operator=(const BootstrapSettings&);
  BootstrapSettings() : serviceHost(), marketingUrl(), supportUrl(), accountEmailDomain(), enableFacebookSharing(0), enableGiftSubscriptions(0), enableSupportTickets(0), enableSharedNotebooks(0), enableSingleNoteSharing(0), enableSponsoredAccounts(0), enableTwitterSharing(0), enableLinkedInSharing(0), enablePublicNotebooks(0), enableGoogle(0) {
  }

  virtual ~BootstrapSettings() throw();
  std::string serviceHost;
  std::string marketingUrl;
  std::string supportUrl;
  std::string accountEmailDomain;
  bool enableFacebookSharing;
  bool enableGiftSubscriptions;
  bool enableSupportTickets;
  bool enableSharedNotebooks;
  bool enableSingleNoteSharing;
  bool enableSponsoredAccounts;
  bool enableTwitterSharing;
  bool enableLinkedInSharing;
  bool enablePublicNotebooks;
  bool enableGoogle;

  _BootstrapSettings__isset __isset;

  void __set_serviceHost(const std::string& val);

  void __set_marketingUrl(const std::string& val);

  void __set_supportUrl(const std::string& val);

  void __set_accountEmailDomain(const std::string& val);

  void __set_enableFacebookSharing(const bool val);

  void __set_enableGiftSubscriptions(const bool val);

  void __set_enableSupportTickets(const bool val);

  void __set_enableSharedNotebooks(const bool val);

  void __set_enableSingleNoteSharing(const bool val);

  void __set_enableSponsoredAccounts(const bool val);

  void __set_enableTwitterSharing(const bool val);

  void __set_enableLinkedInSharing(const bool val);

  void __set_enablePublicNotebooks(const bool val);

  void __set_enableGoogle(const bool val);

  bool operator == (const BootstrapSettings & rhs) const
  {
    if (!(serviceHost == rhs.serviceHost))
      return false;
    if (!(marketingUrl == rhs.marketingUrl))
      return false;
    if (!(supportUrl == rhs.supportUrl))
      return false;
    if (!(accountEmailDomain == rhs.accountEmailDomain))
      return false;
    if (__isset.enableFacebookSharing != rhs.__isset.enableFacebookSharing)
      return false;
    else if (__isset.enableFacebookSharing && !(enableFacebookSharing == rhs.enableFacebookSharing))
      return false;
    if (__isset.enableGiftSubscriptions != rhs.__isset.enableGiftSubscriptions)
      return false;
    else if (__isset.enableGiftSubscriptions && !(enableGiftSubscriptions == rhs.enableGiftSubscriptions))
      return false;
    if (__isset.enableSupportTickets != rhs.__isset.enableSupportTickets)
      return false;
    else if (__isset.enableSupportTickets && !(enableSupportTickets == rhs.enableSupportTickets))
      return false;
    if (__isset.enableSharedNotebooks != rhs.__isset.enableSharedNotebooks)
      return false;
    else if (__isset.enableSharedNotebooks && !(enableSharedNotebooks == rhs.enableSharedNotebooks))
      return false;
    if (__isset.enableSingleNoteSharing != rhs.__isset.enableSingleNoteSharing)
      return false;
    else if (__isset.enableSingleNoteSharing && !(enableSingleNoteSharing == rhs.enableSingleNoteSharing))
      return false;
    if (__isset.enableSponsoredAccounts != rhs.__isset.enableSponsoredAccounts)
      return false;
    else if (__isset.enableSponsoredAccounts && !(enableSponsoredAccounts == rhs.enableSponsoredAccounts))
      return false;
    if (__isset.enableTwitterSharing != rhs.__isset.enableTwitterSharing)
      return false;
    else if (__isset.enableTwitterSharing && !(enableTwitterSharing == rhs.enableTwitterSharing))
      return false;
    if (__isset.enableLinkedInSharing != rhs.__isset.enableLinkedInSharing)
      return false;
    else if (__isset.enableLinkedInSharing && !(enableLinkedInSharing == rhs.enableLinkedInSharing))
      return false;
    if (__isset.enablePublicNotebooks != rhs.__isset.enablePublicNotebooks)
      return false;
    else if (__isset.enablePublicNotebooks && !(enablePublicNotebooks == rhs.enablePublicNotebooks))
      return false;
    if (__isset.enableGoogle != rhs.__isset.enableGoogle)
      return false;
    else if (__isset.enableGoogle && !(enableGoogle == rhs.enableGoogle))
      return false;
    return true;
  }
  bool operator != (const BootstrapSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BootstrapSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BootstrapSettings &a, BootstrapSettings &b);

inline std::ostream& operator<<(std::ostream& out, const BootstrapSettings& obj)
{
  obj.printTo(out);
  return out;
}


class BootstrapProfile {
 public:

  BootstrapProfile(const BootstrapProfile&);
  BootstrapProfile& operator=(const BootstrapProfile&);
  BootstrapProfile() : name() {
  }

  virtual ~BootstrapProfile() throw();
  std::string name;
  BootstrapSettings settings;

  void __set_name(const std::string& val);

  void __set_settings(const BootstrapSettings& val);

  bool operator == (const BootstrapProfile & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(settings == rhs.settings))
      return false;
    return true;
  }
  bool operator != (const BootstrapProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BootstrapProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BootstrapProfile &a, BootstrapProfile &b);

inline std::ostream& operator<<(std::ostream& out, const BootstrapProfile& obj)
{
  obj.printTo(out);
  return out;
}


class BootstrapInfo {
 public:

  BootstrapInfo(const BootstrapInfo&);
  BootstrapInfo& operator=(const BootstrapInfo&);
  BootstrapInfo() {
  }

  virtual ~BootstrapInfo() throw();
  std::vector<BootstrapProfile>  profiles;

  void __set_profiles(const std::vector<BootstrapProfile> & val);

  bool operator == (const BootstrapInfo & rhs) const
  {
    if (!(profiles == rhs.profiles))
      return false;
    return true;
  }
  bool operator != (const BootstrapInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BootstrapInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BootstrapInfo &a, BootstrapInfo &b);

inline std::ostream& operator<<(std::ostream& out, const BootstrapInfo& obj)
{
  obj.printTo(out);
  return out;
}

}} // namespace

#endif
